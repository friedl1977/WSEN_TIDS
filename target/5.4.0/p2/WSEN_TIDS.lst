
/Users/friedl/Desktop/Projects/WSEN_TIDS/target/5.4.0/p2/WSEN_TIDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023face8  085fa088  0000ace8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005300  023facf0  085fa090  0000acf0  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000080  1007ad84  085ff390  0001ad84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e4  1007ae04  1007ae04  0002ae04  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff410  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000ba4  085ff414  085ff414  0001f414  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f414  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00143bb8  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00015c6c  00000000  00000000  00163bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00040a25  00000000  00000000  00179824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f20  00000000  00000000  001ba249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000aec8  00000000  00000000  001bd169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cdd2  00000000  00000000  001c8031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004c971  00000000  00000000  001f4e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c8d72  00000000  00000000  00241774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008a04  00000000  00000000  0030a4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	480e      	ldr	r0, [pc, #56]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa01a:	490f      	ldr	r1, [pc, #60]	; (85fa058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a0e      	ldr	r2, [pc, #56]	; (85fa05c <module_user_pre_init+0x44>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b0d      	ldr	r3, [pc, #52]	; (85fa060 <module_user_pre_init+0x48>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	480d      	ldr	r0, [pc, #52]	; (85fa064 <module_user_pre_init+0x4c>)
 85fa030:	4a0d      	ldr	r2, [pc, #52]	; (85fa068 <module_user_pre_init+0x50>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b0d      	ldr	r3, [pc, #52]	; (85fa06c <module_user_pre_init+0x54>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa03a:	480d      	ldr	r0, [pc, #52]	; (85fa070 <module_user_pre_init+0x58>)
 85fa03c:	490d      	ldr	r1, [pc, #52]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a0d      	ldr	r2, [pc, #52]	; (85fa078 <module_user_pre_init+0x60>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa048:	4b05      	ldr	r3, [pc, #20]	; (85fa060 <module_user_pre_init+0x48>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa04e:	4801      	ldr	r0, [pc, #4]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa050:	bd08      	pop	{r3, pc}
 85fa052:	bf00      	nop
 85fa054:	1007ad84 	.word	0x1007ad84
 85fa058:	085ff390 	.word	0x085ff390
 85fa05c:	1007ae04 	.word	0x1007ae04
 85fa060:	10110d2d 	.word	0x10110d2d
 85fa064:	1007ae04 	.word	0x1007ae04
 85fa068:	1007afe8 	.word	0x1007afe8
 85fa06c:	10110ea1 	.word	0x10110ea1
 85fa070:	023face8 	.word	0x023face8
 85fa074:	085fa088 	.word	0x085fa088
 85fa078:	023ffff0 	.word	0x023ffff0

085fa07c <dynalib_preinit>:
 85fa07c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023facf0 <__aeabi_drsub>:
 23facf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23facf4:	e002      	b.n	23facfc <__adddf3>
 23facf6:	bf00      	nop

023facf8 <__aeabi_dsub>:
 23facf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023facfc <__adddf3>:
 23facfc:	b530      	push	{r4, r5, lr}
 23facfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fad02:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fad06:	ea94 0f05 	teq	r4, r5
 23fad0a:	bf08      	it	eq
 23fad0c:	ea90 0f02 	teqeq	r0, r2
 23fad10:	bf1f      	itttt	ne
 23fad12:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fad16:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fad1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fad1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fad22:	f000 80e2 	beq.w	23faeea <__adddf3+0x1ee>
 23fad26:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fad2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fad2e:	bfb8      	it	lt
 23fad30:	426d      	neglt	r5, r5
 23fad32:	dd0c      	ble.n	23fad4e <__adddf3+0x52>
 23fad34:	442c      	add	r4, r5
 23fad36:	ea80 0202 	eor.w	r2, r0, r2
 23fad3a:	ea81 0303 	eor.w	r3, r1, r3
 23fad3e:	ea82 0000 	eor.w	r0, r2, r0
 23fad42:	ea83 0101 	eor.w	r1, r3, r1
 23fad46:	ea80 0202 	eor.w	r2, r0, r2
 23fad4a:	ea81 0303 	eor.w	r3, r1, r3
 23fad4e:	2d36      	cmp	r5, #54	; 0x36
 23fad50:	bf88      	it	hi
 23fad52:	bd30      	pophi	{r4, r5, pc}
 23fad54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fad58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fad5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fad60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fad64:	d002      	beq.n	23fad6c <__adddf3+0x70>
 23fad66:	4240      	negs	r0, r0
 23fad68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fad6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fad70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fad74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fad78:	d002      	beq.n	23fad80 <__adddf3+0x84>
 23fad7a:	4252      	negs	r2, r2
 23fad7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fad80:	ea94 0f05 	teq	r4, r5
 23fad84:	f000 80a7 	beq.w	23faed6 <__adddf3+0x1da>
 23fad88:	f1a4 0401 	sub.w	r4, r4, #1
 23fad8c:	f1d5 0e20 	rsbs	lr, r5, #32
 23fad90:	db0d      	blt.n	23fadae <__adddf3+0xb2>
 23fad92:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fad96:	fa22 f205 	lsr.w	r2, r2, r5
 23fad9a:	1880      	adds	r0, r0, r2
 23fad9c:	f141 0100 	adc.w	r1, r1, #0
 23fada0:	fa03 f20e 	lsl.w	r2, r3, lr
 23fada4:	1880      	adds	r0, r0, r2
 23fada6:	fa43 f305 	asr.w	r3, r3, r5
 23fadaa:	4159      	adcs	r1, r3
 23fadac:	e00e      	b.n	23fadcc <__adddf3+0xd0>
 23fadae:	f1a5 0520 	sub.w	r5, r5, #32
 23fadb2:	f10e 0e20 	add.w	lr, lr, #32
 23fadb6:	2a01      	cmp	r2, #1
 23fadb8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fadbc:	bf28      	it	cs
 23fadbe:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fadc2:	fa43 f305 	asr.w	r3, r3, r5
 23fadc6:	18c0      	adds	r0, r0, r3
 23fadc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fadcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fadd0:	d507      	bpl.n	23fade2 <__adddf3+0xe6>
 23fadd2:	f04f 0e00 	mov.w	lr, #0
 23fadd6:	f1dc 0c00 	rsbs	ip, ip, #0
 23fadda:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fadde:	eb6e 0101 	sbc.w	r1, lr, r1
 23fade2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fade6:	d31b      	bcc.n	23fae20 <__adddf3+0x124>
 23fade8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fadec:	d30c      	bcc.n	23fae08 <__adddf3+0x10c>
 23fadee:	0849      	lsrs	r1, r1, #1
 23fadf0:	ea5f 0030 	movs.w	r0, r0, rrx
 23fadf4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fadf8:	f104 0401 	add.w	r4, r4, #1
 23fadfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fae00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fae04:	f080 809a 	bcs.w	23faf3c <__adddf3+0x240>
 23fae08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fae0c:	bf08      	it	eq
 23fae0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fae12:	f150 0000 	adcs.w	r0, r0, #0
 23fae16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fae1a:	ea41 0105 	orr.w	r1, r1, r5
 23fae1e:	bd30      	pop	{r4, r5, pc}
 23fae20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fae24:	4140      	adcs	r0, r0
 23fae26:	eb41 0101 	adc.w	r1, r1, r1
 23fae2a:	3c01      	subs	r4, #1
 23fae2c:	bf28      	it	cs
 23fae2e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fae32:	d2e9      	bcs.n	23fae08 <__adddf3+0x10c>
 23fae34:	f091 0f00 	teq	r1, #0
 23fae38:	bf04      	itt	eq
 23fae3a:	4601      	moveq	r1, r0
 23fae3c:	2000      	moveq	r0, #0
 23fae3e:	fab1 f381 	clz	r3, r1
 23fae42:	bf08      	it	eq
 23fae44:	3320      	addeq	r3, #32
 23fae46:	f1a3 030b 	sub.w	r3, r3, #11
 23fae4a:	f1b3 0220 	subs.w	r2, r3, #32
 23fae4e:	da0c      	bge.n	23fae6a <__adddf3+0x16e>
 23fae50:	320c      	adds	r2, #12
 23fae52:	dd08      	ble.n	23fae66 <__adddf3+0x16a>
 23fae54:	f102 0c14 	add.w	ip, r2, #20
 23fae58:	f1c2 020c 	rsb	r2, r2, #12
 23fae5c:	fa01 f00c 	lsl.w	r0, r1, ip
 23fae60:	fa21 f102 	lsr.w	r1, r1, r2
 23fae64:	e00c      	b.n	23fae80 <__adddf3+0x184>
 23fae66:	f102 0214 	add.w	r2, r2, #20
 23fae6a:	bfd8      	it	le
 23fae6c:	f1c2 0c20 	rsble	ip, r2, #32
 23fae70:	fa01 f102 	lsl.w	r1, r1, r2
 23fae74:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fae78:	bfdc      	itt	le
 23fae7a:	ea41 010c 	orrle.w	r1, r1, ip
 23fae7e:	4090      	lslle	r0, r2
 23fae80:	1ae4      	subs	r4, r4, r3
 23fae82:	bfa2      	ittt	ge
 23fae84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fae88:	4329      	orrge	r1, r5
 23fae8a:	bd30      	popge	{r4, r5, pc}
 23fae8c:	ea6f 0404 	mvn.w	r4, r4
 23fae90:	3c1f      	subs	r4, #31
 23fae92:	da1c      	bge.n	23faece <__adddf3+0x1d2>
 23fae94:	340c      	adds	r4, #12
 23fae96:	dc0e      	bgt.n	23faeb6 <__adddf3+0x1ba>
 23fae98:	f104 0414 	add.w	r4, r4, #20
 23fae9c:	f1c4 0220 	rsb	r2, r4, #32
 23faea0:	fa20 f004 	lsr.w	r0, r0, r4
 23faea4:	fa01 f302 	lsl.w	r3, r1, r2
 23faea8:	ea40 0003 	orr.w	r0, r0, r3
 23faeac:	fa21 f304 	lsr.w	r3, r1, r4
 23faeb0:	ea45 0103 	orr.w	r1, r5, r3
 23faeb4:	bd30      	pop	{r4, r5, pc}
 23faeb6:	f1c4 040c 	rsb	r4, r4, #12
 23faeba:	f1c4 0220 	rsb	r2, r4, #32
 23faebe:	fa20 f002 	lsr.w	r0, r0, r2
 23faec2:	fa01 f304 	lsl.w	r3, r1, r4
 23faec6:	ea40 0003 	orr.w	r0, r0, r3
 23faeca:	4629      	mov	r1, r5
 23faecc:	bd30      	pop	{r4, r5, pc}
 23faece:	fa21 f004 	lsr.w	r0, r1, r4
 23faed2:	4629      	mov	r1, r5
 23faed4:	bd30      	pop	{r4, r5, pc}
 23faed6:	f094 0f00 	teq	r4, #0
 23faeda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23faede:	bf06      	itte	eq
 23faee0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23faee4:	3401      	addeq	r4, #1
 23faee6:	3d01      	subne	r5, #1
 23faee8:	e74e      	b.n	23fad88 <__adddf3+0x8c>
 23faeea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23faeee:	bf18      	it	ne
 23faef0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23faef4:	d029      	beq.n	23faf4a <__adddf3+0x24e>
 23faef6:	ea94 0f05 	teq	r4, r5
 23faefa:	bf08      	it	eq
 23faefc:	ea90 0f02 	teqeq	r0, r2
 23faf00:	d005      	beq.n	23faf0e <__adddf3+0x212>
 23faf02:	ea54 0c00 	orrs.w	ip, r4, r0
 23faf06:	bf04      	itt	eq
 23faf08:	4619      	moveq	r1, r3
 23faf0a:	4610      	moveq	r0, r2
 23faf0c:	bd30      	pop	{r4, r5, pc}
 23faf0e:	ea91 0f03 	teq	r1, r3
 23faf12:	bf1e      	ittt	ne
 23faf14:	2100      	movne	r1, #0
 23faf16:	2000      	movne	r0, #0
 23faf18:	bd30      	popne	{r4, r5, pc}
 23faf1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23faf1e:	d105      	bne.n	23faf2c <__adddf3+0x230>
 23faf20:	0040      	lsls	r0, r0, #1
 23faf22:	4149      	adcs	r1, r1
 23faf24:	bf28      	it	cs
 23faf26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23faf2a:	bd30      	pop	{r4, r5, pc}
 23faf2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23faf30:	bf3c      	itt	cc
 23faf32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23faf36:	bd30      	popcc	{r4, r5, pc}
 23faf38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23faf3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23faf40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23faf44:	f04f 0000 	mov.w	r0, #0
 23faf48:	bd30      	pop	{r4, r5, pc}
 23faf4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23faf4e:	bf1a      	itte	ne
 23faf50:	4619      	movne	r1, r3
 23faf52:	4610      	movne	r0, r2
 23faf54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23faf58:	bf1c      	itt	ne
 23faf5a:	460b      	movne	r3, r1
 23faf5c:	4602      	movne	r2, r0
 23faf5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23faf62:	bf06      	itte	eq
 23faf64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23faf68:	ea91 0f03 	teqeq	r1, r3
 23faf6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23faf70:	bd30      	pop	{r4, r5, pc}
 23faf72:	bf00      	nop

023faf74 <__aeabi_ui2d>:
 23faf74:	f090 0f00 	teq	r0, #0
 23faf78:	bf04      	itt	eq
 23faf7a:	2100      	moveq	r1, #0
 23faf7c:	4770      	bxeq	lr
 23faf7e:	b530      	push	{r4, r5, lr}
 23faf80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23faf84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23faf88:	f04f 0500 	mov.w	r5, #0
 23faf8c:	f04f 0100 	mov.w	r1, #0
 23faf90:	e750      	b.n	23fae34 <__adddf3+0x138>
 23faf92:	bf00      	nop

023faf94 <__aeabi_i2d>:
 23faf94:	f090 0f00 	teq	r0, #0
 23faf98:	bf04      	itt	eq
 23faf9a:	2100      	moveq	r1, #0
 23faf9c:	4770      	bxeq	lr
 23faf9e:	b530      	push	{r4, r5, lr}
 23fafa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fafa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fafa8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fafac:	bf48      	it	mi
 23fafae:	4240      	negmi	r0, r0
 23fafb0:	f04f 0100 	mov.w	r1, #0
 23fafb4:	e73e      	b.n	23fae34 <__adddf3+0x138>
 23fafb6:	bf00      	nop

023fafb8 <__aeabi_f2d>:
 23fafb8:	0042      	lsls	r2, r0, #1
 23fafba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fafbe:	ea4f 0131 	mov.w	r1, r1, rrx
 23fafc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fafc6:	bf1f      	itttt	ne
 23fafc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fafcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fafd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fafd4:	4770      	bxne	lr
 23fafd6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fafda:	bf08      	it	eq
 23fafdc:	4770      	bxeq	lr
 23fafde:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fafe2:	bf04      	itt	eq
 23fafe4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fafe8:	4770      	bxeq	lr
 23fafea:	b530      	push	{r4, r5, lr}
 23fafec:	f44f 7460 	mov.w	r4, #896	; 0x380
 23faff0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23faff4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23faff8:	e71c      	b.n	23fae34 <__adddf3+0x138>
 23faffa:	bf00      	nop

023faffc <__aeabi_ul2d>:
 23faffc:	ea50 0201 	orrs.w	r2, r0, r1
 23fb000:	bf08      	it	eq
 23fb002:	4770      	bxeq	lr
 23fb004:	b530      	push	{r4, r5, lr}
 23fb006:	f04f 0500 	mov.w	r5, #0
 23fb00a:	e00a      	b.n	23fb022 <__aeabi_l2d+0x16>

023fb00c <__aeabi_l2d>:
 23fb00c:	ea50 0201 	orrs.w	r2, r0, r1
 23fb010:	bf08      	it	eq
 23fb012:	4770      	bxeq	lr
 23fb014:	b530      	push	{r4, r5, lr}
 23fb016:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fb01a:	d502      	bpl.n	23fb022 <__aeabi_l2d+0x16>
 23fb01c:	4240      	negs	r0, r0
 23fb01e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fb022:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb026:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb02a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fb02e:	f43f aed8 	beq.w	23fade2 <__adddf3+0xe6>
 23fb032:	f04f 0203 	mov.w	r2, #3
 23fb036:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fb03a:	bf18      	it	ne
 23fb03c:	3203      	addne	r2, #3
 23fb03e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fb042:	bf18      	it	ne
 23fb044:	3203      	addne	r2, #3
 23fb046:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fb04a:	f1c2 0320 	rsb	r3, r2, #32
 23fb04e:	fa00 fc03 	lsl.w	ip, r0, r3
 23fb052:	fa20 f002 	lsr.w	r0, r0, r2
 23fb056:	fa01 fe03 	lsl.w	lr, r1, r3
 23fb05a:	ea40 000e 	orr.w	r0, r0, lr
 23fb05e:	fa21 f102 	lsr.w	r1, r1, r2
 23fb062:	4414      	add	r4, r2
 23fb064:	e6bd      	b.n	23fade2 <__adddf3+0xe6>
 23fb066:	bf00      	nop

023fb068 <__aeabi_dmul>:
 23fb068:	b570      	push	{r4, r5, r6, lr}
 23fb06a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fb06e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fb072:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fb076:	bf1d      	ittte	ne
 23fb078:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fb07c:	ea94 0f0c 	teqne	r4, ip
 23fb080:	ea95 0f0c 	teqne	r5, ip
 23fb084:	f000 f8de 	bleq	23fb244 <__aeabi_dmul+0x1dc>
 23fb088:	442c      	add	r4, r5
 23fb08a:	ea81 0603 	eor.w	r6, r1, r3
 23fb08e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fb092:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fb096:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fb09a:	bf18      	it	ne
 23fb09c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fb0a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb0a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fb0a8:	d038      	beq.n	23fb11c <__aeabi_dmul+0xb4>
 23fb0aa:	fba0 ce02 	umull	ip, lr, r0, r2
 23fb0ae:	f04f 0500 	mov.w	r5, #0
 23fb0b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fb0b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fb0ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fb0be:	f04f 0600 	mov.w	r6, #0
 23fb0c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fb0c6:	f09c 0f00 	teq	ip, #0
 23fb0ca:	bf18      	it	ne
 23fb0cc:	f04e 0e01 	orrne.w	lr, lr, #1
 23fb0d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fb0d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fb0d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fb0dc:	d204      	bcs.n	23fb0e8 <__aeabi_dmul+0x80>
 23fb0de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fb0e2:	416d      	adcs	r5, r5
 23fb0e4:	eb46 0606 	adc.w	r6, r6, r6
 23fb0e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fb0ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fb0f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fb0f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fb0f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fb0fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fb100:	bf88      	it	hi
 23fb102:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fb106:	d81e      	bhi.n	23fb146 <__aeabi_dmul+0xde>
 23fb108:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fb10c:	bf08      	it	eq
 23fb10e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fb112:	f150 0000 	adcs.w	r0, r0, #0
 23fb116:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb11a:	bd70      	pop	{r4, r5, r6, pc}
 23fb11c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fb120:	ea46 0101 	orr.w	r1, r6, r1
 23fb124:	ea40 0002 	orr.w	r0, r0, r2
 23fb128:	ea81 0103 	eor.w	r1, r1, r3
 23fb12c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fb130:	bfc2      	ittt	gt
 23fb132:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fb136:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fb13a:	bd70      	popgt	{r4, r5, r6, pc}
 23fb13c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb140:	f04f 0e00 	mov.w	lr, #0
 23fb144:	3c01      	subs	r4, #1
 23fb146:	f300 80ab 	bgt.w	23fb2a0 <__aeabi_dmul+0x238>
 23fb14a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fb14e:	bfde      	ittt	le
 23fb150:	2000      	movle	r0, #0
 23fb152:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fb156:	bd70      	pople	{r4, r5, r6, pc}
 23fb158:	f1c4 0400 	rsb	r4, r4, #0
 23fb15c:	3c20      	subs	r4, #32
 23fb15e:	da35      	bge.n	23fb1cc <__aeabi_dmul+0x164>
 23fb160:	340c      	adds	r4, #12
 23fb162:	dc1b      	bgt.n	23fb19c <__aeabi_dmul+0x134>
 23fb164:	f104 0414 	add.w	r4, r4, #20
 23fb168:	f1c4 0520 	rsb	r5, r4, #32
 23fb16c:	fa00 f305 	lsl.w	r3, r0, r5
 23fb170:	fa20 f004 	lsr.w	r0, r0, r4
 23fb174:	fa01 f205 	lsl.w	r2, r1, r5
 23fb178:	ea40 0002 	orr.w	r0, r0, r2
 23fb17c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fb180:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fb184:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fb188:	fa21 f604 	lsr.w	r6, r1, r4
 23fb18c:	eb42 0106 	adc.w	r1, r2, r6
 23fb190:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fb194:	bf08      	it	eq
 23fb196:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fb19a:	bd70      	pop	{r4, r5, r6, pc}
 23fb19c:	f1c4 040c 	rsb	r4, r4, #12
 23fb1a0:	f1c4 0520 	rsb	r5, r4, #32
 23fb1a4:	fa00 f304 	lsl.w	r3, r0, r4
 23fb1a8:	fa20 f005 	lsr.w	r0, r0, r5
 23fb1ac:	fa01 f204 	lsl.w	r2, r1, r4
 23fb1b0:	ea40 0002 	orr.w	r0, r0, r2
 23fb1b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb1b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fb1bc:	f141 0100 	adc.w	r1, r1, #0
 23fb1c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fb1c4:	bf08      	it	eq
 23fb1c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fb1ca:	bd70      	pop	{r4, r5, r6, pc}
 23fb1cc:	f1c4 0520 	rsb	r5, r4, #32
 23fb1d0:	fa00 f205 	lsl.w	r2, r0, r5
 23fb1d4:	ea4e 0e02 	orr.w	lr, lr, r2
 23fb1d8:	fa20 f304 	lsr.w	r3, r0, r4
 23fb1dc:	fa01 f205 	lsl.w	r2, r1, r5
 23fb1e0:	ea43 0302 	orr.w	r3, r3, r2
 23fb1e4:	fa21 f004 	lsr.w	r0, r1, r4
 23fb1e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb1ec:	fa21 f204 	lsr.w	r2, r1, r4
 23fb1f0:	ea20 0002 	bic.w	r0, r0, r2
 23fb1f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fb1f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fb1fc:	bf08      	it	eq
 23fb1fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fb202:	bd70      	pop	{r4, r5, r6, pc}
 23fb204:	f094 0f00 	teq	r4, #0
 23fb208:	d10f      	bne.n	23fb22a <__aeabi_dmul+0x1c2>
 23fb20a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fb20e:	0040      	lsls	r0, r0, #1
 23fb210:	eb41 0101 	adc.w	r1, r1, r1
 23fb214:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb218:	bf08      	it	eq
 23fb21a:	3c01      	subeq	r4, #1
 23fb21c:	d0f7      	beq.n	23fb20e <__aeabi_dmul+0x1a6>
 23fb21e:	ea41 0106 	orr.w	r1, r1, r6
 23fb222:	f095 0f00 	teq	r5, #0
 23fb226:	bf18      	it	ne
 23fb228:	4770      	bxne	lr
 23fb22a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fb22e:	0052      	lsls	r2, r2, #1
 23fb230:	eb43 0303 	adc.w	r3, r3, r3
 23fb234:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fb238:	bf08      	it	eq
 23fb23a:	3d01      	subeq	r5, #1
 23fb23c:	d0f7      	beq.n	23fb22e <__aeabi_dmul+0x1c6>
 23fb23e:	ea43 0306 	orr.w	r3, r3, r6
 23fb242:	4770      	bx	lr
 23fb244:	ea94 0f0c 	teq	r4, ip
 23fb248:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fb24c:	bf18      	it	ne
 23fb24e:	ea95 0f0c 	teqne	r5, ip
 23fb252:	d00c      	beq.n	23fb26e <__aeabi_dmul+0x206>
 23fb254:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb258:	bf18      	it	ne
 23fb25a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb25e:	d1d1      	bne.n	23fb204 <__aeabi_dmul+0x19c>
 23fb260:	ea81 0103 	eor.w	r1, r1, r3
 23fb264:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb268:	f04f 0000 	mov.w	r0, #0
 23fb26c:	bd70      	pop	{r4, r5, r6, pc}
 23fb26e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb272:	bf06      	itte	eq
 23fb274:	4610      	moveq	r0, r2
 23fb276:	4619      	moveq	r1, r3
 23fb278:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb27c:	d019      	beq.n	23fb2b2 <__aeabi_dmul+0x24a>
 23fb27e:	ea94 0f0c 	teq	r4, ip
 23fb282:	d102      	bne.n	23fb28a <__aeabi_dmul+0x222>
 23fb284:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fb288:	d113      	bne.n	23fb2b2 <__aeabi_dmul+0x24a>
 23fb28a:	ea95 0f0c 	teq	r5, ip
 23fb28e:	d105      	bne.n	23fb29c <__aeabi_dmul+0x234>
 23fb290:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fb294:	bf1c      	itt	ne
 23fb296:	4610      	movne	r0, r2
 23fb298:	4619      	movne	r1, r3
 23fb29a:	d10a      	bne.n	23fb2b2 <__aeabi_dmul+0x24a>
 23fb29c:	ea81 0103 	eor.w	r1, r1, r3
 23fb2a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb2a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fb2a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fb2ac:	f04f 0000 	mov.w	r0, #0
 23fb2b0:	bd70      	pop	{r4, r5, r6, pc}
 23fb2b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fb2b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fb2ba:	bd70      	pop	{r4, r5, r6, pc}

023fb2bc <__aeabi_ddiv>:
 23fb2bc:	b570      	push	{r4, r5, r6, lr}
 23fb2be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fb2c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fb2c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fb2ca:	bf1d      	ittte	ne
 23fb2cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fb2d0:	ea94 0f0c 	teqne	r4, ip
 23fb2d4:	ea95 0f0c 	teqne	r5, ip
 23fb2d8:	f000 f8a7 	bleq	23fb42a <__aeabi_ddiv+0x16e>
 23fb2dc:	eba4 0405 	sub.w	r4, r4, r5
 23fb2e0:	ea81 0e03 	eor.w	lr, r1, r3
 23fb2e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fb2e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fb2ec:	f000 8088 	beq.w	23fb400 <__aeabi_ddiv+0x144>
 23fb2f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fb2f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fb2f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fb2fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fb300:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fb304:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fb308:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fb30c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fb310:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fb314:	429d      	cmp	r5, r3
 23fb316:	bf08      	it	eq
 23fb318:	4296      	cmpeq	r6, r2
 23fb31a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fb31e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fb322:	d202      	bcs.n	23fb32a <__aeabi_ddiv+0x6e>
 23fb324:	085b      	lsrs	r3, r3, #1
 23fb326:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb32a:	1ab6      	subs	r6, r6, r2
 23fb32c:	eb65 0503 	sbc.w	r5, r5, r3
 23fb330:	085b      	lsrs	r3, r3, #1
 23fb332:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb336:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fb33a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fb33e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb342:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb346:	bf22      	ittt	cs
 23fb348:	1ab6      	subcs	r6, r6, r2
 23fb34a:	4675      	movcs	r5, lr
 23fb34c:	ea40 000c 	orrcs.w	r0, r0, ip
 23fb350:	085b      	lsrs	r3, r3, #1
 23fb352:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb356:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb35a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb35e:	bf22      	ittt	cs
 23fb360:	1ab6      	subcs	r6, r6, r2
 23fb362:	4675      	movcs	r5, lr
 23fb364:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fb368:	085b      	lsrs	r3, r3, #1
 23fb36a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb36e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb372:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb376:	bf22      	ittt	cs
 23fb378:	1ab6      	subcs	r6, r6, r2
 23fb37a:	4675      	movcs	r5, lr
 23fb37c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fb380:	085b      	lsrs	r3, r3, #1
 23fb382:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb386:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb38a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb38e:	bf22      	ittt	cs
 23fb390:	1ab6      	subcs	r6, r6, r2
 23fb392:	4675      	movcs	r5, lr
 23fb394:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fb398:	ea55 0e06 	orrs.w	lr, r5, r6
 23fb39c:	d018      	beq.n	23fb3d0 <__aeabi_ddiv+0x114>
 23fb39e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fb3a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fb3a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fb3aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fb3ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fb3b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fb3b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fb3ba:	d1c0      	bne.n	23fb33e <__aeabi_ddiv+0x82>
 23fb3bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb3c0:	d10b      	bne.n	23fb3da <__aeabi_ddiv+0x11e>
 23fb3c2:	ea41 0100 	orr.w	r1, r1, r0
 23fb3c6:	f04f 0000 	mov.w	r0, #0
 23fb3ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fb3ce:	e7b6      	b.n	23fb33e <__aeabi_ddiv+0x82>
 23fb3d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb3d4:	bf04      	itt	eq
 23fb3d6:	4301      	orreq	r1, r0
 23fb3d8:	2000      	moveq	r0, #0
 23fb3da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fb3de:	bf88      	it	hi
 23fb3e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fb3e4:	f63f aeaf 	bhi.w	23fb146 <__aeabi_dmul+0xde>
 23fb3e8:	ebb5 0c03 	subs.w	ip, r5, r3
 23fb3ec:	bf04      	itt	eq
 23fb3ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fb3f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fb3f6:	f150 0000 	adcs.w	r0, r0, #0
 23fb3fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb3fe:	bd70      	pop	{r4, r5, r6, pc}
 23fb400:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fb404:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fb408:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fb40c:	bfc2      	ittt	gt
 23fb40e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fb412:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fb416:	bd70      	popgt	{r4, r5, r6, pc}
 23fb418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb41c:	f04f 0e00 	mov.w	lr, #0
 23fb420:	3c01      	subs	r4, #1
 23fb422:	e690      	b.n	23fb146 <__aeabi_dmul+0xde>
 23fb424:	ea45 0e06 	orr.w	lr, r5, r6
 23fb428:	e68d      	b.n	23fb146 <__aeabi_dmul+0xde>
 23fb42a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fb42e:	ea94 0f0c 	teq	r4, ip
 23fb432:	bf08      	it	eq
 23fb434:	ea95 0f0c 	teqeq	r5, ip
 23fb438:	f43f af3b 	beq.w	23fb2b2 <__aeabi_dmul+0x24a>
 23fb43c:	ea94 0f0c 	teq	r4, ip
 23fb440:	d10a      	bne.n	23fb458 <__aeabi_ddiv+0x19c>
 23fb442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fb446:	f47f af34 	bne.w	23fb2b2 <__aeabi_dmul+0x24a>
 23fb44a:	ea95 0f0c 	teq	r5, ip
 23fb44e:	f47f af25 	bne.w	23fb29c <__aeabi_dmul+0x234>
 23fb452:	4610      	mov	r0, r2
 23fb454:	4619      	mov	r1, r3
 23fb456:	e72c      	b.n	23fb2b2 <__aeabi_dmul+0x24a>
 23fb458:	ea95 0f0c 	teq	r5, ip
 23fb45c:	d106      	bne.n	23fb46c <__aeabi_ddiv+0x1b0>
 23fb45e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fb462:	f43f aefd 	beq.w	23fb260 <__aeabi_dmul+0x1f8>
 23fb466:	4610      	mov	r0, r2
 23fb468:	4619      	mov	r1, r3
 23fb46a:	e722      	b.n	23fb2b2 <__aeabi_dmul+0x24a>
 23fb46c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb470:	bf18      	it	ne
 23fb472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb476:	f47f aec5 	bne.w	23fb204 <__aeabi_dmul+0x19c>
 23fb47a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fb47e:	f47f af0d 	bne.w	23fb29c <__aeabi_dmul+0x234>
 23fb482:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fb486:	f47f aeeb 	bne.w	23fb260 <__aeabi_dmul+0x1f8>
 23fb48a:	e712      	b.n	23fb2b2 <__aeabi_dmul+0x24a>

023fb48c <__gedf2>:
 23fb48c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fb490:	e006      	b.n	23fb4a0 <__cmpdf2+0x4>
 23fb492:	bf00      	nop

023fb494 <__ledf2>:
 23fb494:	f04f 0c01 	mov.w	ip, #1
 23fb498:	e002      	b.n	23fb4a0 <__cmpdf2+0x4>
 23fb49a:	bf00      	nop

023fb49c <__cmpdf2>:
 23fb49c:	f04f 0c01 	mov.w	ip, #1
 23fb4a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fb4a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb4a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb4ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb4b0:	bf18      	it	ne
 23fb4b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fb4b6:	d01b      	beq.n	23fb4f0 <__cmpdf2+0x54>
 23fb4b8:	b001      	add	sp, #4
 23fb4ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fb4be:	bf0c      	ite	eq
 23fb4c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fb4c4:	ea91 0f03 	teqne	r1, r3
 23fb4c8:	bf02      	ittt	eq
 23fb4ca:	ea90 0f02 	teqeq	r0, r2
 23fb4ce:	2000      	moveq	r0, #0
 23fb4d0:	4770      	bxeq	lr
 23fb4d2:	f110 0f00 	cmn.w	r0, #0
 23fb4d6:	ea91 0f03 	teq	r1, r3
 23fb4da:	bf58      	it	pl
 23fb4dc:	4299      	cmppl	r1, r3
 23fb4de:	bf08      	it	eq
 23fb4e0:	4290      	cmpeq	r0, r2
 23fb4e2:	bf2c      	ite	cs
 23fb4e4:	17d8      	asrcs	r0, r3, #31
 23fb4e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fb4ea:	f040 0001 	orr.w	r0, r0, #1
 23fb4ee:	4770      	bx	lr
 23fb4f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb4f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb4f8:	d102      	bne.n	23fb500 <__cmpdf2+0x64>
 23fb4fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fb4fe:	d107      	bne.n	23fb510 <__cmpdf2+0x74>
 23fb500:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb504:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb508:	d1d6      	bne.n	23fb4b8 <__cmpdf2+0x1c>
 23fb50a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fb50e:	d0d3      	beq.n	23fb4b8 <__cmpdf2+0x1c>
 23fb510:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fb514:	4770      	bx	lr
 23fb516:	bf00      	nop

023fb518 <__aeabi_cdrcmple>:
 23fb518:	4684      	mov	ip, r0
 23fb51a:	4610      	mov	r0, r2
 23fb51c:	4662      	mov	r2, ip
 23fb51e:	468c      	mov	ip, r1
 23fb520:	4619      	mov	r1, r3
 23fb522:	4663      	mov	r3, ip
 23fb524:	e000      	b.n	23fb528 <__aeabi_cdcmpeq>
 23fb526:	bf00      	nop

023fb528 <__aeabi_cdcmpeq>:
 23fb528:	b501      	push	{r0, lr}
 23fb52a:	f7ff ffb7 	bl	23fb49c <__cmpdf2>
 23fb52e:	2800      	cmp	r0, #0
 23fb530:	bf48      	it	mi
 23fb532:	f110 0f00 	cmnmi.w	r0, #0
 23fb536:	bd01      	pop	{r0, pc}

023fb538 <__aeabi_dcmpeq>:
 23fb538:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb53c:	f7ff fff4 	bl	23fb528 <__aeabi_cdcmpeq>
 23fb540:	bf0c      	ite	eq
 23fb542:	2001      	moveq	r0, #1
 23fb544:	2000      	movne	r0, #0
 23fb546:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb54a:	bf00      	nop

023fb54c <__aeabi_dcmplt>:
 23fb54c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb550:	f7ff ffea 	bl	23fb528 <__aeabi_cdcmpeq>
 23fb554:	bf34      	ite	cc
 23fb556:	2001      	movcc	r0, #1
 23fb558:	2000      	movcs	r0, #0
 23fb55a:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb55e:	bf00      	nop

023fb560 <__aeabi_dcmple>:
 23fb560:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb564:	f7ff ffe0 	bl	23fb528 <__aeabi_cdcmpeq>
 23fb568:	bf94      	ite	ls
 23fb56a:	2001      	movls	r0, #1
 23fb56c:	2000      	movhi	r0, #0
 23fb56e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb572:	bf00      	nop

023fb574 <__aeabi_dcmpge>:
 23fb574:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb578:	f7ff ffce 	bl	23fb518 <__aeabi_cdrcmple>
 23fb57c:	bf94      	ite	ls
 23fb57e:	2001      	movls	r0, #1
 23fb580:	2000      	movhi	r0, #0
 23fb582:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb586:	bf00      	nop

023fb588 <__aeabi_dcmpgt>:
 23fb588:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb58c:	f7ff ffc4 	bl	23fb518 <__aeabi_cdrcmple>
 23fb590:	bf34      	ite	cc
 23fb592:	2001      	movcc	r0, #1
 23fb594:	2000      	movcs	r0, #0
 23fb596:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb59a:	bf00      	nop

023fb59c <__aeabi_dcmpun>:
 23fb59c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb5a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb5a4:	d102      	bne.n	23fb5ac <__aeabi_dcmpun+0x10>
 23fb5a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fb5aa:	d10a      	bne.n	23fb5c2 <__aeabi_dcmpun+0x26>
 23fb5ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb5b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb5b4:	d102      	bne.n	23fb5bc <__aeabi_dcmpun+0x20>
 23fb5b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fb5ba:	d102      	bne.n	23fb5c2 <__aeabi_dcmpun+0x26>
 23fb5bc:	f04f 0000 	mov.w	r0, #0
 23fb5c0:	4770      	bx	lr
 23fb5c2:	f04f 0001 	mov.w	r0, #1
 23fb5c6:	4770      	bx	lr

023fb5c8 <__aeabi_d2iz>:
 23fb5c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fb5cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fb5d0:	d215      	bcs.n	23fb5fe <__aeabi_d2iz+0x36>
 23fb5d2:	d511      	bpl.n	23fb5f8 <__aeabi_d2iz+0x30>
 23fb5d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fb5d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fb5dc:	d912      	bls.n	23fb604 <__aeabi_d2iz+0x3c>
 23fb5de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb5e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fb5e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fb5ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fb5ee:	fa23 f002 	lsr.w	r0, r3, r2
 23fb5f2:	bf18      	it	ne
 23fb5f4:	4240      	negne	r0, r0
 23fb5f6:	4770      	bx	lr
 23fb5f8:	f04f 0000 	mov.w	r0, #0
 23fb5fc:	4770      	bx	lr
 23fb5fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fb602:	d105      	bne.n	23fb610 <__aeabi_d2iz+0x48>
 23fb604:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fb608:	bf08      	it	eq
 23fb60a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fb60e:	4770      	bx	lr
 23fb610:	f04f 0000 	mov.w	r0, #0
 23fb614:	4770      	bx	lr
 23fb616:	bf00      	nop

023fb618 <__aeabi_d2uiz>:
 23fb618:	004a      	lsls	r2, r1, #1
 23fb61a:	d211      	bcs.n	23fb640 <__aeabi_d2uiz+0x28>
 23fb61c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fb620:	d211      	bcs.n	23fb646 <__aeabi_d2uiz+0x2e>
 23fb622:	d50d      	bpl.n	23fb640 <__aeabi_d2uiz+0x28>
 23fb624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fb628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fb62c:	d40e      	bmi.n	23fb64c <__aeabi_d2uiz+0x34>
 23fb62e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fb636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fb63a:	fa23 f002 	lsr.w	r0, r3, r2
 23fb63e:	4770      	bx	lr
 23fb640:	f04f 0000 	mov.w	r0, #0
 23fb644:	4770      	bx	lr
 23fb646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fb64a:	d102      	bne.n	23fb652 <__aeabi_d2uiz+0x3a>
 23fb64c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fb650:	4770      	bx	lr
 23fb652:	f04f 0000 	mov.w	r0, #0
 23fb656:	4770      	bx	lr

023fb658 <strlen>:
 23fb658:	4603      	mov	r3, r0
 23fb65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb65e:	2a00      	cmp	r2, #0
 23fb660:	d1fb      	bne.n	23fb65a <strlen+0x2>
 23fb662:	1a18      	subs	r0, r3, r0
 23fb664:	3801      	subs	r0, #1
 23fb666:	4770      	bx	lr

023fb668 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb668:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb66a:	f002 fded 	bl	23fe248 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb66e:	2500      	movs	r5, #0
 23fb670:	4e05      	ldr	r6, [pc, #20]	; (23fb688 <module_user_init+0x20>)
 23fb672:	4c06      	ldr	r4, [pc, #24]	; (23fb68c <module_user_init+0x24>)
 23fb674:	1ba4      	subs	r4, r4, r6
 23fb676:	08a4      	lsrs	r4, r4, #2
 23fb678:	42ac      	cmp	r4, r5
 23fb67a:	d100      	bne.n	23fb67e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb67c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb67e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb682:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb684:	3501      	adds	r5, #1
 23fb686:	e7f7      	b.n	23fb678 <module_user_init+0x10>
 23fb688:	023fffcc 	.word	0x023fffcc
 23fb68c:	023ffff0 	.word	0x023ffff0

023fb690 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb690:	f000 b844 	b.w	23fb71c <setup>

023fb694 <module_user_loop>:
}

void module_user_loop() {
 23fb694:	b508      	push	{r3, lr}
    loop();
 23fb696:	f000 f9c7 	bl	23fba28 <loop>
    _post_loop();
}
 23fb69a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb69e:	f002 bd8b 	b.w	23fe1b8 <_post_loop>

023fb6a2 <_Znaj>:
 23fb6a2:	f001 bff7 	b.w	23fd694 <malloc>

023fb6a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb6a6:	f002 b803 	b.w	23fd6b0 <free>
	...

023fb6ac <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb6ac:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb6ae:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb6b0:	4a02      	ldr	r2, [pc, #8]	; (23fb6bc <__cxa_pure_virtual+0x10>)
 23fb6b2:	4903      	ldr	r1, [pc, #12]	; (23fb6c0 <__cxa_pure_virtual+0x14>)
 23fb6b4:	f001 fef2 	bl	23fd49c <panic_>
  while (1);
 23fb6b8:	e7fe      	b.n	23fb6b8 <__cxa_pure_virtual+0xc>
 23fb6ba:	bf00      	nop
 23fb6bc:	023fcfcd 	.word	0x023fcfcd
 23fb6c0:	023fe718 	.word	0x023fe718

023fb6c4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb6c4:	7800      	ldrb	r0, [r0, #0]
 23fb6c6:	fab0 f080 	clz	r0, r0
 23fb6ca:	0940      	lsrs	r0, r0, #5
 23fb6cc:	4770      	bx	lr

023fb6ce <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb6ce:	2301      	movs	r3, #1
 23fb6d0:	7003      	strb	r3, [r0, #0]
 23fb6d2:	4770      	bx	lr

023fb6d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 23fb6d4:	b570      	push	{r4, r5, r6, lr}
 23fb6d6:	4606      	mov	r6, r0
 23fb6d8:	460c      	mov	r4, r1
{
    if (base == 0) {
 23fb6da:	4615      	mov	r5, r2
 23fb6dc:	b92a      	cbnz	r2, 23fb6ea <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 23fb6de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
 23fb6e2:	6803      	ldr	r3, [r0, #0]
 23fb6e4:	b2c9      	uxtb	r1, r1
 23fb6e6:	689b      	ldr	r3, [r3, #8]
 23fb6e8:	4718      	bx	r3
        if (n < 0 && base == 10) {
 23fb6ea:	2900      	cmp	r1, #0
 23fb6ec:	da0b      	bge.n	23fb706 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
 23fb6ee:	2a0a      	cmp	r2, #10
 23fb6f0:	d109      	bne.n	23fb706 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
 23fb6f2:	212d      	movs	r1, #45	; 0x2d
 23fb6f4:	f002 fa38 	bl	23fdb68 <_ZN5Print5printEc>
            val = -n;
 23fb6f8:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 23fb6fa:	4630      	mov	r0, r6
 23fb6fc:	b2ea      	uxtb	r2, r5
}
 23fb6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
 23fb702:	f002 ba4a 	b.w	23fdb9a <_ZN5Print11printNumberEmh>
            val = n;
 23fb706:	4621      	mov	r1, r4
 23fb708:	e7f7      	b.n	23fb6fa <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

023fb70a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 23fb70a:	b510      	push	{r4, lr}
 23fb70c:	4604      	mov	r4, r0
        size_t n = print(b, base);
 23fb70e:	f7ff ffe1 	bl	23fb6d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
 23fb712:	4620      	mov	r0, r4
    }
 23fb714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 23fb718:	f002 ba29 	b.w	23fdb6e <_ZN5Print7printlnEv>

023fb71c <setup>:
int status;
int ODR = 25;                                                       // Set temperature read frequency: (10 000/ODR)  e.g. 25 = 4s
int print_temp = 0;                                                 // The Output Data Rate in Hz
int previous_temp = 0; 

void setup() {
 23fb71c:	b510      	push	{r4, lr}

  delay(1000);
 23fb71e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fb722:	f001 ffef 	bl	23fd704 <delay>
  Serial.begin(115400); // (115400)
 23fb726:	f002 fcb7 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb72a:	491a      	ldr	r1, [pc, #104]	; (23fb794 <setup+0x78>)
 23fb72c:	f002 fca8 	bl	23fe080 <_ZN9USBSerial5beginEl>

  pinMode (LDR_1, INPUT);                                             // Set LDR pins as INPUT pins
 23fb730:	2100      	movs	r1, #0
 23fb732:	200b      	movs	r0, #11
 23fb734:	f002 fdf8 	bl	23fe328 <pinMode>

  tft.init(320, 240);                                                 // Init ST7789 320x240 
 23fb738:	22f0      	movs	r2, #240	; 0xf0
 23fb73a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 23fb73e:	4816      	ldr	r0, [pc, #88]	; (23fb798 <setup+0x7c>)
 23fb740:	f001 fb2e 	bl	23fcda0 <_ZN15Adafruit_ST77894initEtt>
  tft.fillScreen(ST77XX_BLACK);                                       // creates black background in display
 23fb744:	2100      	movs	r1, #0
 23fb746:	4814      	ldr	r0, [pc, #80]	; (23fb798 <setup+0x7c>)
 23fb748:	f000 fc0e 	bl	23fbf68 <_ZN12Adafruit_GFX10fillScreenEt>
  tft.setRotation(3);                                                 // set screen in landscape mode
 23fb74c:	2103      	movs	r1, #3
 23fb74e:	4812      	ldr	r0, [pc, #72]	; (23fb798 <setup+0x7c>)
 23fb750:	f001 fae2 	bl	23fcd18 <_ZN15Adafruit_ST778911setRotationEh>

  sensor.init(TIDS_ADDRESS_I2C_1);                                    // Initialize the I2C interface
 23fb754:	2138      	movs	r1, #56	; 0x38
 23fb756:	4811      	ldr	r0, [pc, #68]	; (23fb79c <setup+0x80>)
 23fb758:	f000 f9e6 	bl	23fbb28 <_ZN11Sensor_TIDS4initEi>
  status = sensor.SW_RESET();                                         // Perform a software reset
 23fb75c:	480f      	ldr	r0, [pc, #60]	; (23fb79c <setup+0x80>)
 23fb75e:	f000 fa21 	bl	23fbba4 <_ZN11Sensor_TIDS8SW_RESETEv>
 23fb762:	4c0f      	ldr	r4, [pc, #60]	; (23fb7a0 <setup+0x84>)
 23fb764:	6020      	str	r0, [r4, #0]
  
  if (WE_FAIL == status) {
 23fb766:	3001      	adds	r0, #1
 23fb768:	d105      	bne.n	23fb776 <setup+0x5a>
    Serial.println("Error: SW_RESET(). STOP!");
 23fb76a:	f002 fc95 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb76e:	490d      	ldr	r1, [pc, #52]	; (23fb7a4 <setup+0x88>)
 23fb770:	f002 fa09 	bl	23fdb86 <_ZN5Print7printlnEPKc>
    while(1);
 23fb774:	e7fe      	b.n	23fb774 <setup+0x58>
    }

  status = sensor.set_continuous_mode(ODR);             // Set the free run mode with given ODR
 23fb776:	4b0c      	ldr	r3, [pc, #48]	; (23fb7a8 <setup+0x8c>)
 23fb778:	4808      	ldr	r0, [pc, #32]	; (23fb79c <setup+0x80>)
 23fb77a:	6819      	ldr	r1, [r3, #0]
 23fb77c:	f000 fa54 	bl	23fbc28 <_ZN11Sensor_TIDS19set_continuous_modeEi>
 23fb780:	6020      	str	r0, [r4, #0]
  
  if (WE_FAIL == status) {
 23fb782:	3001      	adds	r0, #1
 23fb784:	d105      	bne.n	23fb792 <setup+0x76>
    Serial.println("Error: set_continuous_mode(). STOP!");
 23fb786:	f002 fc87 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb78a:	4908      	ldr	r1, [pc, #32]	; (23fb7ac <setup+0x90>)
 23fb78c:	f002 f9fb 	bl	23fdb86 <_ZN5Print7printlnEPKc>
    while(1);
 23fb790:	e7fe      	b.n	23fb790 <setup+0x74>
  }
}
 23fb792:	bd10      	pop	{r4, pc}
 23fb794:	0001c2c8 	.word	0x0001c2c8
 23fb798:	1007ae2c 	.word	0x1007ae2c
 23fb79c:	1007ae1c 	.word	0x1007ae1c
 23fb7a0:	1007ae28 	.word	0x1007ae28
 23fb7a4:	023fe72d 	.word	0x023fe72d
 23fb7a8:	1007ad88 	.word	0x1007ad88
 23fb7ac:	023fe746 	.word	0x023fe746

023fb7b0 <_Z16draw_wake_screenv>:
        }

  Serial.println (Sleep_State);
}

void draw_wake_screen() {
 23fb7b0:	b570      	push	{r4, r5, r6, lr}

////// Temperature Reading display ///////
  tft.setFont(&Org_01);
 23fb7b2:	4c11      	ldr	r4, [pc, #68]	; (23fb7f8 <_Z16draw_wake_screenv+0x48>)
 23fb7b4:	4911      	ldr	r1, [pc, #68]	; (23fb7fc <_Z16draw_wake_screenv+0x4c>)
 23fb7b6:	4620      	mov	r0, r4
 23fb7b8:	f000 fe7f 	bl	23fc4ba <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextSize(29);                                                                    // set font size
 23fb7bc:	211d      	movs	r1, #29
 23fb7be:	4620      	mov	r0, r4
 23fb7c0:	f000 fe75 	bl	23fc4ae <_ZN12Adafruit_GFX11setTextSizeEh>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fb7c4:	f44f 0620 	mov.w	r6, #10485760	; 0xa00000
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
 23fb7c8:	2300      	movs	r3, #0
  tft.setTextWrap(false);                                                                 // set text wrapping
  tft.setTextColor(ST77XX_BLACK);                                                         // set font colour
  tft.setCursor(0, 160);        //160                                                     // set sursor to start writing text
  tft.print(previous_temp);                                                               // overwrite current display to clear screen
 23fb7ca:	4d0d      	ldr	r5, [pc, #52]	; (23fb800 <_Z16draw_wake_screenv+0x50>)
 23fb7cc:	220a      	movs	r2, #10
 23fb7ce:	4620      	mov	r0, r4
 23fb7d0:	6829      	ldr	r1, [r5, #0]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb7d2:	e9c4 6304 	strd	r6, r3, [r4, #16]
  void setTextWrap(boolean w) { wrap = w; }
 23fb7d6:	76e3      	strb	r3, [r4, #27]
 23fb7d8:	f7ff ff7c 	bl	23fb6d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb7dc:	f04f 23fc 	mov.w	r3, #4227922944	; 0xfc00fc00
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fb7e0:	6126      	str	r6, [r4, #16]

  tft.setTextColor(ST77XX_ORANGE);
  tft.setCursor(0,160);                                                                  
  tft.print(print_temp);                                                                  // Print current temperature 
 23fb7e2:	4e08      	ldr	r6, [pc, #32]	; (23fb804 <_Z16draw_wake_screenv+0x54>)
 23fb7e4:	220a      	movs	r2, #10
 23fb7e6:	4620      	mov	r0, r4
 23fb7e8:	6831      	ldr	r1, [r6, #0]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb7ea:	6163      	str	r3, [r4, #20]
 23fb7ec:	f7ff ff72 	bl	23fb6d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>

  previous_temp = print_temp;                                                             // Set the new temperature = previous temperature
 23fb7f0:	6833      	ldr	r3, [r6, #0]
 23fb7f2:	602b      	str	r3, [r5, #0]

}
 23fb7f4:	bd70      	pop	{r4, r5, r6, pc}
 23fb7f6:	bf00      	nop
 23fb7f8:	1007ae2c 	.word	0x1007ae2c
 23fb7fc:	023ff728 	.word	0x023ff728
 23fb800:	1007ae14 	.word	0x1007ae14
 23fb804:	1007ae18 	.word	0x1007ae18

023fb808 <_Z8get_tempv>:
void get_temp() {
 23fb808:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = sensor.read_temperature(&temperature);
 23fb80a:	4824      	ldr	r0, [pc, #144]	; (23fb89c <_Z8get_tempv+0x94>)
 23fb80c:	a901      	add	r1, sp, #4
 23fb80e:	f000 f9df 	bl	23fbbd0 <_ZN11Sensor_TIDS16read_temperatureEPf>
 23fb812:	4b23      	ldr	r3, [pc, #140]	; (23fb8a0 <_Z8get_tempv+0x98>)
 23fb814:	6018      	str	r0, [r3, #0]
  if (WE_FAIL == status) {
 23fb816:	3001      	adds	r0, #1
 23fb818:	d105      	bne.n	23fb826 <_Z8get_tempv+0x1e>
    Serial.println("Error: read_temperature(). STOP!");
 23fb81a:	f002 fc3d 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb81e:	4921      	ldr	r1, [pc, #132]	; (23fb8a4 <_Z8get_tempv+0x9c>)
 23fb820:	f002 f9b1 	bl	23fdb86 <_ZN5Print7printlnEPKc>
    while(1);
 23fb824:	e7fe      	b.n	23fb824 <_Z8get_tempv+0x1c>
  if (Sleep_State == 2) {
 23fb826:	4a20      	ldr	r2, [pc, #128]	; (23fb8a8 <_Z8get_tempv+0xa0>)
 23fb828:	4d20      	ldr	r5, [pc, #128]	; (23fb8ac <_Z8get_tempv+0xa4>)
 23fb82a:	6813      	ldr	r3, [r2, #0]
 23fb82c:	4c20      	ldr	r4, [pc, #128]	; (23fb8b0 <_Z8get_tempv+0xa8>)
 23fb82e:	2b02      	cmp	r3, #2
 23fb830:	d12a      	bne.n	23fb888 <_Z8get_tempv+0x80>
    previous_temp = 0;
 23fb832:	2300      	movs	r3, #0
 23fb834:	602b      	str	r3, [r5, #0]
    Sleep_State = 1;
 23fb836:	2301      	movs	r3, #1
 23fb838:	6013      	str	r3, [r2, #0]
  Serial.print(print_temp);                               // Print the temperature on the serial monitor as INT
 23fb83a:	f002 fc2d 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb83e:	220a      	movs	r2, #10
 23fb840:	6821      	ldr	r1, [r4, #0]
 23fb842:	f7ff ff47 	bl	23fb6d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  Serial.println(" C");
 23fb846:	f002 fc27 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb84a:	491a      	ldr	r1, [pc, #104]	; (23fb8b4 <_Z8get_tempv+0xac>)
 23fb84c:	f002 f99b 	bl	23fdb86 <_ZN5Print7printlnEPKc>
  Serial.print(temperature);                              // Print the temperature on the serial monitor as FLOAT
 23fb850:	f002 fc22 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb854:	ed9d 0a01 	vldr	s0, [sp, #4]
 23fb858:	2102      	movs	r1, #2
 23fb85a:	f002 fa85 	bl	23fdd68 <_ZN5Print5printEfi>
  Serial.println(" C");
 23fb85e:	f002 fc1b 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb862:	4914      	ldr	r1, [pc, #80]	; (23fb8b4 <_Z8get_tempv+0xac>)
 23fb864:	f002 f98f 	bl	23fdb86 <_ZN5Print7printlnEPKc>
  delay(waitMillis);                                      // Wait before continuing with the next measurement
 23fb868:	f242 7010 	movw	r0, #10000	; 0x2710
  int waitMillis = 10000 / ODR;                           // Waiting time between measurement
 23fb86c:	4b12      	ldr	r3, [pc, #72]	; (23fb8b8 <_Z8get_tempv+0xb0>)
 23fb86e:	681b      	ldr	r3, [r3, #0]
  delay(waitMillis);                                      // Wait before continuing with the next measurement
 23fb870:	fb90 f0f3 	sdiv	r0, r0, r3
 23fb874:	f001 ff46 	bl	23fd704 <delay>
  if (print_temp != previous_temp) { 
 23fb878:	6822      	ldr	r2, [r4, #0]
 23fb87a:	682b      	ldr	r3, [r5, #0]
 23fb87c:	429a      	cmp	r2, r3
 23fb87e:	d001      	beq.n	23fb884 <_Z8get_tempv+0x7c>
    draw_wake_screen();
 23fb880:	f7ff ff96 	bl	23fb7b0 <_Z16draw_wake_screenv>
}
 23fb884:	b003      	add	sp, #12
 23fb886:	bd30      	pop	{r4, r5, pc}
    } else if (Sleep_State == 1) { 
 23fb888:	2b01      	cmp	r3, #1
      print_temp = temperature;
 23fb88a:	bf02      	ittt	eq
 23fb88c:	eddd 7a01 	vldreq	s15, [sp, #4]
 23fb890:	eefd 7ae7 	vcvteq.s32.f32	s15, s15
 23fb894:	edc4 7a00 	vstreq	s15, [r4]
 23fb898:	e7cf      	b.n	23fb83a <_Z8get_tempv+0x32>
 23fb89a:	bf00      	nop
 23fb89c:	1007ae1c 	.word	0x1007ae1c
 23fb8a0:	1007ae28 	.word	0x1007ae28
 23fb8a4:	023fe76a 	.word	0x023fe76a
 23fb8a8:	1007ad8c 	.word	0x1007ad8c
 23fb8ac:	1007ae14 	.word	0x1007ae14
 23fb8b0:	1007ae18 	.word	0x1007ae18
 23fb8b4:	023fe78b 	.word	0x023fe78b
 23fb8b8:	1007ad88 	.word	0x1007ad88

023fb8bc <_Z18draw_sleepy_screenv>:

void draw_sleepy_screen() {
 23fb8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

////// Sleepy display ///////
  tft.fillScreen(ST77XX_BLACK);                                                           // creates black background in display
 23fb8c0:	4c33      	ldr	r4, [pc, #204]	; (23fb990 <_Z18draw_sleepy_screenv+0xd4>)
 23fb8c2:	2100      	movs	r1, #0
 23fb8c4:	4620      	mov	r0, r4
 23fb8c6:	f000 fb4f 	bl	23fbf68 <_ZN12Adafruit_GFX10fillScreenEt>
  tft.setFont(&FreeSansBold12pt7b);
 23fb8ca:	4620      	mov	r0, r4
 23fb8cc:	4931      	ldr	r1, [pc, #196]	; (23fb994 <_Z18draw_sleepy_screenv+0xd8>)
 23fb8ce:	f000 fdf4 	bl	23fc4ba <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  delay(100);  
 23fb8d2:	2064      	movs	r0, #100	; 0x64
 23fb8d4:	f001 ff16 	bl	23fd704 <delay>
 23fb8d8:	f06f 23f8 	mvn.w	r3, #4160813056	; 0xf800f800
  void setTextWrap(boolean w) { wrap = w; }
 23fb8dc:	2600      	movs	r6, #0
  tft.setTextColor(ST77XX_CYAN);
  tft.setTextSize(6);                                                                    // set font size
  tft.setTextWrap(false);                                                                // set text wrapping
  tft.setCursor(80, 200);                                                                // set sursor to start writing text
  tft.print("Z");
 23fb8de:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 23fb9a0 <_Z18draw_sleepy_screenv+0xe4>
  tft.setTextSize(6);                                                                    // set font size
 23fb8e2:	4620      	mov	r0, r4
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fb8e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 23fb9a4 <_Z18draw_sleepy_screenv+0xe8>
 23fb8e8:	2106      	movs	r1, #6
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb8ea:	6163      	str	r3, [r4, #20]
 23fb8ec:	f000 fddf 	bl	23fc4ae <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.print("Z");
 23fb8f0:	4649      	mov	r1, r9
 23fb8f2:	4620      	mov	r0, r4
  delay(250);                                                                            // overwrite current display to clear screen
  tft.setTextSize(3);  
  tft.setCursor(180, 120);
  tft.print("z");
 23fb8f4:	4d28      	ldr	r5, [pc, #160]	; (23fb998 <_Z18draw_sleepy_screenv+0xdc>)
  void setTextWrap(boolean w) { wrap = w; }
 23fb8f6:	76e6      	strb	r6, [r4, #27]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fb8f8:	f8c4 a010 	str.w	sl, [r4, #16]
  tft.print("Z");
 23fb8fc:	f002 f930 	bl	23fdb60 <_ZN5Print5printEPKc>
  delay(250);                                                                            // overwrite current display to clear screen
 23fb900:	20fa      	movs	r0, #250	; 0xfa
 23fb902:	f001 feff 	bl	23fd704 <delay>
 23fb906:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 23fb9a8 <_Z18draw_sleepy_screenv+0xec>
  tft.setTextSize(3);  
 23fb90a:	4620      	mov	r0, r4
 23fb90c:	2103      	movs	r1, #3
 23fb90e:	f000 fdce 	bl	23fc4ae <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.print("z");
 23fb912:	4629      	mov	r1, r5
 23fb914:	4620      	mov	r0, r4
 23fb916:	f8c4 8010 	str.w	r8, [r4, #16]
 23fb91a:	f002 f921 	bl	23fdb60 <_ZN5Print5printEPKc>
  delay(250);  
 23fb91e:	20fa      	movs	r0, #250	; 0xfa
 23fb920:	f001 fef0 	bl	23fd704 <delay>
 23fb924:	4f1d      	ldr	r7, [pc, #116]	; (23fb99c <_Z18draw_sleepy_screenv+0xe0>)
  tft.setTextSize(2);  
 23fb926:	4620      	mov	r0, r4
 23fb928:	2102      	movs	r1, #2
 23fb92a:	f000 fdc0 	bl	23fc4ae <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.setCursor(230, 90);
  tft.print("z");  
 23fb92e:	4629      	mov	r1, r5
 23fb930:	4620      	mov	r0, r4
 23fb932:	6127      	str	r7, [r4, #16]
 23fb934:	f002 f914 	bl	23fdb60 <_ZN5Print5printEPKc>

  delay(1000);  
 23fb938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fb93c:	f001 fee2 	bl	23fd704 <delay>
  tft.setTextColor(ST77XX_BLACK);
  tft.setTextSize(6);                                                                    // set font size
 23fb940:	4620      	mov	r0, r4
 23fb942:	2106      	movs	r1, #6
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb944:	6166      	str	r6, [r4, #20]
 23fb946:	f000 fdb2 	bl	23fc4ae <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.setTextWrap(false);                                                                // set text wrapping
  tft.setCursor(80, 200);                                                                // set sursor to start writing text
  tft.print("Z");
 23fb94a:	4649      	mov	r1, r9
 23fb94c:	4620      	mov	r0, r4
  void setTextWrap(boolean w) { wrap = w; }
 23fb94e:	76e6      	strb	r6, [r4, #27]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fb950:	f8c4 a010 	str.w	sl, [r4, #16]
 23fb954:	f002 f904 	bl	23fdb60 <_ZN5Print5printEPKc>
  delay(100);                                                                            // overwrite current display to clear screen
 23fb958:	2064      	movs	r0, #100	; 0x64
 23fb95a:	f001 fed3 	bl	23fd704 <delay>
  tft.setTextSize(3);  
 23fb95e:	4620      	mov	r0, r4
 23fb960:	2103      	movs	r1, #3
 23fb962:	f000 fda4 	bl	23fc4ae <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.setCursor(180, 120);
  tft.print("z");
 23fb966:	4629      	mov	r1, r5
 23fb968:	4620      	mov	r0, r4
 23fb96a:	f8c4 8010 	str.w	r8, [r4, #16]
 23fb96e:	f002 f8f7 	bl	23fdb60 <_ZN5Print5printEPKc>
  delay(100);  
 23fb972:	2064      	movs	r0, #100	; 0x64
 23fb974:	f001 fec6 	bl	23fd704 <delay>
  tft.setTextSize(2);  
 23fb978:	4620      	mov	r0, r4
 23fb97a:	2102      	movs	r1, #2
 23fb97c:	f000 fd97 	bl	23fc4ae <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.setCursor(230, 90);
  tft.print("z");  
 23fb980:	4629      	mov	r1, r5
 23fb982:	4620      	mov	r0, r4
 23fb984:	6127      	str	r7, [r4, #16]

}
 23fb986:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tft.print("z");  
 23fb98a:	f002 b8e9 	b.w	23fdb60 <_ZN5Print5printEPKc>
 23fb98e:	bf00      	nop
 23fb990:	1007ae2c 	.word	0x1007ae2c
 23fb994:	023feb98 	.word	0x023feb98
 23fb998:	023ffeb0 	.word	0x023ffeb0
 23fb99c:	005a00e6 	.word	0x005a00e6
 23fb9a0:	023fe78e 	.word	0x023fe78e
 23fb9a4:	00c80050 	.word	0x00c80050
 23fb9a8:	007800b4 	.word	0x007800b4

023fb9ac <_Z3LDRv>:
void LDR() {
 23fb9ac:	b538      	push	{r3, r4, r5, lr}
  light_level_1 = analogRead (LDR_1);
 23fb9ae:	200b      	movs	r0, #11
 23fb9b0:	f002 fce4 	bl	23fe37c <analogRead>
    if (light_level_1 > day_level) {
 23fb9b4:	4b18      	ldr	r3, [pc, #96]	; (23fba18 <_Z3LDRv+0x6c>)
  light_level_1 = analogRead (LDR_1);
 23fb9b6:	4d19      	ldr	r5, [pc, #100]	; (23fba1c <_Z3LDRv+0x70>)
    if (light_level_1 > day_level) {
 23fb9b8:	681b      	ldr	r3, [r3, #0]
 23fb9ba:	4c19      	ldr	r4, [pc, #100]	; (23fba20 <_Z3LDRv+0x74>)
 23fb9bc:	4298      	cmp	r0, r3
  light_level_1 = analogRead (LDR_1);
 23fb9be:	6028      	str	r0, [r5, #0]
    if (light_level_1 > day_level) {
 23fb9c0:	dd15      	ble.n	23fb9ee <_Z3LDRv+0x42>
      Serial.println (Sleep_State);
 23fb9c2:	f002 fb69 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb9c6:	220a      	movs	r2, #10
 23fb9c8:	6821      	ldr	r1, [r4, #0]
 23fb9ca:	f7ff fe9e 	bl	23fb70a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
      Serial.println (light_level_1);                     // DEBUG
 23fb9ce:	f002 fb63 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb9d2:	220a      	movs	r2, #10
 23fb9d4:	6829      	ldr	r1, [r5, #0]
 23fb9d6:	f7ff fe98 	bl	23fb70a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
      get_temp();
 23fb9da:	f7ff ff15 	bl	23fb808 <_Z8get_tempv>
  Serial.println (Sleep_State);
 23fb9de:	f002 fb5b 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb9e2:	6821      	ldr	r1, [r4, #0]
 23fb9e4:	220a      	movs	r2, #10
}
 23fb9e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Serial.println (Sleep_State);
 23fb9ea:	f7ff be8e 	b.w	23fb70a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        } else if (light_level_1 < night_level) {
 23fb9ee:	4b0d      	ldr	r3, [pc, #52]	; (23fba24 <_Z3LDRv+0x78>)
 23fb9f0:	681b      	ldr	r3, [r3, #0]
 23fb9f2:	4298      	cmp	r0, r3
 23fb9f4:	daf3      	bge.n	23fb9de <_Z3LDRv+0x32>
          Sleep_State = 2;
 23fb9f6:	2302      	movs	r3, #2
 23fb9f8:	6023      	str	r3, [r4, #0]
          Serial.println (Sleep_State);
 23fb9fa:	f002 fb4d 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fb9fe:	6821      	ldr	r1, [r4, #0]
 23fba00:	220a      	movs	r2, #10
 23fba02:	f7ff fe82 	bl	23fb70a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
          Serial.println (light_level_1);                 //  DEBUG
 23fba06:	f002 fb47 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fba0a:	220a      	movs	r2, #10
 23fba0c:	6829      	ldr	r1, [r5, #0]
 23fba0e:	f7ff fe7c 	bl	23fb70a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
          draw_sleepy_screen();
 23fba12:	f7ff ff53 	bl	23fb8bc <_Z18draw_sleepy_screenv>
 23fba16:	e7e2      	b.n	23fb9de <_Z3LDRv+0x32>
 23fba18:	1007ad90 	.word	0x1007ad90
 23fba1c:	1007ae10 	.word	0x1007ae10
 23fba20:	1007ad8c 	.word	0x1007ad8c
 23fba24:	1007ad94 	.word	0x1007ad94

023fba28 <loop>:

void loop() {

  LDR();
 23fba28:	f7ff bfc0 	b.w	23fb9ac <_Z3LDRv>

023fba2c <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fba2c:	2200      	movs	r2, #0

 23fba2e:	b510      	push	{r4, lr}
 23fba30:	4b08      	ldr	r3, [pc, #32]	; (23fba54 <_GLOBAL__sub_I_SystemMode+0x28>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fba32:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 23fba34:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
 23fba38:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 23fba3c:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fba3e:	f001 fd3b 	bl	23fd4b8 <set_system_mode>
 23fba42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);     // Hardware SPI
 23fba46:	2306      	movs	r3, #6
 23fba48:	2205      	movs	r2, #5
 23fba4a:	2112      	movs	r1, #18
 23fba4c:	4802      	ldr	r0, [pc, #8]	; (23fba58 <_GLOBAL__sub_I_SystemMode+0x2c>)
 23fba4e:	f001 b99d 	b.w	23fcd8c <_ZN15Adafruit_ST7789C1Eaaa>
 23fba52:	bf00      	nop
 23fba54:	1007ae04 	.word	0x1007ae04
 23fba58:	1007ae2c 	.word	0x1007ae2c

023fba5c <I2CInit>:
 * @param  I2C address
 * @retval Error Code
 */

int I2CInit(int address)
{
 23fba5c:	b508      	push	{r3, lr}
	// uint32_t timeout = (uint32_t)(TIMEOUT_MS * 1000);  /* timeout in us */
	// bool reset_on_timeout = false;
	
    deviceAddress = address;
 23fba5e:	4b04      	ldr	r3, [pc, #16]	; (23fba70 <I2CInit+0x14>)
 23fba60:	6018      	str	r0, [r3, #0]
//	Wire.setWireTimeout(timeout, reset_on_timeout);
    Wire.begin();
 23fba62:	f002 fcb9 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fba66:	f001 fee1 	bl	23fd82c <_ZN7TwoWire5beginEv>
	
    return WE_SUCCESS;
}
 23fba6a:	2000      	movs	r0, #0
 23fba6c:	bd08      	pop	{r3, pc}
 23fba6e:	bf00      	nop
 23fba70:	1007ae7c 	.word	0x1007ae7c

023fba74 <ReadReg>:
 *         -pointer Data : address stores the data
 * @retval Error Code
 */

int ReadReg(uint8_t RegAdr, int NumByteToRead, uint8_t *Data)
{
 23fba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fba76:	4605      	mov	r5, r0
 23fba78:	4616      	mov	r6, r2
	if (0 == NumByteToRead)
 23fba7a:	460c      	mov	r4, r1
 23fba7c:	b319      	cbz	r1, 23fbac6 <ReadReg+0x52>
	{
		return WE_FAIL;
	}

    Wire.beginTransmission(deviceAddress);
 23fba7e:	4f14      	ldr	r7, [pc, #80]	; (23fbad0 <ReadReg+0x5c>)
 23fba80:	f002 fcaa 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fba84:	6839      	ldr	r1, [r7, #0]
 23fba86:	f001 ff07 	bl	23fd898 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(RegAdr);
 23fba8a:	f002 fca5 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fba8e:	6803      	ldr	r3, [r0, #0]
 23fba90:	4629      	mov	r1, r5
 23fba92:	689b      	ldr	r3, [r3, #8]
 23fba94:	4798      	blx	r3
	Wire.endTransmission();
 23fba96:	f002 fc9f 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fba9a:	f001 ff04 	bl	23fd8a6 <_ZN7TwoWire15endTransmissionEv>
	
    int n = Wire.requestFrom(deviceAddress, NumByteToRead);	
 23fba9e:	f002 fc9b 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fbaa2:	4622      	mov	r2, r4
 23fbaa4:	7839      	ldrb	r1, [r7, #0]
 23fbaa6:	f001 fef0 	bl	23fd88a <_ZN7TwoWire11requestFromEhj>
	if (n != NumByteToRead) /* also includes: if n == 0 */
 23fbaaa:	4284      	cmp	r4, r0
    int n = Wire.requestFrom(deviceAddress, NumByteToRead);	
 23fbaac:	4605      	mov	r5, r0
	if (n != NumByteToRead) /* also includes: if n == 0 */
 23fbaae:	d10a      	bne.n	23fbac6 <ReadReg+0x52>
	{
		return WE_FAIL;
	}
	
    for (int i = 0; i < n; i++)
 23fbab0:	2400      	movs	r4, #0
 23fbab2:	42ac      	cmp	r4, r5
 23fbab4:	da0a      	bge.n	23fbacc <ReadReg+0x58>
    {
        Data[i] = Wire.read();
 23fbab6:	f002 fc8f 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fbaba:	6803      	ldr	r3, [r0, #0]
 23fbabc:	695b      	ldr	r3, [r3, #20]
 23fbabe:	4798      	blx	r3
 23fbac0:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < n; i++)
 23fbac2:	3401      	adds	r4, #1
 23fbac4:	e7f5      	b.n	23fbab2 <ReadReg+0x3e>
		return WE_FAIL;
 23fbac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return WE_SUCCESS;
}
 23fbaca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return WE_SUCCESS;
 23fbacc:	2000      	movs	r0, #0
 23fbace:	e7fc      	b.n	23fbaca <ReadReg+0x56>
 23fbad0:	1007ae7c 	.word	0x1007ae7c

023fbad4 <WriteReg>:
 *         -pointer Data : address of the data to be written
 * @retval Error Code
 */

int WriteReg(uint8_t RegAdr, int NumByteToWrite, uint8_t *Data)
{
 23fbad4:	b570      	push	{r4, r5, r6, lr}
 23fbad6:	4604      	mov	r4, r0
 23fbad8:	4616      	mov	r6, r2

	if (0 == NumByteToWrite)
 23fbada:	460d      	mov	r5, r1
 23fbadc:	b1f9      	cbz	r1, 23fbb1e <WriteReg+0x4a>
	{
		return WE_FAIL;
	}

    Wire.beginTransmission(deviceAddress);
 23fbade:	f002 fc7b 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fbae2:	4b10      	ldr	r3, [pc, #64]	; (23fbb24 <WriteReg+0x50>)
 23fbae4:	6819      	ldr	r1, [r3, #0]
 23fbae6:	f001 fed7 	bl	23fd898 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(RegAdr);
 23fbaea:	f002 fc75 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fbaee:	6803      	ldr	r3, [r0, #0]
 23fbaf0:	4621      	mov	r1, r4
 23fbaf2:	689b      	ldr	r3, [r3, #8]
 23fbaf4:	4798      	blx	r3
	
	for (int i = 0; i < NumByteToWrite; i++)
 23fbaf6:	2400      	movs	r4, #0
 23fbaf8:	42a5      	cmp	r5, r4
 23fbafa:	dd07      	ble.n	23fbb0c <WriteReg+0x38>
    {
        Wire.write(Data[i]);
 23fbafc:	f002 fc6c 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fbb00:	6803      	ldr	r3, [r0, #0]
 23fbb02:	5d31      	ldrb	r1, [r6, r4]
 23fbb04:	689b      	ldr	r3, [r3, #8]
 23fbb06:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
 23fbb08:	3401      	adds	r4, #1
 23fbb0a:	e7f5      	b.n	23fbaf8 <WriteReg+0x24>
    }
	
	if (Wire.endTransmission()) /* slave ack or nack */
 23fbb0c:	f002 fc64 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fbb10:	f001 fec9 	bl	23fd8a6 <_ZN7TwoWire15endTransmissionEv>
 23fbb14:	3800      	subs	r0, #0
 23fbb16:	bf18      	it	ne
 23fbb18:	2001      	movne	r0, #1
 23fbb1a:	4240      	negs	r0, r0
    {
        return WE_FAIL;
    }

    return WE_SUCCESS;
}
 23fbb1c:	bd70      	pop	{r4, r5, r6, pc}
		return WE_FAIL;
 23fbb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbb22:	e7fb      	b.n	23fbb1c <WriteReg+0x48>
 23fbb24:	1007ae7c 	.word	0x1007ae7c

023fbb28 <_ZN11Sensor_TIDS4initEi>:
   @param  I2C address
   @retval Error Code
*/
int Sensor_TIDS::init(int address)
{
  return I2CInit(address);
 23fbb28:	4608      	mov	r0, r1
 23fbb2a:	f7ff bf97 	b.w	23fba5c <I2CInit>

023fbb2e <_ZN11Sensor_TIDS10Select_ODREv>:
/**
   @brief  Setting up the output data rate for the continuous mode
   @retval Error Code
*/
int Sensor_TIDS::Select_ODR()
{
 23fbb2e:	b508      	push	{r3, lr}

  switch (ODR)
 23fbb30:	6800      	ldr	r0, [r0, #0]
 23fbb32:	2832      	cmp	r0, #50	; 0x32
 23fbb34:	d01b      	beq.n	23fbb6e <_ZN11Sensor_TIDS10Select_ODREv+0x40>
 23fbb36:	dc06      	bgt.n	23fbb46 <_ZN11Sensor_TIDS10Select_ODREv+0x18>
 23fbb38:	2801      	cmp	r0, #1
 23fbb3a:	d00e      	beq.n	23fbb5a <_ZN11Sensor_TIDS10Select_ODREv+0x2c>
 23fbb3c:	2819      	cmp	r0, #25
 23fbb3e:	d018      	beq.n	23fbb72 <_ZN11Sensor_TIDS10Select_ODREv+0x44>
 23fbb40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbb44:	e010      	b.n	23fbb68 <_ZN11Sensor_TIDS10Select_ODREv+0x3a>
 23fbb46:	2864      	cmp	r0, #100	; 0x64
 23fbb48:	d00f      	beq.n	23fbb6a <_ZN11Sensor_TIDS10Select_ODREv+0x3c>
 23fbb4a:	28c8      	cmp	r0, #200	; 0xc8
 23fbb4c:	d1f8      	bne.n	23fbb40 <_ZN11Sensor_TIDS10Select_ODREv+0x12>
  {
    case 200:
    {
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_200HZ))
 23fbb4e:	2003      	movs	r0, #3
      break;
    }

    case 50:
    {
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_50HZ))
 23fbb50:	f000 f8d3 	bl	23fbcfa <TIDS_setOutputDataRate>
 23fbb54:	3001      	adds	r0, #1
 23fbb56:	d0f3      	beq.n	23fbb40 <_ZN11Sensor_TIDS10Select_ODREv+0x12>
    {
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_25HZ))
	  {
		return WE_FAIL;
      }
      if(WE_FAIL == TIDS_setContinuousMode(TIDS_enable))
 23fbb58:	2001      	movs	r0, #1
      break;
    }

    case 1:
    {
      if(WE_FAIL == TIDS_setContinuousMode(TIDS_enable)) // Low ODR bit is enabled, ODR 1 Hz
 23fbb5a:	f000 f898 	bl	23fbc8e <TIDS_setContinuousMode>
 23fbb5e:	3001      	adds	r0, #1
 23fbb60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbb64:	bf18      	it	ne
 23fbb66:	2000      	movne	r0, #0
      return WE_FAIL;
    }
  }
  
  return WE_SUCCESS;
}
 23fbb68:	bd08      	pop	{r3, pc}
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_100HZ))
 23fbb6a:	2002      	movs	r0, #2
 23fbb6c:	e7f0      	b.n	23fbb50 <_ZN11Sensor_TIDS10Select_ODREv+0x22>
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_50HZ))
 23fbb6e:	2001      	movs	r0, #1
 23fbb70:	e7ee      	b.n	23fbb50 <_ZN11Sensor_TIDS10Select_ODREv+0x22>
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_25HZ))
 23fbb72:	2000      	movs	r0, #0
 23fbb74:	e7ec      	b.n	23fbb50 <_ZN11Sensor_TIDS10Select_ODREv+0x22>

023fbb76 <_ZN11Sensor_TIDS10power_downEv>:
            in the CTRL register to '0')
   @retval Error Code
*/
int Sensor_TIDS::power_down()
{
  if(WE_FAIL == TIDS_setBlockDataUpdate(TIDS_enable))
 23fbb76:	2001      	movs	r0, #1
{
 23fbb78:	b508      	push	{r3, lr}
  if(WE_FAIL == TIDS_setBlockDataUpdate(TIDS_enable))
 23fbb7a:	f000 f8a3 	bl	23fbcc4 <TIDS_setBlockDataUpdate>
 23fbb7e:	3001      	adds	r0, #1
 23fbb80:	d102      	bne.n	23fbb88 <_ZN11Sensor_TIDS10power_downEv+0x12>
  {
      return WE_FAIL;
 23fbb82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  {
      return WE_FAIL;
  }
	
  return WE_SUCCESS;
}
 23fbb86:	bd08      	pop	{r3, pc}
  if(WE_FAIL == TIDS_setAutoIncrement(TIDS_enable))
 23fbb88:	2001      	movs	r0, #1
 23fbb8a:	f000 f8d1 	bl	23fbd30 <TIDS_setAutoIncrement>
 23fbb8e:	3001      	adds	r0, #1
 23fbb90:	d0f7      	beq.n	23fbb82 <_ZN11Sensor_TIDS10power_downEv+0xc>
  if(WE_FAIL == TIDS_setContinuousMode(TIDS_disable))
 23fbb92:	2000      	movs	r0, #0
 23fbb94:	f000 f87b 	bl	23fbc8e <TIDS_setContinuousMode>
 23fbb98:	3001      	adds	r0, #1
 23fbb9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbb9e:	bf18      	it	ne
 23fbba0:	2000      	movne	r0, #0
 23fbba2:	e7f0      	b.n	23fbb86 <_ZN11Sensor_TIDS10power_downEv+0x10>

023fbba4 <_ZN11Sensor_TIDS8SW_RESETEv>:
            Necessary before requesting a new temperature
   @retval Error Code
*/
int Sensor_TIDS::SW_RESET()
{
  if(WE_FAIL == TIDS_setSwReset(TIDS_enable))
 23fbba4:	2001      	movs	r0, #1
{
 23fbba6:	b508      	push	{r3, lr}
  if(WE_FAIL == TIDS_setSwReset(TIDS_enable))
 23fbba8:	f000 f856 	bl	23fbc58 <TIDS_setSwReset>
 23fbbac:	3001      	adds	r0, #1
 23fbbae:	d102      	bne.n	23fbbb6 <_ZN11Sensor_TIDS8SW_RESETEv+0x12>
  {
      return WE_FAIL;
 23fbbb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      return WE_FAIL;
  }
  
  delay(12);
  return WE_SUCCESS;
}
 23fbbb4:	bd08      	pop	{r3, pc}
  delay(12);
 23fbbb6:	200c      	movs	r0, #12
 23fbbb8:	f001 fda4 	bl	23fd704 <delay>
  if(WE_FAIL == TIDS_setSwReset(TIDS_disable))
 23fbbbc:	2000      	movs	r0, #0
 23fbbbe:	f000 f84b 	bl	23fbc58 <TIDS_setSwReset>
 23fbbc2:	3001      	adds	r0, #1
 23fbbc4:	d0f4      	beq.n	23fbbb0 <_ZN11Sensor_TIDS8SW_RESETEv+0xc>
  delay(12);
 23fbbc6:	200c      	movs	r0, #12
 23fbbc8:	f001 fd9c 	bl	23fd704 <delay>
  return WE_SUCCESS;
 23fbbcc:	2000      	movs	r0, #0
 23fbbce:	e7f1      	b.n	23fbbb4 <_ZN11Sensor_TIDS8SW_RESETEv+0x10>

023fbbd0 <_ZN11Sensor_TIDS16read_temperatureEPf>:
   @brief  Read and calculate the temperature in °C
   @param temperature in °C
   @retval Error code
*/
int Sensor_TIDS::read_temperature(float *temp)
{
 23fbbd0:	b538      	push	{r3, r4, r5, lr}
 23fbbd2:	4604      	mov	r4, r0
  float float_temp;
  if(WE_FAIL == TIDS_getRAWTemperature(&rawTemp))
 23fbbd4:	3004      	adds	r0, #4
{
 23fbbd6:	460d      	mov	r5, r1
  if(WE_FAIL == TIDS_getRAWTemperature(&rawTemp))
 23fbbd8:	f000 f8c5 	bl	23fbd66 <TIDS_getRAWTemperature>
 23fbbdc:	1c43      	adds	r3, r0, #1
 23fbbde:	d01d      	beq.n	23fbc1c <_ZN11Sensor_TIDS16read_temperatureEPf+0x4c>
  {
      return WE_FAIL;
  }

  if (rawTemp > 32767)
 23fbbe0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 23fbbe4:	88a3      	ldrh	r3, [r4, #4]
 23fbbe6:	2a00      	cmp	r2, #0
  {
    T_neg = rawTemp - 32768;
 23fbbe8:	bfbf      	itttt	lt
 23fbbea:	f5a3 4300 	sublt.w	r3, r3, #32768	; 0x8000
 23fbbee:	ee07 3a90 	vmovlt	s15, r3
    float_temp = (float)(0 - 32768 + T_neg)/100.0f;
 23fbbf2:	ed9f 7a0b 	vldrlt	s14, [pc, #44]	; 23fbc20 <_ZN11Sensor_TIDS16read_temperatureEPf+0x50>
    T_neg = rawTemp - 32768;
 23fbbf6:	eef8 7ae7 	vcvtlt.f32.s32	s15, s15
  }
  else
  {
    float_temp = (float)rawTemp/100.0f;
 23fbbfa:	bfac      	ite	ge
 23fbbfc:	ee07 3a90 	vmovge	s15, r3
    T_neg = rawTemp - 32768;
 23fbc00:	edc4 7a02 	vstrlt	s15, [r4, #8]
 23fbc04:	eddf 6a07 	vldr	s13, [pc, #28]	; 23fbc24 <_ZN11Sensor_TIDS16read_temperatureEPf+0x54>
    float_temp = (float)(0 - 32768 + T_neg)/100.0f;
 23fbc08:	bfb4      	ite	lt
 23fbc0a:	ee77 7ac7 	vsublt.f32	s15, s15, s14
    float_temp = (float)rawTemp/100.0f;
 23fbc0e:	eef8 7a67 	vcvtge.f32.u32	s15, s15
 23fbc12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  }

  *temp = float_temp;
  return WE_SUCCESS;
 23fbc16:	2000      	movs	r0, #0
  *temp = float_temp;
 23fbc18:	ed85 7a00 	vstr	s14, [r5]
}
 23fbc1c:	bd38      	pop	{r3, r4, r5, pc}
 23fbc1e:	bf00      	nop
 23fbc20:	47000000 	.word	0x47000000
 23fbc24:	42c80000 	.word	0x42c80000

023fbc28 <_ZN11Sensor_TIDS19set_continuous_modeEi>:
            The measurement rate is defined by the user selectable ODR.
  @param  ODR value
  @retval Error code
*/
int Sensor_TIDS::set_continuous_mode(int _ODR)
{
 23fbc28:	b510      	push	{r4, lr}
  ODR = _ODR;
 23fbc2a:	6001      	str	r1, [r0, #0]
{
 23fbc2c:	4604      	mov	r4, r0
  if(WE_FAIL == power_down())
 23fbc2e:	f7ff ffa2 	bl	23fbb76 <_ZN11Sensor_TIDS10power_downEv>
 23fbc32:	3001      	adds	r0, #1
 23fbc34:	d102      	bne.n	23fbc3c <_ZN11Sensor_TIDS19set_continuous_modeEi+0x14>
  {
      return WE_FAIL;
 23fbc36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      return WE_FAIL;
  }
  
  return WE_SUCCESS;
  
}
 23fbc3a:	bd10      	pop	{r4, pc}
  if(WE_FAIL == SW_RESET())
 23fbc3c:	4620      	mov	r0, r4
 23fbc3e:	f7ff ffb1 	bl	23fbba4 <_ZN11Sensor_TIDS8SW_RESETEv>
 23fbc42:	3001      	adds	r0, #1
 23fbc44:	d0f7      	beq.n	23fbc36 <_ZN11Sensor_TIDS19set_continuous_modeEi+0xe>
  if(WE_FAIL == Select_ODR())  
 23fbc46:	4620      	mov	r0, r4
 23fbc48:	f7ff ff71 	bl	23fbb2e <_ZN11Sensor_TIDS10Select_ODREv>
 23fbc4c:	3001      	adds	r0, #1
 23fbc4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbc52:	bf18      	it	ne
 23fbc54:	2000      	movne	r0, #0
 23fbc56:	e7f0      	b.n	23fbc3a <_ZN11Sensor_TIDS19set_continuous_modeEi+0x12>

023fbc58 <TIDS_setSwReset>:
* @brief  Set software reset [enabled,disabled]
* @param  state
* @retval Error code
*/
int8_t TIDS_setSwReset(TIDS_state_t mode)
{
 23fbc58:	b513      	push	{r0, r1, r4, lr}
 23fbc5a:	4604      	mov	r4, r0
	TIDS_soft_reset_t swRstReg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_SOFT_RESET_REG, 1, (uint8_t *)&swRstReg))
 23fbc5c:	2101      	movs	r1, #1
 23fbc5e:	200c      	movs	r0, #12
 23fbc60:	aa01      	add	r2, sp, #4
 23fbc62:	f7ff ff07 	bl	23fba74 <ReadReg>
 23fbc66:	1c43      	adds	r3, r0, #1
 23fbc68:	d00f      	beq.n	23fbc8a <TIDS_setSwReset+0x32>
	return WE_FAIL;

	swRstReg.reset = mode;
 23fbc6a:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_SOFT_RESET_REG, 1, (uint8_t *)&swRstReg))
 23fbc6e:	2101      	movs	r1, #1
	swRstReg.reset = mode;
 23fbc70:	f364 0341 	bfi	r3, r4, #1, #1
	if (WE_FAIL == WriteReg((uint8_t)TIDS_SOFT_RESET_REG, 1, (uint8_t *)&swRstReg))
 23fbc74:	200c      	movs	r0, #12
 23fbc76:	aa01      	add	r2, sp, #4
	swRstReg.reset = mode;
 23fbc78:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_SOFT_RESET_REG, 1, (uint8_t *)&swRstReg))
 23fbc7c:	f7ff ff2a 	bl	23fbad4 <WriteReg>
 23fbc80:	3001      	adds	r0, #1
 23fbc82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbc86:	bf18      	it	ne
 23fbc88:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
 23fbc8a:	b002      	add	sp, #8
 23fbc8c:	bd10      	pop	{r4, pc}

023fbc8e <TIDS_setContinuousMode>:
* @brief  Set the free run mode[enabled,disabled]
* @param  mode
* @retval Error code
*/
int8_t TIDS_setContinuousMode(TIDS_state_t mode)
{
 23fbc8e:	b513      	push	{r0, r1, r4, lr}
 23fbc90:	4604      	mov	r4, r0
	TIDS_ctrl_t ctrl_reg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbc92:	2101      	movs	r1, #1
 23fbc94:	2004      	movs	r0, #4
 23fbc96:	aa01      	add	r2, sp, #4
 23fbc98:	f7ff feec 	bl	23fba74 <ReadReg>
 23fbc9c:	1c43      	adds	r3, r0, #1
 23fbc9e:	d00f      	beq.n	23fbcc0 <TIDS_setContinuousMode+0x32>
	return WE_FAIL;

	ctrl_reg.freeRunBit = mode;
 23fbca0:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbca4:	2101      	movs	r1, #1
	ctrl_reg.freeRunBit = mode;
 23fbca6:	f364 0382 	bfi	r3, r4, #2, #1
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbcaa:	2004      	movs	r0, #4
 23fbcac:	aa01      	add	r2, sp, #4
	ctrl_reg.freeRunBit = mode;
 23fbcae:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbcb2:	f7ff ff0f 	bl	23fbad4 <WriteReg>
 23fbcb6:	3001      	adds	r0, #1
 23fbcb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbcbc:	bf18      	it	ne
 23fbcbe:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
 23fbcc0:	b002      	add	sp, #8
 23fbcc2:	bd10      	pop	{r4, pc}

023fbcc4 <TIDS_setBlockDataUpdate>:
* @brief  Set the block data update feature
* @param  state
* @retval Error code
*/
int8_t TIDS_setBlockDataUpdate(TIDS_state_t bdu)
{
 23fbcc4:	b513      	push	{r0, r1, r4, lr}
 23fbcc6:	4604      	mov	r4, r0
	TIDS_ctrl_t ctrl_reg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbcc8:	2101      	movs	r1, #1
 23fbcca:	2004      	movs	r0, #4
 23fbccc:	aa01      	add	r2, sp, #4
 23fbcce:	f7ff fed1 	bl	23fba74 <ReadReg>
 23fbcd2:	1c43      	adds	r3, r0, #1
 23fbcd4:	d00f      	beq.n	23fbcf6 <TIDS_setBlockDataUpdate+0x32>
	return WE_FAIL;

	ctrl_reg.blockDataUpdate = bdu;
 23fbcd6:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbcda:	2101      	movs	r1, #1
	ctrl_reg.blockDataUpdate = bdu;
 23fbcdc:	f364 1386 	bfi	r3, r4, #6, #1
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbce0:	2004      	movs	r0, #4
 23fbce2:	aa01      	add	r2, sp, #4
	ctrl_reg.blockDataUpdate = bdu;
 23fbce4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbce8:	f7ff fef4 	bl	23fbad4 <WriteReg>
 23fbcec:	3001      	adds	r0, #1
 23fbcee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbcf2:	bf18      	it	ne
 23fbcf4:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
 23fbcf6:	b002      	add	sp, #8
 23fbcf8:	bd10      	pop	{r4, pc}

023fbcfa <TIDS_setOutputDataRate>:
* @brief  Set the output data rate of the sensor
* @param  output data rate
* @retval Error code
*/
int8_t TIDS_setOutputDataRate(TIDS_output_data_rate_t odr)
{
 23fbcfa:	b513      	push	{r0, r1, r4, lr}
 23fbcfc:	4604      	mov	r4, r0
	TIDS_ctrl_t ctrl_reg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbcfe:	2101      	movs	r1, #1
 23fbd00:	2004      	movs	r0, #4
 23fbd02:	aa01      	add	r2, sp, #4
 23fbd04:	f7ff feb6 	bl	23fba74 <ReadReg>
 23fbd08:	1c43      	adds	r3, r0, #1
 23fbd0a:	d00f      	beq.n	23fbd2c <TIDS_setOutputDataRate+0x32>
	return WE_FAIL;

	ctrl_reg.outputDataRate = odr;
 23fbd0c:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbd10:	2101      	movs	r1, #1
	ctrl_reg.outputDataRate = odr;
 23fbd12:	f364 1305 	bfi	r3, r4, #4, #2
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbd16:	2004      	movs	r0, #4
 23fbd18:	aa01      	add	r2, sp, #4
	ctrl_reg.outputDataRate = odr;
 23fbd1a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbd1e:	f7ff fed9 	bl	23fbad4 <WriteReg>
 23fbd22:	3001      	adds	r0, #1
 23fbd24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbd28:	bf18      	it	ne
 23fbd2a:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
 23fbd2c:	b002      	add	sp, #8
 23fbd2e:	bd10      	pop	{r4, pc}

023fbd30 <TIDS_setAutoIncrement>:
* @brief  Set the Auto increment feature
* @param  state
* @retval Error code
*/
int8_t TIDS_setAutoIncrement(TIDS_state_t inc)
{
 23fbd30:	b513      	push	{r0, r1, r4, lr}
 23fbd32:	4604      	mov	r4, r0
	TIDS_ctrl_t ctrl_reg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbd34:	2101      	movs	r1, #1
 23fbd36:	2004      	movs	r0, #4
 23fbd38:	aa01      	add	r2, sp, #4
 23fbd3a:	f7ff fe9b 	bl	23fba74 <ReadReg>
 23fbd3e:	1c43      	adds	r3, r0, #1
 23fbd40:	d00f      	beq.n	23fbd62 <TIDS_setAutoIncrement+0x32>
	return WE_FAIL;

	ctrl_reg.autoAddIncr = inc;
 23fbd42:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbd46:	2101      	movs	r1, #1
	ctrl_reg.autoAddIncr = inc;
 23fbd48:	f364 03c3 	bfi	r3, r4, #3, #1
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbd4c:	2004      	movs	r0, #4
 23fbd4e:	aa01      	add	r2, sp, #4
	ctrl_reg.autoAddIncr = inc;
 23fbd50:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
 23fbd54:	f7ff febe 	bl	23fbad4 <WriteReg>
 23fbd58:	3001      	adds	r0, #1
 23fbd5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbd5e:	bf18      	it	ne
 23fbd60:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
 23fbd62:	b002      	add	sp, #8
 23fbd64:	bd10      	pop	{r4, pc}

023fbd66 <TIDS_getRAWTemperature>:
* @brief  Read the raw measured temperature value
* @param  pointer to Temperature Measurement
* @retval Error code
*/
int8_t TIDS_getRAWTemperature(uint16_t *rawTemp)
{
 23fbd66:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t tmp[2] = { 0 };
 23fbd68:	2400      	movs	r4, #0
{
 23fbd6a:	4605      	mov	r5, r0

	if (WE_FAIL == ReadReg((uint8_t)TIDS_DATA_T_L_REG, 1, &tmp[0]))
 23fbd6c:	2101      	movs	r1, #1
 23fbd6e:	2006      	movs	r0, #6
 23fbd70:	aa01      	add	r2, sp, #4
	uint8_t tmp[2] = { 0 };
 23fbd72:	f8ad 4004 	strh.w	r4, [sp, #4]
	if (WE_FAIL == ReadReg((uint8_t)TIDS_DATA_T_L_REG, 1, &tmp[0]))
 23fbd76:	f7ff fe7d 	bl	23fba74 <ReadReg>
 23fbd7a:	3001      	adds	r0, #1
 23fbd7c:	d103      	bne.n	23fbd86 <TIDS_getRAWTemperature+0x20>
	return WE_FAIL;
 23fbd7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return WE_FAIL;

	*rawTemp = (uint16_t)(tmp[1] << 8);
	*rawTemp |= (uint16_t)tmp[0];
	return WE_SUCCESS;
}
 23fbd82:	b003      	add	sp, #12
 23fbd84:	bd30      	pop	{r4, r5, pc}
	if (WE_FAIL == ReadReg((uint8_t)TIDS_DATA_T_H_REG, 1, &tmp[1]))
 23fbd86:	2101      	movs	r1, #1
 23fbd88:	2007      	movs	r0, #7
 23fbd8a:	f10d 0205 	add.w	r2, sp, #5
 23fbd8e:	f7ff fe71 	bl	23fba74 <ReadReg>
 23fbd92:	3001      	adds	r0, #1
 23fbd94:	d0f3      	beq.n	23fbd7e <TIDS_getRAWTemperature+0x18>
	*rawTemp |= (uint16_t)tmp[0];
 23fbd96:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return WE_SUCCESS;
 23fbd9a:	4620      	mov	r0, r4
	*rawTemp |= (uint16_t)tmp[0];
 23fbd9c:	802b      	strh	r3, [r5, #0]
	return WE_SUCCESS;
 23fbd9e:	e7f0      	b.n	23fbd82 <TIDS_getRAWTemperature+0x1c>

023fbda0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fbda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbda4:	461f      	mov	r7, r3
 23fbda6:	b085      	sub	sp, #20
 23fbda8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fbdac:	eba7 0a01 	sub.w	sl, r7, r1
 23fbdb0:	eba8 0902 	sub.w	r9, r8, r2
 23fbdb4:	f1b9 0f00 	cmp.w	r9, #0
 23fbdb8:	bfb8      	it	lt
 23fbdba:	f1c9 0900 	rsblt	r9, r9, #0
 23fbdbe:	f1ba 0f00 	cmp.w	sl, #0
 23fbdc2:	bfb8      	it	lt
 23fbdc4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 23fbdc8:	45d1      	cmp	r9, sl
        uint16_t color) {
 23fbdca:	4683      	mov	fp, r0
 23fbdcc:	460c      	mov	r4, r1
 23fbdce:	4615      	mov	r5, r2
 23fbdd0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 23fbdd4:	dd04      	ble.n	23fbde0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23fbdd6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 23fbdd8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
 23fbdda:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 23fbddc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
 23fbdde:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 23fbde0:	42bc      	cmp	r4, r7
 23fbde2:	dd05      	ble.n	23fbdf0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23fbde4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 23fbde6:	4645      	mov	r5, r8
 23fbde8:	4690      	mov	r8, r2
    if (x0 > x1) {
 23fbdea:	4622      	mov	r2, r4
 23fbdec:	463c      	mov	r4, r7
 23fbdee:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 23fbdf0:	1b3e      	subs	r6, r7, r4
 23fbdf2:	b2b2      	uxth	r2, r6
 23fbdf4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
 23fbdf6:	eba8 0205 	sub.w	r2, r8, r5
 23fbdfa:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fbdfe:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
 23fbe02:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fbe06:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 23fbe0a:	4545      	cmp	r5, r8
 23fbe0c:	bfb4      	ite	lt
 23fbe0e:	2201      	movlt	r2, #1
 23fbe10:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
 23fbe14:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 23fbe16:	1076      	asrs	r6, r6, #1
        ystep = -1;
 23fbe18:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 23fbe1a:	42bc      	cmp	r4, r7
 23fbe1c:	dc1c      	bgt.n	23fbe58 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
 23fbe1e:	f8db 2000 	ldr.w	r2, [fp]
        if (steep) {
 23fbe22:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 23fbe24:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23fbe28:	bfc7      	ittee	gt
 23fbe2a:	4629      	movgt	r1, r5
 23fbe2c:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 23fbe2e:	462a      	movle	r2, r5
 23fbe30:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 23fbe32:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 23fbe34:	4658      	mov	r0, fp
 23fbe36:	47c0      	blx	r8
        }
        err -= dy;
 23fbe38:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 23fbe3a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 23fbe3c:	1ab6      	subs	r6, r6, r2
 23fbe3e:	b2b1      	uxth	r1, r6
 23fbe40:	b236      	sxth	r6, r6
        if (err < 0) {
 23fbe42:	2e00      	cmp	r6, #0
 23fbe44:	da05      	bge.n	23fbe52 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
 23fbe46:	9a02      	ldr	r2, [sp, #8]
 23fbe48:	4415      	add	r5, r2
            err += dx;
 23fbe4a:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 23fbe4c:	b22d      	sxth	r5, r5
            err += dx;
 23fbe4e:	1856      	adds	r6, r2, r1
 23fbe50:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
 23fbe52:	3401      	adds	r4, #1
 23fbe54:	b224      	sxth	r4, r4
 23fbe56:	e7e0      	b.n	23fbe1a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
 23fbe58:	b005      	add	sp, #20
 23fbe5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fbe5e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 23fbe5e:	4770      	bx	lr

023fbe60 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 23fbe60:	b410      	push	{r4}
    drawPixel(x, y, color);
 23fbe62:	6804      	ldr	r4, [r0, #0]
 23fbe64:	6924      	ldr	r4, [r4, #16]
 23fbe66:	46a4      	mov	ip, r4
}
 23fbe68:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
 23fbe6c:	4760      	bx	ip

023fbe6e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fbe6e:	b430      	push	{r4, r5}
 23fbe70:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 23fbe74:	6804      	ldr	r4, [r0, #0]
 23fbe76:	9502      	str	r5, [sp, #8]
 23fbe78:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fbe7a:	46a4      	mov	ip, r4
}
 23fbe7c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 23fbe7e:	4760      	bx	ip

023fbe80 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fbe80:	b430      	push	{r4, r5}
 23fbe82:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 23fbe86:	6804      	ldr	r4, [r0, #0]
 23fbe88:	9502      	str	r5, [sp, #8]
 23fbe8a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fbe8c:	46a4      	mov	ip, r4
}
 23fbe8e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 23fbe90:	4760      	bx	ip

023fbe92 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fbe92:	b470      	push	{r4, r5, r6}
 23fbe94:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fbe98:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 23fbe9c:	6804      	ldr	r4, [r0, #0]
 23fbe9e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fbea2:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fbea4:	46a4      	mov	ip, r4
}
 23fbea6:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 23fbea8:	4760      	bx	ip

023fbeaa <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fbeaa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fbeae:	461c      	mov	r4, r3
 23fbeb0:	4616      	mov	r6, r2
 23fbeb2:	4605      	mov	r5, r0
 23fbeb4:	460f      	mov	r7, r1
    startWrite();
 23fbeb6:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 23fbeb8:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 23fbeba:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fbebe:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 23fbec0:	4434      	add	r4, r6
    startWrite();
 23fbec2:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 23fbec4:	b224      	sxth	r4, r4
 23fbec6:	682b      	ldr	r3, [r5, #0]
 23fbec8:	f8cd 8004 	str.w	r8, [sp, #4]
 23fbecc:	9400      	str	r4, [sp, #0]
 23fbece:	4628      	mov	r0, r5
 23fbed0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fbed2:	4632      	mov	r2, r6
 23fbed4:	463b      	mov	r3, r7
 23fbed6:	4639      	mov	r1, r7
 23fbed8:	47a0      	blx	r4
    endWrite();
 23fbeda:	4628      	mov	r0, r5
 23fbedc:	682b      	ldr	r3, [r5, #0]
 23fbede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbee0:	b002      	add	sp, #8
 23fbee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fbee6:	4718      	bx	r3

023fbee8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fbee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fbeec:	4617      	mov	r7, r2
 23fbeee:	4604      	mov	r4, r0
 23fbef0:	461d      	mov	r5, r3
 23fbef2:	460e      	mov	r6, r1
    startWrite();
 23fbef4:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 23fbef6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fbefa:	695b      	ldr	r3, [r3, #20]
 23fbefc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 23fbefe:	e9cd 7800 	strd	r7, r8, [sp]
 23fbf02:	6822      	ldr	r2, [r4, #0]
 23fbf04:	1e6b      	subs	r3, r5, #1
 23fbf06:	4433      	add	r3, r6
 23fbf08:	4620      	mov	r0, r4
 23fbf0a:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fbf0c:	4631      	mov	r1, r6
 23fbf0e:	463a      	mov	r2, r7
 23fbf10:	b21b      	sxth	r3, r3
 23fbf12:	47a8      	blx	r5
    endWrite();
 23fbf14:	4620      	mov	r0, r4
 23fbf16:	6823      	ldr	r3, [r4, #0]
 23fbf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbf1a:	b002      	add	sp, #8
 23fbf1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fbf20:	4718      	bx	r3

023fbf22 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fbf22:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fbf26:	461e      	mov	r6, r3
    startWrite();
 23fbf28:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fbf2a:	460c      	mov	r4, r1
    startWrite();
 23fbf2c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fbf2e:	4605      	mov	r5, r0
 23fbf30:	4617      	mov	r7, r2
 23fbf32:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fbf36:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fbf3a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 23fbf3c:	4426      	add	r6, r4
 23fbf3e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
 23fbf40:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
 23fbf42:	da0b      	bge.n	23fbf5c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 23fbf44:	f8cd 8000 	str.w	r8, [sp]
 23fbf48:	4621      	mov	r1, r4
 23fbf4a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fbf4e:	463a      	mov	r2, r7
 23fbf50:	464b      	mov	r3, r9
 23fbf52:	4628      	mov	r0, r5
 23fbf54:	3401      	adds	r4, #1
 23fbf56:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 23fbf58:	b224      	sxth	r4, r4
 23fbf5a:	e7f0      	b.n	23fbf3e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 23fbf5c:	4628      	mov	r0, r5
 23fbf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbf60:	b002      	add	sp, #8
 23fbf62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fbf66:	4718      	bx	r3

023fbf68 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fbf68:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 23fbf6a:	9101      	str	r1, [sp, #4]
 23fbf6c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fbf70:	6802      	ldr	r2, [r0, #0]
 23fbf72:	9100      	str	r1, [sp, #0]
 23fbf74:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fbf76:	2200      	movs	r2, #0
 23fbf78:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbf7c:	4611      	mov	r1, r2
 23fbf7e:	47a0      	blx	r4
}
 23fbf80:	b002      	add	sp, #8
 23fbf82:	bd10      	pop	{r4, pc}

023fbf84 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fbf84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
 23fbf88:	4299      	cmp	r1, r3
        uint16_t color) {
 23fbf8a:	4616      	mov	r6, r2
 23fbf8c:	4680      	mov	r8, r0
 23fbf8e:	460d      	mov	r5, r1
 23fbf90:	461c      	mov	r4, r3
 23fbf92:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fbf96:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fbf9a:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 23fbf9c:	d112      	bne.n	23fbfc4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 23fbf9e:	42be      	cmp	r6, r7
 23fbfa0:	bfc2      	ittt	gt
 23fbfa2:	4633      	movgt	r3, r6
 23fbfa4:	463e      	movgt	r6, r7
 23fbfa6:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fbfa8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fbfac:	1c7b      	adds	r3, r7, #1
 23fbfae:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23fbfb0:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fbfb2:	4632      	mov	r2, r6
 23fbfb4:	4629      	mov	r1, r5
 23fbfb6:	4640      	mov	r0, r8
 23fbfb8:	46a4      	mov	ip, r4
 23fbfba:	b21b      	sxth	r3, r3
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
 23fbfbc:	b003      	add	sp, #12
 23fbfbe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fbfc2:	4760      	bx	ip
    } else if(y0 == y1){
 23fbfc4:	42be      	cmp	r6, r7
 23fbfc6:	d10a      	bne.n	23fbfde <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 23fbfc8:	4299      	cmp	r1, r3
 23fbfca:	bfc2      	ittt	gt
 23fbfcc:	460b      	movgt	r3, r1
 23fbfce:	4625      	movgt	r5, r4
 23fbfd0:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fbfd2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fbfd6:	1c63      	adds	r3, r4, #1
 23fbfd8:	1b5b      	subs	r3, r3, r5
 23fbfda:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fbfdc:	e7e9      	b.n	23fbfb2 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 23fbfde:	6953      	ldr	r3, [r2, #20]
 23fbfe0:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 23fbfe2:	e9cd 7900 	strd	r7, r9, [sp]
 23fbfe6:	f8d8 3000 	ldr.w	r3, [r8]
 23fbfea:	4640      	mov	r0, r8
 23fbfec:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23fbfee:	4632      	mov	r2, r6
 23fbff0:	4623      	mov	r3, r4
 23fbff2:	4629      	mov	r1, r5
 23fbff4:	47b8      	blx	r7
        endWrite();
 23fbff6:	4640      	mov	r0, r8
 23fbff8:	f8d8 3000 	ldr.w	r3, [r8]
 23fbffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbffe:	b003      	add	sp, #12
 23fc000:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 23fc004:	4718      	bx	r3

023fc006 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fc006:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fc00a:	4604      	mov	r4, r0
 23fc00c:	460f      	mov	r7, r1
 23fc00e:	4616      	mov	r6, r2
 23fc010:	461d      	mov	r5, r3
    startWrite();
 23fc012:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fc014:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fc018:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fc01a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 23fc01e:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 23fc020:	6823      	ldr	r3, [r4, #0]
 23fc022:	f8cd 8000 	str.w	r8, [sp]
 23fc026:	4632      	mov	r2, r6
 23fc028:	4639      	mov	r1, r7
 23fc02a:	4620      	mov	r0, r4
 23fc02c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fc030:	462b      	mov	r3, r5
 23fc032:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 23fc034:	6823      	ldr	r3, [r4, #0]
 23fc036:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23fc03a:	f8cd 8000 	str.w	r8, [sp]
 23fc03e:	4432      	add	r2, r6
 23fc040:	4639      	mov	r1, r7
 23fc042:	4620      	mov	r0, r4
 23fc044:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fc048:	b212      	sxth	r2, r2
 23fc04a:	462b      	mov	r3, r5
 23fc04c:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 23fc04e:	6823      	ldr	r3, [r4, #0]
 23fc050:	f8cd 8000 	str.w	r8, [sp]
 23fc054:	4632      	mov	r2, r6
 23fc056:	4639      	mov	r1, r7
 23fc058:	4620      	mov	r0, r4
 23fc05a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fc05e:	464b      	mov	r3, r9
 23fc060:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 23fc062:	1e6b      	subs	r3, r5, #1
 23fc064:	19d9      	adds	r1, r3, r7
 23fc066:	6823      	ldr	r3, [r4, #0]
 23fc068:	f8cd 8000 	str.w	r8, [sp]
 23fc06c:	4620      	mov	r0, r4
 23fc06e:	6a1d      	ldr	r5, [r3, #32]
 23fc070:	4632      	mov	r2, r6
 23fc072:	464b      	mov	r3, r9
 23fc074:	b209      	sxth	r1, r1
 23fc076:	47a8      	blx	r5
    endWrite();
 23fc078:	4620      	mov	r0, r4
 23fc07a:	6823      	ldr	r3, [r4, #0]
 23fc07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc07e:	b002      	add	sp, #8
 23fc080:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fc084:	4718      	bx	r3

023fc086 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 23fc086:	4770      	bx	lr

023fc088 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 23fc088:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
 23fc08c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
 23fc090:	7683      	strb	r3, [r0, #26]
            _width  = WIDTH;
 23fc092:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    switch(rotation) {
 23fc096:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 23fc098:	bf59      	ittee	pl
 23fc09a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 23fc09c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 23fc09e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 23fc0a0:	81c3      	strhmi	r3, [r0, #14]
}
 23fc0a2:	4770      	bx	lr

023fc0a4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23fc0a4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 23fc0a6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23fc0a8:	2400      	movs	r4, #0
    _width    = WIDTH;
 23fc0aa:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 23fc0ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
WIDTH(w), HEIGHT(h)
 23fc0b0:	4d05      	ldr	r5, [pc, #20]	; (23fc0c8 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fc0b2:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 23fc0b4:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 23fc0b6:	4a05      	ldr	r2, [pc, #20]	; (23fc0cc <_ZN12Adafruit_GFXC1Ess+0x28>)
 23fc0b8:	6044      	str	r4, [r0, #4]
 23fc0ba:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 23fc0be:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 23fc0c0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 23fc0c2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 23fc0c4:	6204      	str	r4, [r0, #32]
}
 23fc0c6:	bd30      	pop	{r4, r5, pc}
 23fc0c8:	023ffc3c 	.word	0x023ffc3c
 23fc0cc:	01000101 	.word	0x01000101

023fc0d0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fc0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc0d4:	ed2d 8b02 	vpush	{d8}
 23fc0d8:	b091      	sub	sp, #68	; 0x44
 23fc0da:	4616      	mov	r6, r2
 23fc0dc:	461f      	mov	r7, r3
    if(!gfxFont) { // 'Classic' built-in font
 23fc0de:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fc0e0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23fc0e4:	4683      	mov	fp, r0
 23fc0e6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23fc0ea:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23fc0ee:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23fc0f2:	9103      	str	r1, [sp, #12]
 23fc0f4:	9304      	str	r3, [sp, #16]
    if(!gfxFont) { // 'Classic' built-in font
 23fc0f6:	2a00      	cmp	r2, #0
 23fc0f8:	f040 80c5 	bne.w	23fc286 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
 23fc0fc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fc100:	428b      	cmp	r3, r1
 23fc102:	f340 814c 	ble.w	23fc39e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23fc106:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fc10a:	42b3      	cmp	r3, r6
 23fc10c:	f340 8147 	ble.w	23fc39e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fc110:	2306      	movs	r3, #6
 23fc112:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 23fc116:	2b00      	cmp	r3, #0
 23fc118:	f340 8141 	ble.w	23fc39e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 23fc11c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fc120:	2b00      	cmp	r3, #0
 23fc122:	f340 813c 	ble.w	23fc39e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 23fc126:	7f03      	ldrb	r3, [r0, #28]
 23fc128:	b91b      	cbnz	r3, 23fc132 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23fc12a:	2faf      	cmp	r7, #175	; 0xaf
 23fc12c:	bf84      	itt	hi
 23fc12e:	3701      	addhi	r7, #1
 23fc130:	b2ff      	uxtbhi	r7, r7
        startWrite();
 23fc132:	f8db 3000 	ldr.w	r3, [fp]
 23fc136:	4658      	mov	r0, fp
 23fc138:	695b      	ldr	r3, [r3, #20]
 23fc13a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fc13c:	2205      	movs	r2, #5
 23fc13e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fc140:	2200      	movs	r2, #0
 23fc142:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fc144:	4a98      	ldr	r2, [pc, #608]	; (23fc3a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fc146:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fc14a:	18d3      	adds	r3, r2, r3
 23fc14c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
 23fc14e:	b2b3      	uxth	r3, r6
 23fc150:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fc152:	9a05      	ldr	r2, [sp, #20]
 23fc154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc156:	fb02 f905 	mul.w	r9, r2, r5
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fc15a:	5c9b      	ldrb	r3, [r3, r2]
 23fc15c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc15e:	b2ab      	uxth	r3, r5
 23fc160:	930b      	str	r3, [sp, #44]	; 0x2c
 23fc162:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fc166:	9308      	str	r3, [sp, #32]
 23fc168:	9b03      	ldr	r3, [sp, #12]
 23fc16a:	fa19 f983 	uxtah	r9, r9, r3
 23fc16e:	fa0f f389 	sxth.w	r3, r9
 23fc172:	ee08 3a10 	vmov	s16, r3
 23fc176:	2308      	movs	r3, #8
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fc178:	f04f 0900 	mov.w	r9, #0
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc17c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 23fc17e:	9b03      	ldr	r3, [sp, #12]
 23fc180:	eb02 0a03 	add.w	sl, r2, r3
 23fc184:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
 23fc188:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
 23fc18a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
 23fc18e:	07d2      	lsls	r2, r2, #31
 23fc190:	d552      	bpl.n	23fc238 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
 23fc192:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fc194:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fc198:	d13e      	bne.n	23fc218 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fc19a:	2c01      	cmp	r4, #1
 23fc19c:	d13c      	bne.n	23fc218 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
 23fc19e:	699b      	ldr	r3, [r3, #24]
 23fc1a0:	9906      	ldr	r1, [sp, #24]
 23fc1a2:	461f      	mov	r7, r3
 23fc1a4:	9b04      	ldr	r3, [sp, #16]
 23fc1a6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 23fc1a8:	4651      	mov	r1, sl
 23fc1aa:	4658      	mov	r0, fp
 23fc1ac:	b212      	sxth	r2, r2
 23fc1ae:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fc1b0:	f109 0301 	add.w	r3, r9, #1
 23fc1b4:	fa4f f983 	sxtb.w	r9, r3
 23fc1b8:	9b07      	ldr	r3, [sp, #28]
 23fc1ba:	085b      	lsrs	r3, r3, #1
 23fc1bc:	9307      	str	r3, [sp, #28]
 23fc1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fc1c0:	3b01      	subs	r3, #1
 23fc1c2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fc1c6:	930a      	str	r3, [sp, #40]	; 0x28
 23fc1c8:	d1de      	bne.n	23fc188 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fc1ca:	9f05      	ldr	r7, [sp, #20]
 23fc1cc:	3701      	adds	r7, #1
 23fc1ce:	b27b      	sxtb	r3, r7
 23fc1d0:	9305      	str	r3, [sp, #20]
 23fc1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fc1d4:	3b01      	subs	r3, #1
 23fc1d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fc1da:	9309      	str	r3, [sp, #36]	; 0x24
 23fc1dc:	d1b9      	bne.n	23fc152 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
 23fc1de:	9b04      	ldr	r3, [sp, #16]
 23fc1e0:	4543      	cmp	r3, r8
 23fc1e2:	d00f      	beq.n	23fc204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 23fc1e4:	2d01      	cmp	r5, #1
 23fc1e6:	f8db 3000 	ldr.w	r3, [fp]
 23fc1ea:	d13b      	bne.n	23fc264 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fc1ec:	2c01      	cmp	r4, #1
 23fc1ee:	d139      	bne.n	23fc264 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fc1f0:	9908      	ldr	r1, [sp, #32]
 23fc1f2:	f8cd 8000 	str.w	r8, [sp]
 23fc1f6:	3105      	adds	r1, #5
 23fc1f8:	6a1c      	ldr	r4, [r3, #32]
 23fc1fa:	4632      	mov	r2, r6
 23fc1fc:	2308      	movs	r3, #8
 23fc1fe:	4658      	mov	r0, fp
 23fc200:	b209      	sxth	r1, r1
 23fc202:	47a0      	blx	r4
        endWrite();
 23fc204:	4658      	mov	r0, fp
 23fc206:	f8db 3000 	ldr.w	r3, [fp]
 23fc20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc20c:	b011      	add	sp, #68	; 0x44
 23fc20e:	ecbd 8b02 	vpop	{d8}
 23fc212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 23fc216:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 23fc218:	fb14 f202 	smulbb	r2, r4, r2
 23fc21c:	9906      	ldr	r1, [sp, #24]
 23fc21e:	440a      	add	r2, r1
 23fc220:	9904      	ldr	r1, [sp, #16]
 23fc222:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc224:	9400      	str	r4, [sp, #0]
 23fc226:	69db      	ldr	r3, [r3, #28]
 23fc228:	ee18 1a10 	vmov	r1, s16
 23fc22c:	461f      	mov	r7, r3
 23fc22e:	4658      	mov	r0, fp
 23fc230:	462b      	mov	r3, r5
 23fc232:	b212      	sxth	r2, r2
 23fc234:	47b8      	blx	r7
 23fc236:	e7bb      	b.n	23fc1b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
 23fc238:	9a04      	ldr	r2, [sp, #16]
 23fc23a:	4542      	cmp	r2, r8
 23fc23c:	d0b8      	beq.n	23fc1b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
 23fc23e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fc240:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fc244:	d107      	bne.n	23fc256 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fc246:	2c01      	cmp	r4, #1
 23fc248:	d105      	bne.n	23fc256 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
 23fc24a:	699b      	ldr	r3, [r3, #24]
 23fc24c:	9906      	ldr	r1, [sp, #24]
 23fc24e:	461f      	mov	r7, r3
 23fc250:	440a      	add	r2, r1
 23fc252:	4643      	mov	r3, r8
 23fc254:	e7a8      	b.n	23fc1a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc256:	fb14 f202 	smulbb	r2, r4, r2
 23fc25a:	9906      	ldr	r1, [sp, #24]
 23fc25c:	f8cd 8004 	str.w	r8, [sp, #4]
 23fc260:	440a      	add	r2, r1
 23fc262:	e7df      	b.n	23fc224 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 23fc264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc266:	00e4      	lsls	r4, r4, #3
 23fc268:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fc26c:	9a08      	ldr	r2, [sp, #32]
 23fc26e:	f8cd 8004 	str.w	r8, [sp, #4]
 23fc272:	440a      	add	r2, r1
 23fc274:	4611      	mov	r1, r2
 23fc276:	9400      	str	r4, [sp, #0]
 23fc278:	69dc      	ldr	r4, [r3, #28]
 23fc27a:	4632      	mov	r2, r6
 23fc27c:	462b      	mov	r3, r5
 23fc27e:	4658      	mov	r0, fp
 23fc280:	b209      	sxth	r1, r1
 23fc282:	47a0      	blx	r4
        endWrite();
 23fc284:	e7be      	b.n	23fc204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fc286:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 23fc288:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fc28a:	1aff      	subs	r7, r7, r3
    return gfxFont->bitmap;
 23fc28c:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 23fc28e:	b2ff      	uxtb	r7, r7
    return gfxFont->bitmap;
 23fc290:	920b      	str	r2, [sp, #44]	; 0x2c
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fc292:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
    return gfxFont->glyph + c;
 23fc296:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fc29a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fc29c:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 23fc29e:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fc2a0:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
 23fc2a2:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 23fc2a4:	f993 a006 	ldrsb.w	sl, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 23fc2a8:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 23fc2aa:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fc2ae:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
 23fc2b0:	d801      	bhi.n	23fc2b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fc2b2:	2c01      	cmp	r4, #1
 23fc2b4:	d957      	bls.n	23fc366 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
 23fc2b6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fc2ba:	9308      	str	r3, [sp, #32]
            yo16 = yo;
 23fc2bc:	fa0f f38a 	sxth.w	r3, sl
 23fc2c0:	9307      	str	r3, [sp, #28]
        uint8_t  xx, yy, bits = 0, bit = 0;
 23fc2c2:	f04f 0800 	mov.w	r8, #0
 23fc2c6:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
 23fc2c8:	4647      	mov	r7, r8
        startWrite();
 23fc2ca:	f8db 3000 	ldr.w	r3, [fp]
 23fc2ce:	4658      	mov	r0, fp
 23fc2d0:	695b      	ldr	r3, [r3, #20]
 23fc2d2:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc2d4:	b2b3      	uxth	r3, r6
 23fc2d6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc2d8:	fa1a f386 	uxtah	r3, sl, r6
 23fc2dc:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 23fc2de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fc2e0:	429f      	cmp	r7, r3
 23fc2e2:	d28f      	bcs.n	23fc204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc2e4:	9b07      	ldr	r3, [sp, #28]
 23fc2e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23fc2e8:	443b      	add	r3, r7
 23fc2ea:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
 23fc2ee:	2200      	movs	r2, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc2f0:	b21b      	sxth	r3, r3
 23fc2f2:	ee08 3a10 	vmov	s16, r3
 23fc2f6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
 23fc2f8:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc2fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23fc2fc:	eb02 0a07 	add.w	sl, r2, r7
 23fc300:	fa0f fa8a 	sxth.w	sl, sl
            for(xx=0; xx<w; xx++) {
 23fc304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fc306:	9905      	ldr	r1, [sp, #20]
 23fc308:	4291      	cmp	r1, r2
 23fc30a:	d241      	bcs.n	23fc390 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
 23fc30c:	1c5a      	adds	r2, r3, #1
 23fc30e:	b2d2      	uxtb	r2, r2
 23fc310:	075b      	lsls	r3, r3, #29
 23fc312:	920d      	str	r2, [sp, #52]	; 0x34
 23fc314:	d107      	bne.n	23fc326 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
 23fc316:	9b06      	ldr	r3, [sp, #24]
 23fc318:	9906      	ldr	r1, [sp, #24]
 23fc31a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc31c:	3301      	adds	r3, #1
 23fc31e:	b29b      	uxth	r3, r3
 23fc320:	f812 9001 	ldrb.w	r9, [r2, r1]
 23fc324:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
 23fc326:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fc32a:	d012      	beq.n	23fc352 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
 23fc32c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc32e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc332:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
 23fc336:	d11a      	bne.n	23fc36e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23fc338:	2c01      	cmp	r4, #1
 23fc33a:	d118      	bne.n	23fc36e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fc33e:	699b      	ldr	r3, [r3, #24]
 23fc340:	4411      	add	r1, r2
 23fc342:	9a05      	ldr	r2, [sp, #20]
 23fc344:	461e      	mov	r6, r3
 23fc346:	4411      	add	r1, r2
 23fc348:	4658      	mov	r0, fp
 23fc34a:	4652      	mov	r2, sl
 23fc34c:	9b04      	ldr	r3, [sp, #16]
 23fc34e:	b209      	sxth	r1, r1
 23fc350:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
 23fc352:	9e05      	ldr	r6, [sp, #20]
                bits <<= 1;
 23fc354:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 23fc358:	3601      	adds	r6, #1
 23fc35a:	b2f3      	uxtb	r3, r6
 23fc35c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
 23fc35e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
 23fc362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
 23fc364:	e7ce      	b.n	23fc304 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
 23fc366:	2300      	movs	r3, #0
 23fc368:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23fc36c:	e7a9      	b.n	23fc2c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc36e:	9805      	ldr	r0, [sp, #20]
 23fc370:	9a08      	ldr	r2, [sp, #32]
 23fc372:	4402      	add	r2, r0
 23fc374:	fb02 1105 	mla	r1, r2, r5, r1
 23fc378:	9a04      	ldr	r2, [sp, #16]
 23fc37a:	4658      	mov	r0, fp
 23fc37c:	e9cd 4200 	strd	r4, r2, [sp]
 23fc380:	69db      	ldr	r3, [r3, #28]
 23fc382:	ee18 2a10 	vmov	r2, s16
 23fc386:	461e      	mov	r6, r3
 23fc388:	b209      	sxth	r1, r1
 23fc38a:	462b      	mov	r3, r5
 23fc38c:	47b0      	blx	r6
 23fc38e:	e7e0      	b.n	23fc352 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23fc390:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
 23fc392:	3701      	adds	r7, #1
 23fc394:	4498      	add	r8, r3
 23fc396:	fa5f f888 	uxtb.w	r8, r8
 23fc39a:	b2ff      	uxtb	r7, r7
 23fc39c:	e79f      	b.n	23fc2de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23fc39e:	b011      	add	sp, #68	; 0x44
 23fc3a0:	ecbd 8b02 	vpop	{d8}
 23fc3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc3a8:	023ff734 	.word	0x023ff734

023fc3ac <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fc3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 23fc3ae:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23fc3b0:	4604      	mov	r4, r0
 23fc3b2:	460b      	mov	r3, r1
 23fc3b4:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 23fc3b6:	2a00      	cmp	r2, #0
 23fc3b8:	d134      	bne.n	23fc424 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 23fc3ba:	290a      	cmp	r1, #10
 23fc3bc:	d108      	bne.n	23fc3d0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 23fc3be:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 23fc3c0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc3c2:	7e42      	ldrb	r2, [r0, #25]
 23fc3c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 23fc3c8:	8263      	strh	r3, [r4, #18]
}
 23fc3ca:	2001      	movs	r0, #1
 23fc3cc:	b005      	add	sp, #20
 23fc3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 23fc3d0:	290d      	cmp	r1, #13
 23fc3d2:	d0fa      	beq.n	23fc3ca <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc3d4:	7ee1      	ldrb	r1, [r4, #27]
 23fc3d6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc3d8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc3da:	b171      	cbz	r1, 23fc3fa <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fc3dc:	2106      	movs	r1, #6
 23fc3de:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fc3e2:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fc3e6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fc3ea:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
 23fc3ec:	bfc1      	itttt	gt
 23fc3ee:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 23fc3f2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 23fc3f4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fc3f8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fc3fa:	8ae2      	ldrh	r2, [r4, #22]
 23fc3fc:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fc400:	9201      	str	r2, [sp, #4]
 23fc402:	8aa2      	ldrh	r2, [r4, #20]
 23fc404:	4620      	mov	r0, r4
 23fc406:	9200      	str	r2, [sp, #0]
 23fc408:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc40c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fc410:	f7ff fe5e 	bl	23fc0d0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 23fc414:	7e23      	ldrb	r3, [r4, #24]
 23fc416:	8a22      	ldrh	r2, [r4, #16]
 23fc418:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fc41c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fc420:	8223      	strh	r3, [r4, #16]
 23fc422:	e7d2      	b.n	23fc3ca <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 23fc424:	290a      	cmp	r1, #10
 23fc426:	d107      	bne.n	23fc438 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 23fc428:	2300      	movs	r3, #0
 23fc42a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
 23fc42c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fc42e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 23fc430:	8a43      	ldrh	r3, [r0, #18]
 23fc432:	fb01 3302 	mla	r3, r1, r2, r3
 23fc436:	e7c7      	b.n	23fc3c8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 23fc438:	290d      	cmp	r1, #13
 23fc43a:	d0c6      	beq.n	23fc3ca <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 23fc43c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fc43e:	42a9      	cmp	r1, r5
 23fc440:	d3c3      	bcc.n	23fc3ca <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fc442:	7a51      	ldrb	r1, [r2, #9]
 23fc444:	4299      	cmp	r1, r3
 23fc446:	d3c0      	bcc.n	23fc3ca <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 23fc448:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 23fc44a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 23fc44c:	b2ed      	uxtb	r5, r5
 23fc44e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 23fc452:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fc454:	b328      	cbz	r0, 23fc4a2 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fc456:	78e9      	ldrb	r1, [r5, #3]
 23fc458:	b319      	cbz	r1, 23fc4a2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fc45a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc45c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc45e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fc460:	b191      	cbz	r1, 23fc488 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fc462:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fc466:	4408      	add	r0, r1
 23fc468:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc46c:	fb06 1100 	mla	r1, r6, r0, r1
 23fc470:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fc474:	4281      	cmp	r1, r0
 23fc476:	dd07      	ble.n	23fc488 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 23fc478:	2000      	movs	r0, #0
 23fc47a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc47c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fc480:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 23fc482:	fb02 1207 	mla	r2, r2, r7, r1
 23fc486:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fc488:	8ae2      	ldrh	r2, [r4, #22]
 23fc48a:	4620      	mov	r0, r4
 23fc48c:	9201      	str	r2, [sp, #4]
 23fc48e:	8aa2      	ldrh	r2, [r4, #20]
 23fc490:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fc494:	9200      	str	r2, [sp, #0]
 23fc496:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc49a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fc49e:	f7ff fe17 	bl	23fc0d0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fc4a2:	7929      	ldrb	r1, [r5, #4]
 23fc4a4:	7e22      	ldrb	r2, [r4, #24]
 23fc4a6:	8a23      	ldrh	r3, [r4, #16]
 23fc4a8:	fb01 3302 	mla	r3, r1, r2, r3
 23fc4ac:	e7b8      	b.n	23fc420 <_ZN12Adafruit_GFX5writeEh+0x74>

023fc4ae <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 23fc4ae:	2901      	cmp	r1, #1
 23fc4b0:	bf38      	it	cc
 23fc4b2:	2101      	movcc	r1, #1
 23fc4b4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 23fc4b6:	7641      	strb	r1, [r0, #25]
}
 23fc4b8:	4770      	bx	lr

023fc4ba <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
        if(!gfxFont) { // And no current font struct?
 23fc4ba:	6a03      	ldr	r3, [r0, #32]
    if(f) {            // Font struct pointer passed in?
 23fc4bc:	b129      	cbz	r1, 23fc4ca <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x10>
        if(!gfxFont) { // And no current font struct?
 23fc4be:	b913      	cbnz	r3, 23fc4c6 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
            cursor_y += 6;
 23fc4c0:	8a43      	ldrh	r3, [r0, #18]
 23fc4c2:	3306      	adds	r3, #6
        cursor_y -= 6;
 23fc4c4:	8243      	strh	r3, [r0, #18]
    gfxFont = (GFXfont *)f;
 23fc4c6:	6201      	str	r1, [r0, #32]
}
 23fc4c8:	4770      	bx	lr
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 23fc4ca:	2b00      	cmp	r3, #0
 23fc4cc:	d0fb      	beq.n	23fc4c6 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
        cursor_y -= 6;
 23fc4ce:	8a43      	ldrh	r3, [r0, #18]
 23fc4d0:	3b06      	subs	r3, #6
 23fc4d2:	e7f7      	b.n	23fc4c4 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xa>

023fc4d4 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
 23fc4d4:	2100      	movs	r1, #0
 23fc4d6:	b280      	uxth	r0, r0
 23fc4d8:	f001 bf37 	b.w	23fe34a <digitalWrite>

023fc4dc <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
 23fc4dc:	2101      	movs	r1, #1
 23fc4de:	b280      	uxth	r0, r0
 23fc4e0:	f001 bf33 	b.w	23fe34a <digitalWrite>

023fc4e4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
 23fc4e4:	2100      	movs	r1, #0
 23fc4e6:	b280      	uxth	r0, r0
 23fc4e8:	f001 bf2f 	b.w	23fe34a <digitalWrite>

023fc4ec <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
 23fc4ec:	2101      	movs	r1, #1
 23fc4ee:	b280      	uxth	r0, r0
 23fc4f0:	f001 bf2b 	b.w	23fe34a <digitalWrite>

023fc4f4 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
 23fc4f4:	2100      	movs	r1, #0
 23fc4f6:	b280      	uxth	r0, r0
 23fc4f8:	f001 bf27 	b.w	23fe34a <digitalWrite>

023fc4fc <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
 23fc4fc:	2101      	movs	r1, #1
 23fc4fe:	b280      	uxth	r0, r0
 23fc500:	f001 bf23 	b.w	23fe34a <digitalWrite>

023fc504 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fc504:	b538      	push	{r3, r4, r5, lr}
 23fc506:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fc508:	b212      	sxth	r2, r2
 23fc50a:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fc50c:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fc50e:	f7ff fdc9 	bl	23fc0a4 <_ZN12Adafruit_GFXC1Ess>
 23fc512:	2200      	movs	r2, #0
 23fc514:	4b0b      	ldr	r3, [pc, #44]	; (23fc544 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
}
 23fc516:	4620      	mov	r0, r4
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fc518:	6023      	str	r3, [r4, #0]
 23fc51a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 23fc51e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 23fc522:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 23fc526:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23fc52a:	6422      	str	r2, [r4, #64]	; 0x40
 23fc52c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 23fc530:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 23fc534:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 23fc538:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 23fc53c:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
 23fc53e:	6265      	str	r5, [r4, #36]	; 0x24
}
 23fc540:	bd38      	pop	{r3, r4, r5, pc}
 23fc542:	bf00      	nop
 23fc544:	023ffc94 	.word	0x023ffc94

023fc548 <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
 23fc548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc54c:	4604      	mov	r4, r0
 23fc54e:	460d      	mov	r5, r1
 23fc550:	4616      	mov	r6, r2
 23fc552:	461f      	mov	r7, r3

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fc554:	f8df 804c 	ldr.w	r8, [pc, #76]	; 23fc5a4 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>
 23fc558:	b086      	sub	sp, #24
 23fc55a:	e8d8 0f8f 	ldab	r0, [r8]
 23fc55e:	f010 0101 	ands.w	r1, r0, #1
 23fc562:	d10b      	bne.n	23fc57c <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fc564:	4640      	mov	r0, r8
 23fc566:	9105      	str	r1, [sp, #20]
 23fc568:	f7ff f8ac 	bl	23fb6c4 <__cxa_guard_acquire>
 23fc56c:	9905      	ldr	r1, [sp, #20]
 23fc56e:	b128      	cbz	r0, 23fc57c <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fc570:	480b      	ldr	r0, [pc, #44]	; (23fc5a0 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fc572:	f001 fc15 	bl	23fdda0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fc576:	4640      	mov	r0, r8
 23fc578:	f7ff f8a9 	bl	23fb6ce <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
 23fc57c:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
 23fc580:	4632      	mov	r2, r6
 23fc582:	9302      	str	r3, [sp, #8]
 23fc584:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
 23fc588:	4629      	mov	r1, r5
 23fc58a:	e9cd 7300 	strd	r7, r3, [sp]
 23fc58e:	4620      	mov	r0, r4
 23fc590:	4b03      	ldr	r3, [pc, #12]	; (23fc5a0 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fc592:	f7ff ffb7 	bl	23fc504 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
 23fc596:	4620      	mov	r0, r4
 23fc598:	b006      	add	sp, #24
 23fc59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc59e:	bf00      	nop
 23fc5a0:	1007ae84 	.word	0x1007ae84
 23fc5a4:	1007ae80 	.word	0x1007ae80

023fc5a8 <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fc5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc5aa:	4604      	mov	r4, r0
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fc5ac:	4f48      	ldr	r7, [pc, #288]	; (23fc6d0 <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
    if(_cs >= 0) {
 23fc5ae:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fc5b2:	2900      	cmp	r1, #0
 23fc5b4:	bf18      	it	ne
 23fc5b6:	460f      	movne	r7, r1
    if(_cs >= 0) {
 23fc5b8:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fc5ba:	4616      	mov	r6, r2
    if(_cs >= 0) {
 23fc5bc:	db09      	blt.n	23fc5d2 <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
 23fc5be:	2101      	movs	r1, #1
 23fc5c0:	b280      	uxth	r0, r0
 23fc5c2:	f001 feb1 	bl	23fe328 <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
 23fc5c6:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fc5ca:	2101      	movs	r1, #1
 23fc5cc:	b280      	uxth	r0, r0
 23fc5ce:	f001 febc 	bl	23fe34a <digitalWrite>
    pinMode(_dc, OUTPUT);
 23fc5d2:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fc5d6:	2101      	movs	r1, #1
 23fc5d8:	b280      	uxth	r0, r0
 23fc5da:	f001 fea5 	bl	23fe328 <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
 23fc5de:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fc5e2:	2101      	movs	r1, #1
 23fc5e4:	b280      	uxth	r0, r0
 23fc5e6:	f001 feb0 	bl	23fe34a <digitalWrite>
    if(connection == TFT_HARD_SPI) {
 23fc5ea:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 23fc5ee:	bb85      	cbnz	r5, 23fc652 <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
    SPI_CLK_SYSTEM = 0,         // represents the system clock speed
    SPI_CLK_ARDUINO = 16*MHZ,
};

namespace particle {
class SPISettings : public Printable {
 23fc5f0:	2301      	movs	r3, #1
            hwspi._spi->begin();
 23fc5f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc5f4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 23fc5f8:	6327      	str	r7, [r4, #48]	; 0x30
 23fc5fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 23fc5fe:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
 23fc602:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
 23fc604:	f001 fbd6 	bl	23fddb4 <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
 23fc608:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc60c:	2800      	cmp	r0, #0
 23fc60e:	db5e      	blt.n	23fc6ce <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
 23fc610:	2101      	movs	r1, #1
 23fc612:	b280      	uxth	r0, r0
 23fc614:	f001 fe88 	bl	23fe328 <pinMode>
        digitalWrite(_rst, HIGH);
 23fc618:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc61c:	2101      	movs	r1, #1
 23fc61e:	b280      	uxth	r0, r0
 23fc620:	f001 fe93 	bl	23fe34a <digitalWrite>
        delay(100);
 23fc624:	2064      	movs	r0, #100	; 0x64
 23fc626:	f001 f86d 	bl	23fd704 <delay>
        digitalWrite(_rst, LOW);
 23fc62a:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc62e:	2100      	movs	r1, #0
 23fc630:	b280      	uxth	r0, r0
 23fc632:	f001 fe8a 	bl	23fe34a <digitalWrite>
        delay(100);
 23fc636:	2064      	movs	r0, #100	; 0x64
 23fc638:	f001 f864 	bl	23fd704 <delay>
        digitalWrite(_rst, HIGH);
 23fc63c:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc640:	2101      	movs	r1, #1
 23fc642:	b280      	uxth	r0, r0
 23fc644:	f001 fe81 	bl	23fe34a <digitalWrite>
}
 23fc648:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
 23fc64c:	20c8      	movs	r0, #200	; 0xc8
 23fc64e:	f001 b859 	b.w	23fd704 <delay>
    } else if(connection == TFT_SOFT_SPI) {
 23fc652:	2d01      	cmp	r5, #1
 23fc654:	d120      	bne.n	23fc698 <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
 23fc656:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fc65a:	4629      	mov	r1, r5
 23fc65c:	b280      	uxth	r0, r0
 23fc65e:	f001 fe63 	bl	23fe328 <pinMode>
        digitalWrite(swspi._mosi, LOW);
 23fc662:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fc666:	2100      	movs	r1, #0
 23fc668:	b280      	uxth	r0, r0
 23fc66a:	f001 fe6e 	bl	23fe34a <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
 23fc66e:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc672:	4629      	mov	r1, r5
 23fc674:	b280      	uxth	r0, r0
 23fc676:	f001 fe57 	bl	23fe328 <pinMode>
        digitalWrite(swspi._sck, LOW);
 23fc67a:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc67e:	2100      	movs	r1, #0
 23fc680:	b280      	uxth	r0, r0
 23fc682:	f001 fe62 	bl	23fe34a <digitalWrite>
        if(swspi._miso >= 0) {
 23fc686:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc68a:	2800      	cmp	r0, #0
 23fc68c:	dbbc      	blt.n	23fc608 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
 23fc68e:	2100      	movs	r1, #0
 23fc690:	b280      	uxth	r0, r0
 23fc692:	f001 fe49 	bl	23fe328 <pinMode>
 23fc696:	e7b7      	b.n	23fc608 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
 23fc698:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc69c:	2101      	movs	r1, #1
 23fc69e:	b280      	uxth	r0, r0
 23fc6a0:	f001 fe42 	bl	23fe328 <pinMode>
        digitalWrite(tft8._wr, HIGH);
 23fc6a4:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc6a8:	2101      	movs	r1, #1
 23fc6aa:	b280      	uxth	r0, r0
 23fc6ac:	f001 fe4d 	bl	23fe34a <digitalWrite>
        if(tft8._rd >= 0) {
 23fc6b0:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc6b4:	2800      	cmp	r0, #0
 23fc6b6:	dba7      	blt.n	23fc608 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
 23fc6b8:	2101      	movs	r1, #1
 23fc6ba:	b280      	uxth	r0, r0
 23fc6bc:	f001 fe34 	bl	23fe328 <pinMode>
            digitalWrite(tft8._rd, HIGH);
 23fc6c0:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc6c4:	2101      	movs	r1, #1
 23fc6c6:	b280      	uxth	r0, r0
 23fc6c8:	f001 fe3f 	bl	23fe34a <digitalWrite>
 23fc6cc:	e79c      	b.n	23fc608 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
 23fc6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc6d0:	00f42400 	.word	0x00f42400

023fc6d4 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fc6d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fc6d8:	b923      	cbnz	r3, 23fc6e4 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
 23fc6da:	f100 0128 	add.w	r1, r0, #40	; 0x28
 23fc6de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fc6e0:	f001 bb96 	b.w	23fde10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
 23fc6e4:	4770      	bx	lr

023fc6e6 <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
 23fc6e6:	b510      	push	{r4, lr}
 23fc6e8:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
 23fc6ea:	f7ff fff3 	bl	23fc6d4 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
 23fc6ee:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fc6f2:	2800      	cmp	r0, #0
 23fc6f4:	db05      	blt.n	23fc702 <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
 23fc6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
 23fc6fa:	2100      	movs	r1, #0
 23fc6fc:	b280      	uxth	r0, r0
 23fc6fe:	f001 be24 	b.w	23fe34a <digitalWrite>
 23fc702:	bd10      	pop	{r4, pc}

023fc704 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fc704:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fc708:	b913      	cbnz	r3, 23fc710 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
 23fc70a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fc70c:	f001 bb66 	b.w	23fdddc <_ZN8SPIClass14endTransactionEv>
}
 23fc710:	4770      	bx	lr

023fc712 <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
 23fc712:	b510      	push	{r4, lr}
 23fc714:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
 23fc716:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
 23fc71a:	2800      	cmp	r0, #0
 23fc71c:	db03      	blt.n	23fc726 <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
 23fc71e:	2101      	movs	r1, #1
 23fc720:	b280      	uxth	r0, r0
 23fc722:	f001 fe12 	bl	23fe34a <digitalWrite>
    SPI_END_TRANSACTION();
 23fc726:	4620      	mov	r0, r4
 23fc728:	f7ff ffec 	bl	23fc704 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
 23fc72c:	bd10      	pop	{r4, pc}

023fc72e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
 23fc72e:	b510      	push	{r4, lr}
 23fc730:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
 23fc732:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 23fc736:	2100      	movs	r1, #0
 23fc738:	b280      	uxth	r0, r0
 23fc73a:	f001 fe06 	bl	23fe34a <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
 23fc73e:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc742:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
 23fc744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
 23fc748:	b280      	uxth	r0, r0
 23fc74a:	f001 bdfe 	b.w	23fe34a <digitalWrite>

023fc74e <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
 23fc74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc752:	4605      	mov	r5, r0
 23fc754:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
 23fc756:	4614      	mov	r4, r2
 23fc758:	b17a      	cbz	r2, 23fc77a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
 23fc75a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
 23fc75e:	ea4f 2811 	mov.w	r8, r1, lsr #8
 23fc762:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
 23fc764:	b95b      	cbnz	r3, 23fc77e <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
 23fc766:	4641      	mov	r1, r8
 23fc768:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fc76a:	f001 fbbf 	bl	23fdeec <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
 23fc76e:	4639      	mov	r1, r7
 23fc770:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fc772:	f001 fbbb 	bl	23fdeec <_ZN8SPIClass8transferEh>
        while(len--) {
 23fc776:	3c01      	subs	r4, #1
 23fc778:	d1f5      	bne.n	23fc766 <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
 23fc77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
 23fc77e:	2b01      	cmp	r3, #1
 23fc780:	d11e      	bne.n	23fc7c0 <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc782:	46b0      	mov	r8, r6
 23fc784:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
 23fc786:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 23fc78a:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fc78e:	d014      	beq.n	23fc7ba <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
 23fc790:	f7ff feac 	bl	23fc4ec <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
 23fc794:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc798:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
 23fc79a:	f7ff fe9f 	bl	23fc4dc <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
 23fc79e:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
 23fc7a2:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc7a6:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
 23fc7a8:	f7ff fe94 	bl	23fc4d4 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
 23fc7ac:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc7b0:	2f00      	cmp	r7, #0
 23fc7b2:	d1e8      	bne.n	23fc786 <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
 23fc7b4:	3c01      	subs	r4, #1
 23fc7b6:	d1e4      	bne.n	23fc782 <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
 23fc7b8:	e7df      	b.n	23fc77a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
 23fc7ba:	f7ff fe93 	bl	23fc4e4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fc7be:	e7e9      	b.n	23fc794 <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
 23fc7c0:	45b8      	cmp	r8, r7
 23fc7c2:	d0da      	beq.n	23fc77a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
 23fc7c4:	4628      	mov	r0, r5
 23fc7c6:	f7ff ffb2 	bl	23fc72e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
 23fc7ca:	3c01      	subs	r4, #1
 23fc7cc:	d1fa      	bne.n	23fc7c4 <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
 23fc7ce:	e7d4      	b.n	23fc77a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

023fc7d0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fc7d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fc7d4:	461d      	mov	r5, r3
 23fc7d6:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
 23fc7d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  int16_t w, int16_t h, uint16_t color) {
 23fc7dc:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
 23fc7e0:	9300      	str	r3, [sp, #0]
 23fc7e2:	6803      	ldr	r3, [r0, #0]
 23fc7e4:	b292      	uxth	r2, r2
 23fc7e6:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 23fc7ea:	b289      	uxth	r1, r1
 23fc7ec:	b2ab      	uxth	r3, r5
  int16_t w, int16_t h, uint16_t color) {
 23fc7ee:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
 23fc7f2:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
 23fc7f4:	4631      	mov	r1, r6
 23fc7f6:	4620      	mov	r0, r4
 23fc7f8:	fb05 f207 	mul.w	r2, r5, r7
}
 23fc7fc:	b002      	add	sp, #8
 23fc7fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
 23fc802:	f7ff bfa4 	b.w	23fc74e <_ZN15Adafruit_SPITFT10writeColorEtm>

023fc806 <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fc806:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fc80a:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
 23fc80e:	2b00      	cmp	r3, #0
 23fc810:	d046      	beq.n	23fc8a0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
 23fc812:	2c00      	cmp	r4, #0
 23fc814:	d044      	beq.n	23fc8a0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
 23fc816:	2b00      	cmp	r3, #0
 23fc818:	da05      	bge.n	23fc826 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
 23fc81a:	3101      	adds	r1, #1
 23fc81c:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
 23fc820:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
 23fc822:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
 23fc824:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
 23fc826:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 23fc82a:	428e      	cmp	r6, r1
 23fc82c:	dd38      	ble.n	23fc8a0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
 23fc82e:	2c00      	cmp	r4, #0
 23fc830:	da05      	bge.n	23fc83e <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
 23fc832:	3201      	adds	r2, #1
 23fc834:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
 23fc838:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
 23fc83a:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
 23fc83c:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
 23fc83e:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 23fc842:	4295      	cmp	r5, r2
 23fc844:	dd2c      	ble.n	23fc8a0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
 23fc846:	eb01 0803 	add.w	r8, r1, r3
 23fc84a:	fa1f f888 	uxth.w	r8, r8
 23fc84e:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 23fc852:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
 23fc856:	f1bc 0f00 	cmp.w	ip, #0
 23fc85a:	db21      	blt.n	23fc8a0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
 23fc85c:	eb02 0e04 	add.w	lr, r2, r4
 23fc860:	fa1f fe8e 	uxth.w	lr, lr
 23fc864:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
 23fc868:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
 23fc86a:	2f00      	cmp	r7, #0
 23fc86c:	db18      	blt.n	23fc8a0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fc86e:	2900      	cmp	r1, #0
 23fc870:	bfbc      	itt	lt
 23fc872:	2100      	movlt	r1, #0
 23fc874:	fa0f f388 	sxthlt.w	r3, r8
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fc878:	2a00      	cmp	r2, #0
 23fc87a:	bfbc      	itt	lt
 23fc87c:	2200      	movlt	r2, #0
 23fc87e:	fa0f f48e 	sxthlt.w	r4, lr
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc882:	4566      	cmp	r6, ip
 23fc884:	bfdc      	itt	le
 23fc886:	1a73      	suble	r3, r6, r1
 23fc888:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc88a:	42bd      	cmp	r5, r7
 23fc88c:	bfd8      	it	le
 23fc88e:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
 23fc890:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc894:	bfd8      	it	le
 23fc896:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
 23fc898:	e9cd 4500 	strd	r4, r5, [sp]
 23fc89c:	f7ff ff98 	bl	23fc7d0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fc8a0:	b002      	add	sp, #8
 23fc8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc8a6 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
 23fc8a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fc8aa:	4680      	mov	r8, r0
 23fc8ac:	460c      	mov	r4, r1
 23fc8ae:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
 23fc8b0:	461e      	mov	r6, r3
  uint16_t color) {
 23fc8b2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fc8b6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if(w && h) {                            // Nonzero width and height?
 23fc8ba:	2b00      	cmp	r3, #0
 23fc8bc:	d052      	beq.n	23fc964 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
 23fc8be:	2f00      	cmp	r7, #0
 23fc8c0:	d050      	beq.n	23fc964 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
 23fc8c2:	2b00      	cmp	r3, #0
 23fc8c4:	da05      	bge.n	23fc8d2 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
 23fc8c6:	3401      	adds	r4, #1
 23fc8c8:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
 23fc8cc:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
 23fc8ce:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
 23fc8d0:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
 23fc8d2:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 23fc8d6:	42a3      	cmp	r3, r4
 23fc8d8:	dd44      	ble.n	23fc964 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
 23fc8da:	2f00      	cmp	r7, #0
 23fc8dc:	da05      	bge.n	23fc8ea <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
 23fc8de:	3501      	adds	r5, #1
 23fc8e0:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
 23fc8e4:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
 23fc8e6:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
 23fc8e8:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
 23fc8ea:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 23fc8ee:	42aa      	cmp	r2, r5
 23fc8f0:	dd38      	ble.n	23fc964 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
 23fc8f2:	eb04 0e06 	add.w	lr, r4, r6
 23fc8f6:	fa1f fe8e 	uxth.w	lr, lr
 23fc8fa:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 23fc8fe:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
 23fc900:	2800      	cmp	r0, #0
 23fc902:	db2f      	blt.n	23fc964 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
 23fc904:	eb05 0c07 	add.w	ip, r5, r7
 23fc908:	fa1f fc8c 	uxth.w	ip, ip
 23fc90c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 23fc910:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
 23fc912:	2900      	cmp	r1, #0
 23fc914:	db26      	blt.n	23fc964 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fc916:	2c00      	cmp	r4, #0
 23fc918:	bfbc      	itt	lt
 23fc91a:	2400      	movlt	r4, #0
 23fc91c:	fa0f f68e 	sxthlt.w	r6, lr
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fc920:	2d00      	cmp	r5, #0
 23fc922:	bfbc      	itt	lt
 23fc924:	2500      	movlt	r5, #0
 23fc926:	fa0f f78c 	sxthlt.w	r7, ip
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc92a:	4283      	cmp	r3, r0
 23fc92c:	bfdc      	itt	le
 23fc92e:	1b1b      	suble	r3, r3, r4
 23fc930:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc932:	428a      	cmp	r2, r1
                        startWrite();
 23fc934:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc938:	bfdc      	itt	le
 23fc93a:	1b52      	suble	r2, r2, r5
 23fc93c:	b217      	sxthle	r7, r2
                        startWrite();
 23fc93e:	4640      	mov	r0, r8
 23fc940:	695b      	ldr	r3, [r3, #20]
 23fc942:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
 23fc944:	4633      	mov	r3, r6
 23fc946:	4640      	mov	r0, r8
 23fc948:	462a      	mov	r2, r5
 23fc94a:	4621      	mov	r1, r4
 23fc94c:	e9cd 7900 	strd	r7, r9, [sp]
 23fc950:	f7ff ff3e 	bl	23fc7d0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
 23fc954:	4640      	mov	r0, r8
 23fc956:	f8d8 3000 	ldr.w	r3, [r8]
 23fc95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc95c:	b003      	add	sp, #12
 23fc95e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
 23fc962:	4718      	bx	r3
}
 23fc964:	b003      	add	sp, #12
 23fc966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fc96a <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
 23fc96a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fc96e:	1e17      	subs	r7, r2, #0
  uint16_t color) {
 23fc970:	4606      	mov	r6, r0
 23fc972:	460c      	mov	r4, r1
 23fc974:	461d      	mov	r5, r3
 23fc976:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fc97a:	db33      	blt.n	23fc9e4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fc97c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fc980:	42bb      	cmp	r3, r7
 23fc982:	dd2f      	ble.n	23fc9e4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fc984:	2d00      	cmp	r5, #0
 23fc986:	d02d      	beq.n	23fc9e4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
 23fc988:	da05      	bge.n	23fc996 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
 23fc98a:	3401      	adds	r4, #1
 23fc98c:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
 23fc990:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
 23fc992:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
 23fc994:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
 23fc996:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 23fc99a:	42a3      	cmp	r3, r4
 23fc99c:	dd22      	ble.n	23fc9e4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
 23fc99e:	1961      	adds	r1, r4, r5
 23fc9a0:	b289      	uxth	r1, r1
 23fc9a2:	1e4a      	subs	r2, r1, #1
 23fc9a4:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
 23fc9a6:	2a00      	cmp	r2, #0
 23fc9a8:	db1c      	blt.n	23fc9e4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fc9aa:	2c00      	cmp	r4, #0
 23fc9ac:	bfbc      	itt	lt
 23fc9ae:	2400      	movlt	r4, #0
 23fc9b0:	b20d      	sxthlt	r5, r1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc9b2:	4293      	cmp	r3, r2
 23fc9b4:	bfdc      	itt	le
 23fc9b6:	1b1b      	suble	r3, r3, r4
 23fc9b8:	b21d      	sxthle	r5, r3
                startWrite();
 23fc9ba:	6833      	ldr	r3, [r6, #0]
 23fc9bc:	4630      	mov	r0, r6
 23fc9be:	695b      	ldr	r3, [r3, #20]
 23fc9c0:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fc9c2:	2301      	movs	r3, #1
 23fc9c4:	4630      	mov	r0, r6
 23fc9c6:	9300      	str	r3, [sp, #0]
 23fc9c8:	463a      	mov	r2, r7
 23fc9ca:	462b      	mov	r3, r5
 23fc9cc:	4621      	mov	r1, r4
 23fc9ce:	f8cd 8004 	str.w	r8, [sp, #4]
 23fc9d2:	f7ff fefd 	bl	23fc7d0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fc9d6:	4630      	mov	r0, r6
 23fc9d8:	6833      	ldr	r3, [r6, #0]
 23fc9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc9dc:	b002      	add	sp, #8
 23fc9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fc9e2:	4718      	bx	r3
}
 23fc9e4:	b002      	add	sp, #8
 23fc9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc9ea <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
 23fc9ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fc9ee:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
 23fc9f0:	4606      	mov	r6, r0
 23fc9f2:	4614      	mov	r4, r2
 23fc9f4:	461d      	mov	r5, r3
 23fc9f6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fc9fa:	db31      	blt.n	23fca60 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fc9fc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fca00:	42bb      	cmp	r3, r7
 23fca02:	dd2d      	ble.n	23fca60 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fca04:	2d00      	cmp	r5, #0
 23fca06:	d02b      	beq.n	23fca60 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
 23fca08:	da05      	bge.n	23fca16 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
 23fca0a:	3401      	adds	r4, #1
 23fca0c:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
 23fca10:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
 23fca12:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
 23fca14:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
 23fca16:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 23fca1a:	42a3      	cmp	r3, r4
 23fca1c:	dd20      	ble.n	23fca60 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
 23fca1e:	1961      	adds	r1, r4, r5
 23fca20:	b289      	uxth	r1, r1
 23fca22:	1e4a      	subs	r2, r1, #1
 23fca24:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
 23fca26:	2a00      	cmp	r2, #0
 23fca28:	db1a      	blt.n	23fca60 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fca2a:	2c00      	cmp	r4, #0
 23fca2c:	bfbc      	itt	lt
 23fca2e:	2400      	movlt	r4, #0
 23fca30:	b20d      	sxthlt	r5, r1
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fca32:	4293      	cmp	r3, r2
 23fca34:	bfdc      	itt	le
 23fca36:	1b1b      	suble	r3, r3, r4
 23fca38:	b21d      	sxthle	r5, r3
                startWrite();
 23fca3a:	6833      	ldr	r3, [r6, #0]
 23fca3c:	4630      	mov	r0, r6
 23fca3e:	695b      	ldr	r3, [r3, #20]
 23fca40:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fca42:	4630      	mov	r0, r6
 23fca44:	2301      	movs	r3, #1
 23fca46:	4622      	mov	r2, r4
 23fca48:	4639      	mov	r1, r7
 23fca4a:	e9cd 5800 	strd	r5, r8, [sp]
 23fca4e:	f7ff febf 	bl	23fc7d0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fca52:	4630      	mov	r0, r6
 23fca54:	6833      	ldr	r3, [r6, #0]
 23fca56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fca58:	b002      	add	sp, #8
 23fca5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fca5e:	4718      	bx	r3
}
 23fca60:	b002      	add	sp, #8
 23fca62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fca66 <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fca66:	2a00      	cmp	r2, #0
  uint16_t color) {
 23fca68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fca6a:	db26      	blt.n	23fcaba <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fca6c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fca70:	4294      	cmp	r4, r2
 23fca72:	dd22      	ble.n	23fcaba <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fca74:	2b00      	cmp	r3, #0
 23fca76:	d020      	beq.n	23fcaba <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
        if(w < 0) {                      // If negative width...
 23fca78:	da05      	bge.n	23fca86 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
 23fca7a:	3101      	adds	r1, #1
 23fca7c:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
 23fca80:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
 23fca82:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
 23fca84:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
 23fca86:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fca8a:	428c      	cmp	r4, r1
 23fca8c:	dd15      	ble.n	23fcaba <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
            int16_t x2 = x + w - 1;
 23fca8e:	18ce      	adds	r6, r1, r3
 23fca90:	b2b6      	uxth	r6, r6
 23fca92:	1e75      	subs	r5, r6, #1
 23fca94:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
 23fca96:	2d00      	cmp	r5, #0
 23fca98:	db0f      	blt.n	23fcaba <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fca9a:	2900      	cmp	r1, #0
 23fca9c:	bfbc      	itt	lt
 23fca9e:	2100      	movlt	r1, #0
 23fcaa0:	b233      	sxthlt	r3, r6
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fcaa2:	42ac      	cmp	r4, r5
 23fcaa4:	bfd8      	it	le
 23fcaa6:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
 23fcaa8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fcaac:	bfd8      	it	le
 23fcaae:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fcab0:	9401      	str	r4, [sp, #4]
 23fcab2:	2401      	movs	r4, #1
 23fcab4:	9400      	str	r4, [sp, #0]
 23fcab6:	f7ff fe8b 	bl	23fc7d0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fcaba:	b002      	add	sp, #8
 23fcabc:	bd70      	pop	{r4, r5, r6, pc}

023fcabe <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
 23fcabe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fcac0:	2900      	cmp	r1, #0
 23fcac2:	db26      	blt.n	23fcb12 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fcac4:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fcac8:	428c      	cmp	r4, r1
 23fcaca:	dd22      	ble.n	23fcb12 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fcacc:	2b00      	cmp	r3, #0
 23fcace:	d020      	beq.n	23fcb12 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
 23fcad0:	da05      	bge.n	23fcade <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
 23fcad2:	3201      	adds	r2, #1
 23fcad4:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
 23fcad8:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
 23fcada:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
 23fcadc:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
 23fcade:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fcae2:	4294      	cmp	r4, r2
 23fcae4:	dd15      	ble.n	23fcb12 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
 23fcae6:	18d6      	adds	r6, r2, r3
 23fcae8:	b2b6      	uxth	r6, r6
 23fcaea:	1e75      	subs	r5, r6, #1
 23fcaec:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
 23fcaee:	2d00      	cmp	r5, #0
 23fcaf0:	db0f      	blt.n	23fcb12 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fcaf2:	2a00      	cmp	r2, #0
 23fcaf4:	bfbc      	itt	lt
 23fcaf6:	2200      	movlt	r2, #0
 23fcaf8:	b233      	sxthlt	r3, r6
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fcafa:	42ac      	cmp	r4, r5
 23fcafc:	bfd8      	it	le
 23fcafe:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
 23fcb00:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fcb04:	bfd8      	it	le
 23fcb06:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fcb08:	e9cd 3400 	strd	r3, r4, [sp]
 23fcb0c:	2301      	movs	r3, #1
 23fcb0e:	f7ff fe5f 	bl	23fc7d0 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fcb12:	b002      	add	sp, #8
 23fcb14:	bd70      	pop	{r4, r5, r6, pc}

023fcb16 <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fcb16:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fcb18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fcb1c:	4604      	mov	r4, r0
 23fcb1e:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fcb20:	b923      	cbnz	r3, 23fcb2c <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
 23fcb22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
 23fcb26:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fcb28:	f001 b9e0 	b.w	23fdeec <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fcb2c:	2b01      	cmp	r3, #1
 23fcb2e:	d118      	bne.n	23fcb62 <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
 23fcb30:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
 23fcb32:	062b      	lsls	r3, r5, #24
 23fcb34:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fcb38:	d510      	bpl.n	23fcb5c <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
 23fcb3a:	f7ff fcd7 	bl	23fc4ec <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fcb3e:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fcb42:	f7ff fccb 	bl	23fc4dc <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
 23fcb46:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fcb48:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fcb4c:	f7ff fcc2 	bl	23fc4d4 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
 23fcb50:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
 23fcb52:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
 23fcb56:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
 23fcb58:	d1eb      	bne.n	23fcb32 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
 23fcb5a:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
 23fcb5c:	f7ff fcc2 	bl	23fc4e4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fcb60:	e7ed      	b.n	23fcb3e <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
 23fcb62:	f7ff fde4 	bl	23fc72e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fcb66:	e7f8      	b.n	23fcb5a <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

023fcb68 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fcb68:	b513      	push	{r0, r1, r4, lr}
 23fcb6a:	4604      	mov	r4, r0
    SPI_DC_LOW();
 23fcb6c:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fcb70:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
 23fcb72:	f7ff fcbf 	bl	23fc4f4 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
 23fcb76:	4620      	mov	r0, r4
 23fcb78:	9901      	ldr	r1, [sp, #4]
 23fcb7a:	f7ff ffcc 	bl	23fcb16 <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
 23fcb7e:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
 23fcb82:	b002      	add	sp, #8
 23fcb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
 23fcb88:	f7ff bcb8 	b.w	23fc4fc <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

023fcb8c <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fcb8c:	b570      	push	{r4, r5, r6, lr}
 23fcb8e:	460d      	mov	r5, r1
    startWrite();
 23fcb90:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fcb92:	4604      	mov	r4, r0
    startWrite();
 23fcb94:	695b      	ldr	r3, [r3, #20]
 23fcb96:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fcb98:	b155      	cbz	r5, 23fcbb0 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
 23fcb9a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 23fcb9e:	4620      	mov	r0, r4
 23fcba0:	f7ff ffe2 	bl	23fcb68 <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
 23fcba4:	6823      	ldr	r3, [r4, #0]
 23fcba6:	4620      	mov	r0, r4
}
 23fcba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
 23fcbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcbae:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fcbb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 23fcbb4:	e7f3      	b.n	23fcb9e <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

023fcbb6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fcbb6:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fcbb8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fcbbc:	4605      	mov	r5, r0
 23fcbbe:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
 23fcbc0:	b94b      	cbnz	r3, 23fcbd6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
 23fcbc2:	0a09      	lsrs	r1, r1, #8
 23fcbc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fcbc6:	f001 f991 	bl	23fdeec <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
 23fcbca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fcbcc:	b2e1      	uxtb	r1, r4
}
 23fcbce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
 23fcbd2:	f001 b98b 	b.w	23fdeec <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fcbd6:	2b01      	cmp	r3, #1
 23fcbd8:	d118      	bne.n	23fcc0c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
 23fcbda:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
 23fcbdc:	0423      	lsls	r3, r4, #16
 23fcbde:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fcbe2:	d510      	bpl.n	23fcc06 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
 23fcbe4:	f7ff fc82 	bl	23fc4ec <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fcbe8:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fcbec:	f7ff fc76 	bl	23fc4dc <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
 23fcbf0:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fcbf2:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fcbf6:	f7ff fc6d 	bl	23fc4d4 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
 23fcbfa:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
 23fcbfc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
 23fcc00:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
 23fcc02:	d1eb      	bne.n	23fcbdc <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
 23fcc04:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
 23fcc06:	f7ff fc6d 	bl	23fc4e4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fcc0a:	e7ed      	b.n	23fcbe8 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
 23fcc0c:	f7ff fd8f 	bl	23fc72e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fcc10:	e7f8      	b.n	23fcc04 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

023fcc12 <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fcc12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fcc14:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fcc16:	4604      	mov	r4, r0
 23fcc18:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fcc1a:	db17      	blt.n	23fcc4c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fcc1c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fcc20:	428b      	cmp	r3, r1
 23fcc22:	dd13      	ble.n	23fcc4c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fcc24:	2a00      	cmp	r2, #0
 23fcc26:	db11      	blt.n	23fcc4c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fcc28:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fcc2c:	4293      	cmp	r3, r2
 23fcc2e:	dd0d      	ble.n	23fcc4c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
 23fcc30:	2301      	movs	r3, #1
 23fcc32:	6805      	ldr	r5, [r0, #0]
 23fcc34:	9300      	str	r3, [sp, #0]
 23fcc36:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 23fcc38:	b292      	uxth	r2, r2
 23fcc3a:	b289      	uxth	r1, r1
 23fcc3c:	47b8      	blx	r7
        SPI_WRITE16(color);
 23fcc3e:	4631      	mov	r1, r6
 23fcc40:	4620      	mov	r0, r4
}
 23fcc42:	b003      	add	sp, #12
 23fcc44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
 23fcc48:	f7ff bfb5 	b.w	23fcbb6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
 23fcc4c:	b003      	add	sp, #12
 23fcc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fcc50 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fcc50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fcc54:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fcc56:	4604      	mov	r4, r0
 23fcc58:	4616      	mov	r6, r2
 23fcc5a:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fcc5c:	db20      	blt.n	23fcca0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fcc5e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fcc62:	42ab      	cmp	r3, r5
 23fcc64:	dd1c      	ble.n	23fcca0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fcc66:	2a00      	cmp	r2, #0
 23fcc68:	db1a      	blt.n	23fcca0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fcc6a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fcc6e:	4293      	cmp	r3, r2
 23fcc70:	dd16      	ble.n	23fcca0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
 23fcc72:	6803      	ldr	r3, [r0, #0]
 23fcc74:	695b      	ldr	r3, [r3, #20]
 23fcc76:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
 23fcc78:	2301      	movs	r3, #1
 23fcc7a:	6822      	ldr	r2, [r4, #0]
 23fcc7c:	9300      	str	r3, [sp, #0]
 23fcc7e:	4620      	mov	r0, r4
 23fcc80:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
 23fcc84:	b2a9      	uxth	r1, r5
 23fcc86:	b2b2      	uxth	r2, r6
 23fcc88:	47c0      	blx	r8
        SPI_WRITE16(color);
 23fcc8a:	4620      	mov	r0, r4
 23fcc8c:	4639      	mov	r1, r7
 23fcc8e:	f7ff ff92 	bl	23fcbb6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
 23fcc92:	4620      	mov	r0, r4
 23fcc94:	6823      	ldr	r3, [r4, #0]
 23fcc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fcc98:	b002      	add	sp, #8
 23fcc9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
 23fcc9e:	4718      	bx	r3
}
 23fcca0:	b002      	add	sp, #8
 23fcca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fcca6 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fcca6:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fcca8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fccac:	4604      	mov	r4, r0
 23fccae:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fccb0:	b99b      	cbnz	r3, 23fccda <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
 23fccb2:	0e09      	lsrs	r1, r1, #24
 23fccb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fccb6:	f001 f919 	bl	23fdeec <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
 23fccba:	f3c5 4107 	ubfx	r1, r5, #16, #8
 23fccbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fccc0:	f001 f914 	bl	23fdeec <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
 23fccc4:	f3c5 2107 	ubfx	r1, r5, #8, #8
 23fccc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fccca:	f001 f90f 	bl	23fdeec <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
 23fccce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fccd0:	b2e9      	uxtb	r1, r5
}
 23fccd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
 23fccd6:	f001 b909 	b.w	23fdeec <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fccda:	2b01      	cmp	r3, #1
 23fccdc:	d118      	bne.n	23fcd10 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
 23fccde:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
 23fcce0:	2d00      	cmp	r5, #0
 23fcce2:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fcce6:	da10      	bge.n	23fcd0a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
 23fcce8:	f7ff fc00 	bl	23fc4ec <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fccec:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fccf0:	f7ff fbf4 	bl	23fc4dc <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fccf4:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fccf6:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fccfa:	f7ff fbeb 	bl	23fc4d4 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fccfe:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
 23fcd02:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
 23fcd06:	d1eb      	bne.n	23fcce0 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
 23fcd08:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
 23fcd0a:	f7ff fbeb 	bl	23fc4e4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fcd0e:	e7ed      	b.n	23fccec <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
 23fcd10:	f7ff fd0d 	bl	23fc72e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fcd14:	e7f8      	b.n	23fcd08 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

023fcd16 <_ZN15Adafruit_ST7789D1Ev>:
#define _ADAFRUIT_ST7789H_

#include "../lib/Adafruit_ST7735_RK/src/Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 23fcd16:	4770      	bx	lr

023fcd18 <_ZN15Adafruit_ST778911setRotationEh>:
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 23fcd18:	f001 0103 	and.w	r1, r1, #3

  switch (rotation) {
 23fcd1c:	2902      	cmp	r1, #2
void Adafruit_ST7789::setRotation(uint8_t m) {
 23fcd1e:	b570      	push	{r4, r5, r6, lr}
 23fcd20:	4604      	mov	r4, r0
  rotation = m & 3; // can't be higher than 3
 23fcd22:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 23fcd24:	d024      	beq.n	23fcd70 <_ZN15Adafruit_ST778911setRotationEh+0x58>
 23fcd26:	2903      	cmp	r1, #3
 23fcd28:	d025      	beq.n	23fcd76 <_ZN15Adafruit_ST778911setRotationEh+0x5e>
 23fcd2a:	2901      	cmp	r1, #1
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fcd2c:	bf14      	ite	ne
 23fcd2e:	25c0      	movne	r5, #192	; 0xc0
     _xstart = _colstart;
     _ystart = _rowstart;
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fcd30:	25a0      	moveq	r5, #160	; 0xa0
 23fcd32:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23fcd36:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
     _xstart = _colstart;
 23fcd3a:	bf19      	ittee	ne
 23fcd3c:	f8a0 3040 	strhne.w	r3, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fcd40:	f8a0 2042 	strhne.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fcd44:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
     _ystart = _colstart;
 23fcd48:	f8a0 3042 	strheq.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = 0;
     _ystart = 0;
     break;
  }
  startWrite();
 23fcd4c:	6823      	ldr	r3, [r4, #0]
 23fcd4e:	4620      	mov	r0, r4
 23fcd50:	695b      	ldr	r3, [r3, #20]
 23fcd52:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fcd54:	4620      	mov	r0, r4
 23fcd56:	2136      	movs	r1, #54	; 0x36
 23fcd58:	f7ff ff06 	bl	23fcb68 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fcd5c:	4620      	mov	r0, r4
 23fcd5e:	4629      	mov	r1, r5
 23fcd60:	f7ff fed9 	bl	23fcb16 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fcd64:	6823      	ldr	r3, [r4, #0]
 23fcd66:	4620      	mov	r0, r4
}
 23fcd68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fcd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcd6e:	4718      	bx	r3
     _xstart = 0;
 23fcd70:	2500      	movs	r5, #0
 23fcd72:	6405      	str	r5, [r0, #64]	; 0x40
     break;
 23fcd74:	e7ea      	b.n	23fcd4c <_ZN15Adafruit_ST778911setRotationEh+0x34>
     _xstart = 0;
 23fcd76:	2300      	movs	r3, #0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fcd78:	2560      	movs	r5, #96	; 0x60
     _xstart = 0;
 23fcd7a:	6403      	str	r3, [r0, #64]	; 0x40
     break;
 23fcd7c:	e7e6      	b.n	23fcd4c <_ZN15Adafruit_ST778911setRotationEh+0x34>

023fcd7e <_ZN15Adafruit_ST7789D0Ev>:
 23fcd7e:	b510      	push	{r4, lr}
 23fcd80:	4604      	mov	r4, r0
 23fcd82:	2150      	movs	r1, #80	; 0x50
 23fcd84:	f7fe fc8f 	bl	23fb6a6 <_ZdlPvj>
 23fcd88:	4620      	mov	r0, r4
 23fcd8a:	bd10      	pop	{r4, pc}

023fcd8c <_ZN15Adafruit_ST7789C1Eaaa>:
Adafruit_ST7789::Adafruit_ST7789(int8_t cs, int8_t dc, int8_t rst) :
 23fcd8c:	b510      	push	{r4, lr}
 23fcd8e:	4604      	mov	r4, r0
  Adafruit_ST77xx(cs, dc, rst) {
 23fcd90:	f000 f89a 	bl	23fcec8 <_ZN15Adafruit_ST77xxC1Eaaa>
 23fcd94:	4b01      	ldr	r3, [pc, #4]	; (23fcd9c <_ZN15Adafruit_ST7789C1Eaaa+0x10>)
}
 23fcd96:	4620      	mov	r0, r4
  Adafruit_ST77xx(cs, dc, rst) {
 23fcd98:	6023      	str	r3, [r4, #0]
}
 23fcd9a:	bd10      	pop	{r4, pc}
 23fcd9c:	023ffd18 	.word	0x023ffd18

023fcda0 <_ZN15Adafruit_ST77894initEtt>:
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
 23fcda0:	b510      	push	{r4, lr}
  commonInit(NULL);
 23fcda2:	2100      	movs	r1, #0
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
 23fcda4:	4604      	mov	r4, r0
  commonInit(NULL);
 23fcda6:	f000 f8e6 	bl	23fcf76 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  _colstart = ST7789_240x240_XSTART;
 23fcdaa:	2300      	movs	r3, #0
 23fcdac:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  _width    = 320;
 23fcdb0:	4b06      	ldr	r3, [pc, #24]	; (23fcdcc <_ZN15Adafruit_ST77894initEtt+0x2c>)
  displayInit(cmd_240x240);
 23fcdb2:	4620      	mov	r0, r4
  _width    = 320;
 23fcdb4:	60e3      	str	r3, [r4, #12]
  displayInit(cmd_240x240);
 23fcdb6:	4906      	ldr	r1, [pc, #24]	; (23fcdd0 <_ZN15Adafruit_ST77894initEtt+0x30>)
 23fcdb8:	f000 f89a 	bl	23fcef0 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(1);
 23fcdbc:	6823      	ldr	r3, [r4, #0]
 23fcdbe:	4620      	mov	r0, r4
}
 23fcdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setRotation(1);
 23fcdc4:	2101      	movs	r1, #1
 23fcdc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcdc8:	4718      	bx	r3
 23fcdca:	bf00      	nop
 23fcdcc:	00f00140 	.word	0x00f00140
 23fcdd0:	023ffcec 	.word	0x023ffcec

023fcdd4 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA    0xF81F
#define ST77XX_YELLOW     0xFFE0
#define	ST77XX_ORANGE     0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 23fcdd4:	4770      	bx	lr

023fcdd6 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fcdd6:	b570      	push	{r4, r5, r6, lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 23fcdd8:	f001 0103 	and.w	r1, r1, #3

  switch(rotation) {
 23fcddc:	2902      	cmp	r1, #2
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fcdde:	4604      	mov	r4, r0
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
 23fcde0:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
     _ystart = _rowstart;
 23fcde4:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  rotation = m % 4; // can't be higher than 3
 23fcde8:	7681      	strb	r1, [r0, #26]
  switch(rotation) {
 23fcdea:	d020      	beq.n	23fce2e <_ZN15Adafruit_ST77xx11setRotationEh+0x58>
 23fcdec:	2903      	cmp	r1, #3
 23fcdee:	d024      	beq.n	23fce3a <_ZN15Adafruit_ST77xx11setRotationEh+0x64>
 23fcdf0:	2901      	cmp	r1, #1
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fcdf2:	bf17      	itett	ne
 23fcdf4:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fcdf6:	25a0      	moveq	r5, #160	; 0xa0
     _xstart = _colstart;
 23fcdf8:	f8a0 2040 	strhne.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fcdfc:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
     _ystart = _colstart;
 23fce00:	bf04      	itt	eq
 23fce02:	f8a0 2042 	strheq.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fce06:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
     _xstart = _rowstart;
     break;
  }
  startWrite();
 23fce0a:	6823      	ldr	r3, [r4, #0]
 23fce0c:	4620      	mov	r0, r4
 23fce0e:	695b      	ldr	r3, [r3, #20]
 23fce10:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fce12:	4620      	mov	r0, r4
 23fce14:	2136      	movs	r1, #54	; 0x36
 23fce16:	f7ff fea7 	bl	23fcb68 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fce1a:	4620      	mov	r0, r4
 23fce1c:	4629      	mov	r1, r5
 23fce1e:	f7ff fe7a 	bl	23fcb16 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fce22:	6823      	ldr	r3, [r4, #0]
 23fce24:	4620      	mov	r0, r4
}
 23fce26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fce2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fce2c:	4718      	bx	r3
     madctl  = ST77XX_MADCTL_RGB;
 23fce2e:	2500      	movs	r5, #0
     _xstart = _colstart;
 23fce30:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fce34:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
     break;
 23fce38:	e7e7      	b.n	23fce0a <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fce3a:	2560      	movs	r5, #96	; 0x60
     _ystart = _colstart;
 23fce3c:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fce40:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
     break;
 23fce44:	e7e1      	b.n	23fce0a <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
	...

023fce48 <_ZN15Adafruit_ST77xx5beginEm>:
    freq = SPI_DEFAULT_FREQ;
 23fce48:	4b06      	ldr	r3, [pc, #24]	; (23fce64 <_ZN15Adafruit_ST77xx5beginEm+0x1c>)
  initSPI(freq);
 23fce4a:	2200      	movs	r2, #0
    freq = SPI_DEFAULT_FREQ;
 23fce4c:	2900      	cmp	r1, #0
 23fce4e:	bf18      	it	ne
 23fce50:	460b      	movne	r3, r1
  invertOnCommand  = ST77XX_INVON;
 23fce52:	f242 0121 	movw	r1, #8225	; 0x2021
  _freq = freq;
 23fce56:	6483      	str	r3, [r0, #72]	; 0x48
  invertOnCommand  = ST77XX_INVON;
 23fce58:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
  initSPI(freq);
 23fce5c:	4619      	mov	r1, r3
 23fce5e:	f7ff bba3 	b.w	23fc5a8 <_ZN15Adafruit_SPITFT7initSPIEmh>
 23fce62:	bf00      	nop
 23fce64:	00f42400 	.word	0x00f42400

023fce68 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  uint16_t h) {
 23fce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fce6a:	4604      	mov	r4, r0
  x += _xstart;
 23fce6c:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
  y += _ystart;
 23fce70:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  uint16_t h) {
 23fce74:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  x += _xstart;
 23fce78:	4439      	add	r1, r7
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fce7a:	fa13 f781 	uxtah	r7, r3, r1
  y += _ystart;
 23fce7e:	442a      	add	r2, r5
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fce80:	fa16 f582 	uxtah	r5, r6, r2
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fce84:	3f01      	subs	r7, #1
 23fce86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fce8a:	3d01      	subs	r5, #1
  writeCommand(ST77XX_CASET); // Column addr set
 23fce8c:	212a      	movs	r1, #42	; 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fce8e:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 23fce92:	f7ff fe69 	bl	23fcb68 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 23fce96:	4639      	mov	r1, r7
 23fce98:	4620      	mov	r0, r4
 23fce9a:	f7ff ff04 	bl	23fcca6 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RASET); // Row addr set
 23fce9e:	4620      	mov	r0, r4
 23fcea0:	212b      	movs	r1, #43	; 0x2b
 23fcea2:	f7ff fe61 	bl	23fcb68 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 23fcea6:	4629      	mov	r1, r5
 23fcea8:	4620      	mov	r0, r4
 23fceaa:	f7ff fefc 	bl	23fcca6 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fceae:	4620      	mov	r0, r4
}
 23fceb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fceb4:	212c      	movs	r1, #44	; 0x2c
 23fceb6:	f7ff be57 	b.w	23fcb68 <_ZN15Adafruit_SPITFT12writeCommandEh>

023fceba <_ZN15Adafruit_ST77xxD0Ev>:
 23fceba:	b510      	push	{r4, lr}
 23fcebc:	4604      	mov	r4, r0
 23fcebe:	2150      	movs	r1, #80	; 0x50
 23fcec0:	f7fe fbf1 	bl	23fb6a6 <_ZdlPvj>
 23fcec4:	4620      	mov	r0, r4
 23fcec6:	bd10      	pop	{r4, pc}

023fcec8 <_ZN15Adafruit_ST77xxC1Eaaa>:
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
 23fcec8:	b513      	push	{r0, r1, r4, lr}
 23fceca:	4604      	mov	r4, r0
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fcecc:	e9cd 2300 	strd	r2, r3, [sp]
 23fced0:	460b      	mov	r3, r1
 23fced2:	22a0      	movs	r2, #160	; 0xa0
 23fced4:	2180      	movs	r1, #128	; 0x80
 23fced6:	f7ff fb37 	bl	23fc548 <_ZN15Adafruit_SPITFTC1Ettaaa>
 23fceda:	4b04      	ldr	r3, [pc, #16]	; (23fceec <_ZN15Adafruit_ST77xxC1Eaaa+0x24>)
}
 23fcedc:	4620      	mov	r0, r4
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fcede:	6023      	str	r3, [r4, #0]
 23fcee0:	2300      	movs	r3, #0
 23fcee2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
}
 23fcee6:	b002      	add	sp, #8
 23fcee8:	bd10      	pop	{r4, pc}
 23fceea:	bf00      	nop
 23fceec:	023ffd78 	.word	0x023ffd78

023fcef0 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fcef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fcef4:	460c      	mov	r4, r1
  startWrite();
 23fcef6:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fcef8:	4605      	mov	r5, r0
  startWrite();
 23fcefa:	695b      	ldr	r3, [r3, #20]
 23fcefc:	4798      	blx	r3
  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 23fcefe:	f814 7b01 	ldrb.w	r7, [r4], #1
  while(numCommands--) {                 // For each command...
 23fcf02:	b397      	cbz	r7, 23fcf6a <_ZN15Adafruit_ST77xx11displayInitEPKh+0x7a>
    writeCommand(pgm_read_byte(addr++)); // Read, issue command
 23fcf04:	4626      	mov	r6, r4
 23fcf06:	4628      	mov	r0, r5
 23fcf08:	f816 1b02 	ldrb.w	r1, [r6], #2
 23fcf0c:	f7ff fe2c 	bl	23fcb68 <_ZN15Adafruit_SPITFT12writeCommandEh>
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
 23fcf10:	f894 9001 	ldrb.w	r9, [r4, #1]
 23fcf14:	46b2      	mov	sl, r6
    numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 23fcf16:	f009 087f 	and.w	r8, r9, #127	; 0x7f
 23fcf1a:	4644      	mov	r4, r8
    while(numArgs--) {                   // For each argument...
 23fcf1c:	3c01      	subs	r4, #1
 23fcf1e:	b2e4      	uxtb	r4, r4
 23fcf20:	2cff      	cmp	r4, #255	; 0xff
 23fcf22:	d005      	beq.n	23fcf30 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x40>
      spiWrite(pgm_read_byte(addr++));   // Read, issue argument
 23fcf24:	4628      	mov	r0, r5
 23fcf26:	f81a 1b01 	ldrb.w	r1, [sl], #1
 23fcf2a:	f7ff fdf4 	bl	23fcb16 <_ZN15Adafruit_SPITFT8spiWriteEh>
    while(numArgs--) {                   // For each argument...
 23fcf2e:	e7f5      	b.n	23fcf1c <_ZN15Adafruit_ST77xx11displayInitEPKh+0x2c>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   |= csPinMaskSet;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, HIGH);
 23fcf30:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fcf34:	2101      	movs	r1, #1
 23fcf36:	b280      	uxth	r0, r0
 23fcf38:	f001 fa07 	bl	23fe34a <digitalWrite>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   &= csPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, LOW);
 23fcf3c:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fcf40:	2100      	movs	r1, #0
 23fcf42:	b280      	uxth	r0, r0
 23fcf44:	f001 fa01 	bl	23fe34a <digitalWrite>
    if(ms) {
 23fcf48:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fcf4c:	eb06 0408 	add.w	r4, r6, r8
 23fcf50:	d008      	beq.n	23fcf64 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x74>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 23fcf52:	f816 0008 	ldrb.w	r0, [r6, r8]
 23fcf56:	3401      	adds	r4, #1
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 23fcf58:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
 23fcf5a:	bf08      	it	eq
 23fcf5c:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 23fcf60:	f000 fbd0 	bl	23fd704 <delay>
 23fcf64:	3f01      	subs	r7, #1
 23fcf66:	b2ff      	uxtb	r7, r7
 23fcf68:	e7cb      	b.n	23fcf02 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x12>
  endWrite();
 23fcf6a:	682b      	ldr	r3, [r5, #0]
 23fcf6c:	4628      	mov	r0, r5
}
 23fcf6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fcf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcf74:	4718      	bx	r3

023fcf76 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fcf76:	b538      	push	{r3, r4, r5, lr}
 23fcf78:	460d      	mov	r5, r1
  begin();
 23fcf7a:	6803      	ldr	r3, [r0, #0]
 23fcf7c:	2100      	movs	r1, #0
 23fcf7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fcf80:	4604      	mov	r4, r0
  begin();
 23fcf82:	4798      	blx	r3
  if(cmdList) {
 23fcf84:	b12d      	cbz	r5, 23fcf92 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
    displayInit(cmdList);
 23fcf86:	4629      	mov	r1, r5
 23fcf88:	4620      	mov	r0, r4
}
 23fcf8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    displayInit(cmdList);
 23fcf8e:	f7ff bfaf 	b.w	23fcef0 <_ZN15Adafruit_ST77xx11displayInitEPKh>
}
 23fcf92:	bd38      	pop	{r3, r4, r5, pc}

023fcf94 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fcf94:	b509      	push	{r0, r3, lr}
 23fcf96:	4804      	ldr	r0, [pc, #16]	; (23fcfa8 <os_mutex_recursive_create+0x14>)
 23fcf98:	6800      	ldr	r0, [r0, #0]
 23fcf9a:	4b04      	ldr	r3, [pc, #16]	; (23fcfac <os_mutex_recursive_create+0x18>)
 23fcf9c:	4403      	add	r3, r0
 23fcf9e:	681b      	ldr	r3, [r3, #0]
 23fcfa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcfa2:	9302      	str	r3, [sp, #8]
 23fcfa4:	bd09      	pop	{r0, r3, pc}
 23fcfa6:	0000      	.short	0x0000
 23fcfa8:	1007ad84 	.word	0x1007ad84
 23fcfac:	00000030 	.word	0x00000030

023fcfb0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fcfb0:	b509      	push	{r0, r3, lr}
 23fcfb2:	4804      	ldr	r0, [pc, #16]	; (23fcfc4 <HAL_RNG_GetRandomNumber+0x14>)
 23fcfb4:	6800      	ldr	r0, [r0, #0]
 23fcfb6:	4b04      	ldr	r3, [pc, #16]	; (23fcfc8 <HAL_RNG_GetRandomNumber+0x18>)
 23fcfb8:	4403      	add	r3, r0
 23fcfba:	681b      	ldr	r3, [r3, #0]
 23fcfbc:	685b      	ldr	r3, [r3, #4]
 23fcfbe:	9302      	str	r3, [sp, #8]
 23fcfc0:	bd09      	pop	{r0, r3, pc}
 23fcfc2:	0000      	.short	0x0000
 23fcfc4:	1007ad84 	.word	0x1007ad84
 23fcfc8:	00000000 	.word	0x00000000

023fcfcc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fcfcc:	b509      	push	{r0, r3, lr}
 23fcfce:	4804      	ldr	r0, [pc, #16]	; (23fcfe0 <HAL_Delay_Microseconds+0x14>)
 23fcfd0:	6800      	ldr	r0, [r0, #0]
 23fcfd2:	4b04      	ldr	r3, [pc, #16]	; (23fcfe4 <HAL_Delay_Microseconds+0x18>)
 23fcfd4:	4403      	add	r3, r0
 23fcfd6:	681b      	ldr	r3, [r3, #0]
 23fcfd8:	68db      	ldr	r3, [r3, #12]
 23fcfda:	9302      	str	r3, [sp, #8]
 23fcfdc:	bd09      	pop	{r0, r3, pc}
 23fcfde:	0000      	.short	0x0000
 23fcfe0:	1007ad84 	.word	0x1007ad84
 23fcfe4:	00000000 	.word	0x00000000

023fcfe8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fcfe8:	b509      	push	{r0, r3, lr}
 23fcfea:	4804      	ldr	r0, [pc, #16]	; (23fcffc <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fcfec:	6800      	ldr	r0, [r0, #0]
 23fcfee:	4b04      	ldr	r3, [pc, #16]	; (23fd000 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fcff0:	4403      	add	r3, r0
 23fcff2:	681b      	ldr	r3, [r3, #0]
 23fcff4:	695b      	ldr	r3, [r3, #20]
 23fcff6:	9302      	str	r3, [sp, #8]
 23fcff8:	bd09      	pop	{r0, r3, pc}
 23fcffa:	0000      	.short	0x0000
 23fcffc:	1007ad84 	.word	0x1007ad84
 23fd000:	00000000 	.word	0x00000000

023fd004 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fd004:	b509      	push	{r0, r3, lr}
 23fd006:	4804      	ldr	r0, [pc, #16]	; (23fd018 <hal_pin_validate_function+0x14>)
 23fd008:	6800      	ldr	r0, [r0, #0]
 23fd00a:	4b04      	ldr	r3, [pc, #16]	; (23fd01c <hal_pin_validate_function+0x18>)
 23fd00c:	4403      	add	r3, r0
 23fd00e:	681b      	ldr	r3, [r3, #0]
 23fd010:	685b      	ldr	r3, [r3, #4]
 23fd012:	9302      	str	r3, [sp, #8]
 23fd014:	bd09      	pop	{r0, r3, pc}
 23fd016:	0000      	.short	0x0000
 23fd018:	1007ad84 	.word	0x1007ad84
 23fd01c:	00000014 	.word	0x00000014

023fd020 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fd020:	b509      	push	{r0, r3, lr}
 23fd022:	4804      	ldr	r0, [pc, #16]	; (23fd034 <hal_gpio_mode+0x14>)
 23fd024:	6800      	ldr	r0, [r0, #0]
 23fd026:	4b04      	ldr	r3, [pc, #16]	; (23fd038 <hal_gpio_mode+0x18>)
 23fd028:	4403      	add	r3, r0
 23fd02a:	681b      	ldr	r3, [r3, #0]
 23fd02c:	689b      	ldr	r3, [r3, #8]
 23fd02e:	9302      	str	r3, [sp, #8]
 23fd030:	bd09      	pop	{r0, r3, pc}
 23fd032:	0000      	.short	0x0000
 23fd034:	1007ad84 	.word	0x1007ad84
 23fd038:	00000014 	.word	0x00000014

023fd03c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fd03c:	b509      	push	{r0, r3, lr}
 23fd03e:	4804      	ldr	r0, [pc, #16]	; (23fd050 <hal_gpio_get_mode+0x14>)
 23fd040:	6800      	ldr	r0, [r0, #0]
 23fd042:	4b04      	ldr	r3, [pc, #16]	; (23fd054 <hal_gpio_get_mode+0x18>)
 23fd044:	4403      	add	r3, r0
 23fd046:	681b      	ldr	r3, [r3, #0]
 23fd048:	68db      	ldr	r3, [r3, #12]
 23fd04a:	9302      	str	r3, [sp, #8]
 23fd04c:	bd09      	pop	{r0, r3, pc}
 23fd04e:	0000      	.short	0x0000
 23fd050:	1007ad84 	.word	0x1007ad84
 23fd054:	00000014 	.word	0x00000014

023fd058 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fd058:	b509      	push	{r0, r3, lr}
 23fd05a:	4804      	ldr	r0, [pc, #16]	; (23fd06c <hal_gpio_write+0x14>)
 23fd05c:	6800      	ldr	r0, [r0, #0]
 23fd05e:	4b04      	ldr	r3, [pc, #16]	; (23fd070 <hal_gpio_write+0x18>)
 23fd060:	4403      	add	r3, r0
 23fd062:	681b      	ldr	r3, [r3, #0]
 23fd064:	691b      	ldr	r3, [r3, #16]
 23fd066:	9302      	str	r3, [sp, #8]
 23fd068:	bd09      	pop	{r0, r3, pc}
 23fd06a:	0000      	.short	0x0000
 23fd06c:	1007ad84 	.word	0x1007ad84
 23fd070:	00000014 	.word	0x00000014

023fd074 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fd074:	b509      	push	{r0, r3, lr}
 23fd076:	4804      	ldr	r0, [pc, #16]	; (23fd088 <hal_adc_read+0x14>)
 23fd078:	6800      	ldr	r0, [r0, #0]
 23fd07a:	4b04      	ldr	r3, [pc, #16]	; (23fd08c <hal_adc_read+0x18>)
 23fd07c:	4403      	add	r3, r0
 23fd07e:	681b      	ldr	r3, [r3, #0]
 23fd080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd082:	9302      	str	r3, [sp, #8]
 23fd084:	bd09      	pop	{r0, r3, pc}
 23fd086:	0000      	.short	0x0000
 23fd088:	1007ad84 	.word	0x1007ad84
 23fd08c:	00000014 	.word	0x00000014

023fd090 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fd090:	b509      	push	{r0, r3, lr}
 23fd092:	4804      	ldr	r0, [pc, #16]	; (23fd0a4 <hal_i2c_begin+0x14>)
 23fd094:	6800      	ldr	r0, [r0, #0]
 23fd096:	4b04      	ldr	r3, [pc, #16]	; (23fd0a8 <hal_i2c_begin+0x18>)
 23fd098:	4403      	add	r3, r0
 23fd09a:	681b      	ldr	r3, [r3, #0]
 23fd09c:	68db      	ldr	r3, [r3, #12]
 23fd09e:	9302      	str	r3, [sp, #8]
 23fd0a0:	bd09      	pop	{r0, r3, pc}
 23fd0a2:	0000      	.short	0x0000
 23fd0a4:	1007ad84 	.word	0x1007ad84
 23fd0a8:	00000010 	.word	0x00000010

023fd0ac <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fd0ac:	b509      	push	{r0, r3, lr}
 23fd0ae:	4804      	ldr	r0, [pc, #16]	; (23fd0c0 <hal_i2c_begin_transmission+0x14>)
 23fd0b0:	6800      	ldr	r0, [r0, #0]
 23fd0b2:	4b04      	ldr	r3, [pc, #16]	; (23fd0c4 <hal_i2c_begin_transmission+0x18>)
 23fd0b4:	4403      	add	r3, r0
 23fd0b6:	681b      	ldr	r3, [r3, #0]
 23fd0b8:	699b      	ldr	r3, [r3, #24]
 23fd0ba:	9302      	str	r3, [sp, #8]
 23fd0bc:	bd09      	pop	{r0, r3, pc}
 23fd0be:	0000      	.short	0x0000
 23fd0c0:	1007ad84 	.word	0x1007ad84
 23fd0c4:	00000010 	.word	0x00000010

023fd0c8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fd0c8:	b509      	push	{r0, r3, lr}
 23fd0ca:	4804      	ldr	r0, [pc, #16]	; (23fd0dc <hal_i2c_end_transmission+0x14>)
 23fd0cc:	6800      	ldr	r0, [r0, #0]
 23fd0ce:	4b04      	ldr	r3, [pc, #16]	; (23fd0e0 <hal_i2c_end_transmission+0x18>)
 23fd0d0:	4403      	add	r3, r0
 23fd0d2:	681b      	ldr	r3, [r3, #0]
 23fd0d4:	69db      	ldr	r3, [r3, #28]
 23fd0d6:	9302      	str	r3, [sp, #8]
 23fd0d8:	bd09      	pop	{r0, r3, pc}
 23fd0da:	0000      	.short	0x0000
 23fd0dc:	1007ad84 	.word	0x1007ad84
 23fd0e0:	00000010 	.word	0x00000010

023fd0e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fd0e4:	b509      	push	{r0, r3, lr}
 23fd0e6:	4804      	ldr	r0, [pc, #16]	; (23fd0f8 <hal_i2c_write+0x14>)
 23fd0e8:	6800      	ldr	r0, [r0, #0]
 23fd0ea:	4b04      	ldr	r3, [pc, #16]	; (23fd0fc <hal_i2c_write+0x18>)
 23fd0ec:	4403      	add	r3, r0
 23fd0ee:	681b      	ldr	r3, [r3, #0]
 23fd0f0:	6a1b      	ldr	r3, [r3, #32]
 23fd0f2:	9302      	str	r3, [sp, #8]
 23fd0f4:	bd09      	pop	{r0, r3, pc}
 23fd0f6:	0000      	.short	0x0000
 23fd0f8:	1007ad84 	.word	0x1007ad84
 23fd0fc:	00000010 	.word	0x00000010

023fd100 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fd100:	b509      	push	{r0, r3, lr}
 23fd102:	4804      	ldr	r0, [pc, #16]	; (23fd114 <hal_i2c_available+0x14>)
 23fd104:	6800      	ldr	r0, [r0, #0]
 23fd106:	4b04      	ldr	r3, [pc, #16]	; (23fd118 <hal_i2c_available+0x18>)
 23fd108:	4403      	add	r3, r0
 23fd10a:	681b      	ldr	r3, [r3, #0]
 23fd10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd10e:	9302      	str	r3, [sp, #8]
 23fd110:	bd09      	pop	{r0, r3, pc}
 23fd112:	0000      	.short	0x0000
 23fd114:	1007ad84 	.word	0x1007ad84
 23fd118:	00000010 	.word	0x00000010

023fd11c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fd11c:	b509      	push	{r0, r3, lr}
 23fd11e:	4804      	ldr	r0, [pc, #16]	; (23fd130 <hal_i2c_read+0x14>)
 23fd120:	6800      	ldr	r0, [r0, #0]
 23fd122:	4b04      	ldr	r3, [pc, #16]	; (23fd134 <hal_i2c_read+0x18>)
 23fd124:	4403      	add	r3, r0
 23fd126:	681b      	ldr	r3, [r3, #0]
 23fd128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd12a:	9302      	str	r3, [sp, #8]
 23fd12c:	bd09      	pop	{r0, r3, pc}
 23fd12e:	0000      	.short	0x0000
 23fd130:	1007ad84 	.word	0x1007ad84
 23fd134:	00000010 	.word	0x00000010

023fd138 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fd138:	b509      	push	{r0, r3, lr}
 23fd13a:	4804      	ldr	r0, [pc, #16]	; (23fd14c <hal_i2c_peek+0x14>)
 23fd13c:	6800      	ldr	r0, [r0, #0]
 23fd13e:	4b04      	ldr	r3, [pc, #16]	; (23fd150 <hal_i2c_peek+0x18>)
 23fd140:	4403      	add	r3, r0
 23fd142:	681b      	ldr	r3, [r3, #0]
 23fd144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd146:	9302      	str	r3, [sp, #8]
 23fd148:	bd09      	pop	{r0, r3, pc}
 23fd14a:	0000      	.short	0x0000
 23fd14c:	1007ad84 	.word	0x1007ad84
 23fd150:	00000010 	.word	0x00000010

023fd154 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fd154:	b509      	push	{r0, r3, lr}
 23fd156:	4804      	ldr	r0, [pc, #16]	; (23fd168 <hal_i2c_flush+0x14>)
 23fd158:	6800      	ldr	r0, [r0, #0]
 23fd15a:	4b04      	ldr	r3, [pc, #16]	; (23fd16c <hal_i2c_flush+0x18>)
 23fd15c:	4403      	add	r3, r0
 23fd15e:	681b      	ldr	r3, [r3, #0]
 23fd160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd162:	9302      	str	r3, [sp, #8]
 23fd164:	bd09      	pop	{r0, r3, pc}
 23fd166:	0000      	.short	0x0000
 23fd168:	1007ad84 	.word	0x1007ad84
 23fd16c:	00000010 	.word	0x00000010

023fd170 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fd170:	b509      	push	{r0, r3, lr}
 23fd172:	4804      	ldr	r0, [pc, #16]	; (23fd184 <hal_i2c_is_enabled+0x14>)
 23fd174:	6800      	ldr	r0, [r0, #0]
 23fd176:	4b04      	ldr	r3, [pc, #16]	; (23fd188 <hal_i2c_is_enabled+0x18>)
 23fd178:	4403      	add	r3, r0
 23fd17a:	681b      	ldr	r3, [r3, #0]
 23fd17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd17e:	9302      	str	r3, [sp, #8]
 23fd180:	bd09      	pop	{r0, r3, pc}
 23fd182:	0000      	.short	0x0000
 23fd184:	1007ad84 	.word	0x1007ad84
 23fd188:	00000010 	.word	0x00000010

023fd18c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fd18c:	b509      	push	{r0, r3, lr}
 23fd18e:	4804      	ldr	r0, [pc, #16]	; (23fd1a0 <hal_i2c_init+0x14>)
 23fd190:	6800      	ldr	r0, [r0, #0]
 23fd192:	4b04      	ldr	r3, [pc, #16]	; (23fd1a4 <hal_i2c_init+0x18>)
 23fd194:	4403      	add	r3, r0
 23fd196:	681b      	ldr	r3, [r3, #0]
 23fd198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd19a:	9302      	str	r3, [sp, #8]
 23fd19c:	bd09      	pop	{r0, r3, pc}
 23fd19e:	0000      	.short	0x0000
 23fd1a0:	1007ad84 	.word	0x1007ad84
 23fd1a4:	00000010 	.word	0x00000010

023fd1a8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fd1a8:	b509      	push	{r0, r3, lr}
 23fd1aa:	4804      	ldr	r0, [pc, #16]	; (23fd1bc <hal_i2c_request_ex+0x14>)
 23fd1ac:	6800      	ldr	r0, [r0, #0]
 23fd1ae:	4b04      	ldr	r3, [pc, #16]	; (23fd1c0 <hal_i2c_request_ex+0x18>)
 23fd1b0:	4403      	add	r3, r0
 23fd1b2:	681b      	ldr	r3, [r3, #0]
 23fd1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fd1b6:	9302      	str	r3, [sp, #8]
 23fd1b8:	bd09      	pop	{r0, r3, pc}
 23fd1ba:	0000      	.short	0x0000
 23fd1bc:	1007ad84 	.word	0x1007ad84
 23fd1c0:	00000010 	.word	0x00000010

023fd1c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fd1c4:	b509      	push	{r0, r3, lr}
 23fd1c6:	4804      	ldr	r0, [pc, #16]	; (23fd1d8 <inet_inet_ntop+0x14>)
 23fd1c8:	6800      	ldr	r0, [r0, #0]
 23fd1ca:	4b04      	ldr	r3, [pc, #16]	; (23fd1dc <inet_inet_ntop+0x18>)
 23fd1cc:	4403      	add	r3, r0
 23fd1ce:	681b      	ldr	r3, [r3, #0]
 23fd1d0:	695b      	ldr	r3, [r3, #20]
 23fd1d2:	9302      	str	r3, [sp, #8]
 23fd1d4:	bd09      	pop	{r0, r3, pc}
 23fd1d6:	0000      	.short	0x0000
 23fd1d8:	1007ad84 	.word	0x1007ad84
 23fd1dc:	0000004c 	.word	0x0000004c

023fd1e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fd1e0:	b509      	push	{r0, r3, lr}
 23fd1e2:	4804      	ldr	r0, [pc, #16]	; (23fd1f4 <netdb_freeaddrinfo+0x14>)
 23fd1e4:	6800      	ldr	r0, [r0, #0]
 23fd1e6:	4b04      	ldr	r3, [pc, #16]	; (23fd1f8 <netdb_freeaddrinfo+0x18>)
 23fd1e8:	4403      	add	r3, r0
 23fd1ea:	681b      	ldr	r3, [r3, #0]
 23fd1ec:	689b      	ldr	r3, [r3, #8]
 23fd1ee:	9302      	str	r3, [sp, #8]
 23fd1f0:	bd09      	pop	{r0, r3, pc}
 23fd1f2:	0000      	.short	0x0000
 23fd1f4:	1007ad84 	.word	0x1007ad84
 23fd1f8:	00000050 	.word	0x00000050

023fd1fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fd1fc:	b509      	push	{r0, r3, lr}
 23fd1fe:	4804      	ldr	r0, [pc, #16]	; (23fd210 <netdb_getaddrinfo+0x14>)
 23fd200:	6800      	ldr	r0, [r0, #0]
 23fd202:	4b04      	ldr	r3, [pc, #16]	; (23fd214 <netdb_getaddrinfo+0x18>)
 23fd204:	4403      	add	r3, r0
 23fd206:	681b      	ldr	r3, [r3, #0]
 23fd208:	68db      	ldr	r3, [r3, #12]
 23fd20a:	9302      	str	r3, [sp, #8]
 23fd20c:	bd09      	pop	{r0, r3, pc}
 23fd20e:	0000      	.short	0x0000
 23fd210:	1007ad84 	.word	0x1007ad84
 23fd214:	00000050 	.word	0x00000050

023fd218 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fd218:	b509      	push	{r0, r3, lr}
 23fd21a:	4804      	ldr	r0, [pc, #16]	; (23fd22c <hal_spi_begin+0x14>)
 23fd21c:	6800      	ldr	r0, [r0, #0]
 23fd21e:	4b04      	ldr	r3, [pc, #16]	; (23fd230 <hal_spi_begin+0x18>)
 23fd220:	4403      	add	r3, r0
 23fd222:	681b      	ldr	r3, [r3, #0]
 23fd224:	681b      	ldr	r3, [r3, #0]
 23fd226:	9302      	str	r3, [sp, #8]
 23fd228:	bd09      	pop	{r0, r3, pc}
 23fd22a:	0000      	.short	0x0000
 23fd22c:	1007ad84 	.word	0x1007ad84
 23fd230:	00000018 	.word	0x00000018

023fd234 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fd234:	b509      	push	{r0, r3, lr}
 23fd236:	4804      	ldr	r0, [pc, #16]	; (23fd248 <hal_spi_transfer+0x14>)
 23fd238:	6800      	ldr	r0, [r0, #0]
 23fd23a:	4b04      	ldr	r3, [pc, #16]	; (23fd24c <hal_spi_transfer+0x18>)
 23fd23c:	4403      	add	r3, r0
 23fd23e:	681b      	ldr	r3, [r3, #0]
 23fd240:	695b      	ldr	r3, [r3, #20]
 23fd242:	9302      	str	r3, [sp, #8]
 23fd244:	bd09      	pop	{r0, r3, pc}
 23fd246:	0000      	.short	0x0000
 23fd248:	1007ad84 	.word	0x1007ad84
 23fd24c:	00000018 	.word	0x00000018

023fd250 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fd250:	b509      	push	{r0, r3, lr}
 23fd252:	4804      	ldr	r0, [pc, #16]	; (23fd264 <hal_spi_init+0x14>)
 23fd254:	6800      	ldr	r0, [r0, #0]
 23fd256:	4b04      	ldr	r3, [pc, #16]	; (23fd268 <hal_spi_init+0x18>)
 23fd258:	4403      	add	r3, r0
 23fd25a:	681b      	ldr	r3, [r3, #0]
 23fd25c:	69db      	ldr	r3, [r3, #28]
 23fd25e:	9302      	str	r3, [sp, #8]
 23fd260:	bd09      	pop	{r0, r3, pc}
 23fd262:	0000      	.short	0x0000
 23fd264:	1007ad84 	.word	0x1007ad84
 23fd268:	00000018 	.word	0x00000018

023fd26c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fd26c:	b509      	push	{r0, r3, lr}
 23fd26e:	4804      	ldr	r0, [pc, #16]	; (23fd280 <hal_spi_is_enabled+0x14>)
 23fd270:	6800      	ldr	r0, [r0, #0]
 23fd272:	4b04      	ldr	r3, [pc, #16]	; (23fd284 <hal_spi_is_enabled+0x18>)
 23fd274:	4403      	add	r3, r0
 23fd276:	681b      	ldr	r3, [r3, #0]
 23fd278:	6a1b      	ldr	r3, [r3, #32]
 23fd27a:	9302      	str	r3, [sp, #8]
 23fd27c:	bd09      	pop	{r0, r3, pc}
 23fd27e:	0000      	.short	0x0000
 23fd280:	1007ad84 	.word	0x1007ad84
 23fd284:	00000018 	.word	0x00000018

023fd288 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fd288:	b509      	push	{r0, r3, lr}
 23fd28a:	4804      	ldr	r0, [pc, #16]	; (23fd29c <hal_spi_info+0x14>)
 23fd28c:	6800      	ldr	r0, [r0, #0]
 23fd28e:	4b04      	ldr	r3, [pc, #16]	; (23fd2a0 <hal_spi_info+0x18>)
 23fd290:	4403      	add	r3, r0
 23fd292:	681b      	ldr	r3, [r3, #0]
 23fd294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd296:	9302      	str	r3, [sp, #8]
 23fd298:	bd09      	pop	{r0, r3, pc}
 23fd29a:	0000      	.short	0x0000
 23fd29c:	1007ad84 	.word	0x1007ad84
 23fd2a0:	00000018 	.word	0x00000018

023fd2a4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fd2a4:	b509      	push	{r0, r3, lr}
 23fd2a6:	4804      	ldr	r0, [pc, #16]	; (23fd2b8 <hal_spi_set_settings+0x14>)
 23fd2a8:	6800      	ldr	r0, [r0, #0]
 23fd2aa:	4b04      	ldr	r3, [pc, #16]	; (23fd2bc <hal_spi_set_settings+0x18>)
 23fd2ac:	4403      	add	r3, r0
 23fd2ae:	681b      	ldr	r3, [r3, #0]
 23fd2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd2b2:	9302      	str	r3, [sp, #8]
 23fd2b4:	bd09      	pop	{r0, r3, pc}
 23fd2b6:	0000      	.short	0x0000
 23fd2b8:	1007ad84 	.word	0x1007ad84
 23fd2bc:	00000018 	.word	0x00000018

023fd2c0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fd2c0:	b509      	push	{r0, r3, lr}
 23fd2c2:	4804      	ldr	r0, [pc, #16]	; (23fd2d4 <hal_spi_acquire+0x14>)
 23fd2c4:	6800      	ldr	r0, [r0, #0]
 23fd2c6:	4b04      	ldr	r3, [pc, #16]	; (23fd2d8 <hal_spi_acquire+0x18>)
 23fd2c8:	4403      	add	r3, r0
 23fd2ca:	681b      	ldr	r3, [r3, #0]
 23fd2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd2ce:	9302      	str	r3, [sp, #8]
 23fd2d0:	bd09      	pop	{r0, r3, pc}
 23fd2d2:	0000      	.short	0x0000
 23fd2d4:	1007ad84 	.word	0x1007ad84
 23fd2d8:	00000018 	.word	0x00000018

023fd2dc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fd2dc:	b509      	push	{r0, r3, lr}
 23fd2de:	4804      	ldr	r0, [pc, #16]	; (23fd2f0 <hal_spi_release+0x14>)
 23fd2e0:	6800      	ldr	r0, [r0, #0]
 23fd2e2:	4b04      	ldr	r3, [pc, #16]	; (23fd2f4 <hal_spi_release+0x18>)
 23fd2e4:	4403      	add	r3, r0
 23fd2e6:	681b      	ldr	r3, [r3, #0]
 23fd2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd2ea:	9302      	str	r3, [sp, #8]
 23fd2ec:	bd09      	pop	{r0, r3, pc}
 23fd2ee:	0000      	.short	0x0000
 23fd2f0:	1007ad84 	.word	0x1007ad84
 23fd2f4:	00000018 	.word	0x00000018

023fd2f8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fd2f8:	b509      	push	{r0, r3, lr}
 23fd2fa:	4804      	ldr	r0, [pc, #16]	; (23fd30c <hal_usart_write+0x14>)
 23fd2fc:	6800      	ldr	r0, [r0, #0]
 23fd2fe:	4b04      	ldr	r3, [pc, #16]	; (23fd310 <hal_usart_write+0x18>)
 23fd300:	4403      	add	r3, r0
 23fd302:	681b      	ldr	r3, [r3, #0]
 23fd304:	68db      	ldr	r3, [r3, #12]
 23fd306:	9302      	str	r3, [sp, #8]
 23fd308:	bd09      	pop	{r0, r3, pc}
 23fd30a:	0000      	.short	0x0000
 23fd30c:	1007ad84 	.word	0x1007ad84
 23fd310:	00000024 	.word	0x00000024

023fd314 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fd314:	b509      	push	{r0, r3, lr}
 23fd316:	4804      	ldr	r0, [pc, #16]	; (23fd328 <hal_usart_available+0x14>)
 23fd318:	6800      	ldr	r0, [r0, #0]
 23fd31a:	4b04      	ldr	r3, [pc, #16]	; (23fd32c <hal_usart_available+0x18>)
 23fd31c:	4403      	add	r3, r0
 23fd31e:	681b      	ldr	r3, [r3, #0]
 23fd320:	691b      	ldr	r3, [r3, #16]
 23fd322:	9302      	str	r3, [sp, #8]
 23fd324:	bd09      	pop	{r0, r3, pc}
 23fd326:	0000      	.short	0x0000
 23fd328:	1007ad84 	.word	0x1007ad84
 23fd32c:	00000024 	.word	0x00000024

023fd330 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fd330:	b509      	push	{r0, r3, lr}
 23fd332:	4804      	ldr	r0, [pc, #16]	; (23fd344 <hal_usart_read+0x14>)
 23fd334:	6800      	ldr	r0, [r0, #0]
 23fd336:	4b04      	ldr	r3, [pc, #16]	; (23fd348 <hal_usart_read+0x18>)
 23fd338:	4403      	add	r3, r0
 23fd33a:	681b      	ldr	r3, [r3, #0]
 23fd33c:	695b      	ldr	r3, [r3, #20]
 23fd33e:	9302      	str	r3, [sp, #8]
 23fd340:	bd09      	pop	{r0, r3, pc}
 23fd342:	0000      	.short	0x0000
 23fd344:	1007ad84 	.word	0x1007ad84
 23fd348:	00000024 	.word	0x00000024

023fd34c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fd34c:	b509      	push	{r0, r3, lr}
 23fd34e:	4804      	ldr	r0, [pc, #16]	; (23fd360 <hal_usart_peek+0x14>)
 23fd350:	6800      	ldr	r0, [r0, #0]
 23fd352:	4b04      	ldr	r3, [pc, #16]	; (23fd364 <hal_usart_peek+0x18>)
 23fd354:	4403      	add	r3, r0
 23fd356:	681b      	ldr	r3, [r3, #0]
 23fd358:	699b      	ldr	r3, [r3, #24]
 23fd35a:	9302      	str	r3, [sp, #8]
 23fd35c:	bd09      	pop	{r0, r3, pc}
 23fd35e:	0000      	.short	0x0000
 23fd360:	1007ad84 	.word	0x1007ad84
 23fd364:	00000024 	.word	0x00000024

023fd368 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fd368:	b509      	push	{r0, r3, lr}
 23fd36a:	4804      	ldr	r0, [pc, #16]	; (23fd37c <hal_usart_flush+0x14>)
 23fd36c:	6800      	ldr	r0, [r0, #0]
 23fd36e:	4b04      	ldr	r3, [pc, #16]	; (23fd380 <hal_usart_flush+0x18>)
 23fd370:	4403      	add	r3, r0
 23fd372:	681b      	ldr	r3, [r3, #0]
 23fd374:	69db      	ldr	r3, [r3, #28]
 23fd376:	9302      	str	r3, [sp, #8]
 23fd378:	bd09      	pop	{r0, r3, pc}
 23fd37a:	0000      	.short	0x0000
 23fd37c:	1007ad84 	.word	0x1007ad84
 23fd380:	00000024 	.word	0x00000024

023fd384 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fd384:	b509      	push	{r0, r3, lr}
 23fd386:	4804      	ldr	r0, [pc, #16]	; (23fd398 <hal_usart_is_enabled+0x14>)
 23fd388:	6800      	ldr	r0, [r0, #0]
 23fd38a:	4b04      	ldr	r3, [pc, #16]	; (23fd39c <hal_usart_is_enabled+0x18>)
 23fd38c:	4403      	add	r3, r0
 23fd38e:	681b      	ldr	r3, [r3, #0]
 23fd390:	6a1b      	ldr	r3, [r3, #32]
 23fd392:	9302      	str	r3, [sp, #8]
 23fd394:	bd09      	pop	{r0, r3, pc}
 23fd396:	0000      	.short	0x0000
 23fd398:	1007ad84 	.word	0x1007ad84
 23fd39c:	00000024 	.word	0x00000024

023fd3a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fd3a0:	b509      	push	{r0, r3, lr}
 23fd3a2:	4804      	ldr	r0, [pc, #16]	; (23fd3b4 <hal_usart_available_data_for_write+0x14>)
 23fd3a4:	6800      	ldr	r0, [r0, #0]
 23fd3a6:	4b04      	ldr	r3, [pc, #16]	; (23fd3b8 <hal_usart_available_data_for_write+0x18>)
 23fd3a8:	4403      	add	r3, r0
 23fd3aa:	681b      	ldr	r3, [r3, #0]
 23fd3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd3ae:	9302      	str	r3, [sp, #8]
 23fd3b0:	bd09      	pop	{r0, r3, pc}
 23fd3b2:	0000      	.short	0x0000
 23fd3b4:	1007ad84 	.word	0x1007ad84
 23fd3b8:	00000024 	.word	0x00000024

023fd3bc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fd3bc:	b509      	push	{r0, r3, lr}
 23fd3be:	4804      	ldr	r0, [pc, #16]	; (23fd3d0 <hal_usart_init_ex+0x14>)
 23fd3c0:	6800      	ldr	r0, [r0, #0]
 23fd3c2:	4b04      	ldr	r3, [pc, #16]	; (23fd3d4 <hal_usart_init_ex+0x18>)
 23fd3c4:	4403      	add	r3, r0
 23fd3c6:	681b      	ldr	r3, [r3, #0]
 23fd3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd3ca:	9302      	str	r3, [sp, #8]
 23fd3cc:	bd09      	pop	{r0, r3, pc}
 23fd3ce:	0000      	.short	0x0000
 23fd3d0:	1007ad84 	.word	0x1007ad84
 23fd3d4:	00000024 	.word	0x00000024

023fd3d8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fd3d8:	b509      	push	{r0, r3, lr}
 23fd3da:	4804      	ldr	r0, [pc, #16]	; (23fd3ec <HAL_USB_USART_Init+0x14>)
 23fd3dc:	6800      	ldr	r0, [r0, #0]
 23fd3de:	4b04      	ldr	r3, [pc, #16]	; (23fd3f0 <HAL_USB_USART_Init+0x18>)
 23fd3e0:	4403      	add	r3, r0
 23fd3e2:	681b      	ldr	r3, [r3, #0]
 23fd3e4:	681b      	ldr	r3, [r3, #0]
 23fd3e6:	9302      	str	r3, [sp, #8]
 23fd3e8:	bd09      	pop	{r0, r3, pc}
 23fd3ea:	0000      	.short	0x0000
 23fd3ec:	1007ad84 	.word	0x1007ad84
 23fd3f0:	00000034 	.word	0x00000034

023fd3f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fd3f4:	b509      	push	{r0, r3, lr}
 23fd3f6:	4804      	ldr	r0, [pc, #16]	; (23fd408 <HAL_USB_USART_Begin+0x14>)
 23fd3f8:	6800      	ldr	r0, [r0, #0]
 23fd3fa:	4b04      	ldr	r3, [pc, #16]	; (23fd40c <HAL_USB_USART_Begin+0x18>)
 23fd3fc:	4403      	add	r3, r0
 23fd3fe:	681b      	ldr	r3, [r3, #0]
 23fd400:	685b      	ldr	r3, [r3, #4]
 23fd402:	9302      	str	r3, [sp, #8]
 23fd404:	bd09      	pop	{r0, r3, pc}
 23fd406:	0000      	.short	0x0000
 23fd408:	1007ad84 	.word	0x1007ad84
 23fd40c:	00000034 	.word	0x00000034

023fd410 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fd410:	b509      	push	{r0, r3, lr}
 23fd412:	4804      	ldr	r0, [pc, #16]	; (23fd424 <HAL_USB_USART_Available_Data+0x14>)
 23fd414:	6800      	ldr	r0, [r0, #0]
 23fd416:	4b04      	ldr	r3, [pc, #16]	; (23fd428 <HAL_USB_USART_Available_Data+0x18>)
 23fd418:	4403      	add	r3, r0
 23fd41a:	681b      	ldr	r3, [r3, #0]
 23fd41c:	691b      	ldr	r3, [r3, #16]
 23fd41e:	9302      	str	r3, [sp, #8]
 23fd420:	bd09      	pop	{r0, r3, pc}
 23fd422:	0000      	.short	0x0000
 23fd424:	1007ad84 	.word	0x1007ad84
 23fd428:	00000034 	.word	0x00000034

023fd42c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fd42c:	b509      	push	{r0, r3, lr}
 23fd42e:	4804      	ldr	r0, [pc, #16]	; (23fd440 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fd430:	6800      	ldr	r0, [r0, #0]
 23fd432:	4b04      	ldr	r3, [pc, #16]	; (23fd444 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fd434:	4403      	add	r3, r0
 23fd436:	681b      	ldr	r3, [r3, #0]
 23fd438:	695b      	ldr	r3, [r3, #20]
 23fd43a:	9302      	str	r3, [sp, #8]
 23fd43c:	bd09      	pop	{r0, r3, pc}
 23fd43e:	0000      	.short	0x0000
 23fd440:	1007ad84 	.word	0x1007ad84
 23fd444:	00000034 	.word	0x00000034

023fd448 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd448:	b509      	push	{r0, r3, lr}
 23fd44a:	4804      	ldr	r0, [pc, #16]	; (23fd45c <HAL_USB_USART_Receive_Data+0x14>)
 23fd44c:	6800      	ldr	r0, [r0, #0]
 23fd44e:	4b04      	ldr	r3, [pc, #16]	; (23fd460 <HAL_USB_USART_Receive_Data+0x18>)
 23fd450:	4403      	add	r3, r0
 23fd452:	681b      	ldr	r3, [r3, #0]
 23fd454:	699b      	ldr	r3, [r3, #24]
 23fd456:	9302      	str	r3, [sp, #8]
 23fd458:	bd09      	pop	{r0, r3, pc}
 23fd45a:	0000      	.short	0x0000
 23fd45c:	1007ad84 	.word	0x1007ad84
 23fd460:	00000034 	.word	0x00000034

023fd464 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd464:	b509      	push	{r0, r3, lr}
 23fd466:	4804      	ldr	r0, [pc, #16]	; (23fd478 <HAL_USB_USART_Send_Data+0x14>)
 23fd468:	6800      	ldr	r0, [r0, #0]
 23fd46a:	4b04      	ldr	r3, [pc, #16]	; (23fd47c <HAL_USB_USART_Send_Data+0x18>)
 23fd46c:	4403      	add	r3, r0
 23fd46e:	681b      	ldr	r3, [r3, #0]
 23fd470:	69db      	ldr	r3, [r3, #28]
 23fd472:	9302      	str	r3, [sp, #8]
 23fd474:	bd09      	pop	{r0, r3, pc}
 23fd476:	0000      	.short	0x0000
 23fd478:	1007ad84 	.word	0x1007ad84
 23fd47c:	00000034 	.word	0x00000034

023fd480 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fd480:	b509      	push	{r0, r3, lr}
 23fd482:	4804      	ldr	r0, [pc, #16]	; (23fd494 <HAL_USB_USART_Flush_Data+0x14>)
 23fd484:	6800      	ldr	r0, [r0, #0]
 23fd486:	4b04      	ldr	r3, [pc, #16]	; (23fd498 <HAL_USB_USART_Flush_Data+0x18>)
 23fd488:	4403      	add	r3, r0
 23fd48a:	681b      	ldr	r3, [r3, #0]
 23fd48c:	6a1b      	ldr	r3, [r3, #32]
 23fd48e:	9302      	str	r3, [sp, #8]
 23fd490:	bd09      	pop	{r0, r3, pc}
 23fd492:	0000      	.short	0x0000
 23fd494:	1007ad84 	.word	0x1007ad84
 23fd498:	00000034 	.word	0x00000034

023fd49c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fd49c:	b509      	push	{r0, r3, lr}
 23fd49e:	4804      	ldr	r0, [pc, #16]	; (23fd4b0 <panic_+0x14>)
 23fd4a0:	6800      	ldr	r0, [r0, #0]
 23fd4a2:	4b04      	ldr	r3, [pc, #16]	; (23fd4b4 <panic_+0x18>)
 23fd4a4:	4403      	add	r3, r0
 23fd4a6:	681b      	ldr	r3, [r3, #0]
 23fd4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd4aa:	9302      	str	r3, [sp, #8]
 23fd4ac:	bd09      	pop	{r0, r3, pc}
 23fd4ae:	0000      	.short	0x0000
 23fd4b0:	1007ad84 	.word	0x1007ad84
 23fd4b4:	00000048 	.word	0x00000048

023fd4b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fd4b8:	b509      	push	{r0, r3, lr}
 23fd4ba:	4804      	ldr	r0, [pc, #16]	; (23fd4cc <set_system_mode+0x14>)
 23fd4bc:	6800      	ldr	r0, [r0, #0]
 23fd4be:	4b04      	ldr	r3, [pc, #16]	; (23fd4d0 <set_system_mode+0x18>)
 23fd4c0:	4403      	add	r3, r0
 23fd4c2:	681b      	ldr	r3, [r3, #0]
 23fd4c4:	685b      	ldr	r3, [r3, #4]
 23fd4c6:	9302      	str	r3, [sp, #8]
 23fd4c8:	bd09      	pop	{r0, r3, pc}
 23fd4ca:	0000      	.short	0x0000
 23fd4cc:	1007ad84 	.word	0x1007ad84
 23fd4d0:	00000008 	.word	0x00000008

023fd4d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fd4d4:	b509      	push	{r0, r3, lr}
 23fd4d6:	4804      	ldr	r0, [pc, #16]	; (23fd4e8 <system_delay_ms+0x14>)
 23fd4d8:	6800      	ldr	r0, [r0, #0]
 23fd4da:	4b04      	ldr	r3, [pc, #16]	; (23fd4ec <system_delay_ms+0x18>)
 23fd4dc:	4403      	add	r3, r0
 23fd4de:	681b      	ldr	r3, [r3, #0]
 23fd4e0:	695b      	ldr	r3, [r3, #20]
 23fd4e2:	9302      	str	r3, [sp, #8]
 23fd4e4:	bd09      	pop	{r0, r3, pc}
 23fd4e6:	0000      	.short	0x0000
 23fd4e8:	1007ad84 	.word	0x1007ad84
 23fd4ec:	00000008 	.word	0x00000008

023fd4f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fd4f0:	b509      	push	{r0, r3, lr}
 23fd4f2:	4804      	ldr	r0, [pc, #16]	; (23fd504 <system_ctrl_set_app_request_handler+0x14>)
 23fd4f4:	6800      	ldr	r0, [r0, #0]
 23fd4f6:	4b04      	ldr	r3, [pc, #16]	; (23fd508 <system_ctrl_set_app_request_handler+0x18>)
 23fd4f8:	4403      	add	r3, r0
 23fd4fa:	681b      	ldr	r3, [r3, #0]
 23fd4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd500:	9302      	str	r3, [sp, #8]
 23fd502:	bd09      	pop	{r0, r3, pc}
 23fd504:	1007ad84 	.word	0x1007ad84
 23fd508:	00000008 	.word	0x00000008

023fd50c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fd50c:	b509      	push	{r0, r3, lr}
 23fd50e:	4804      	ldr	r0, [pc, #16]	; (23fd520 <system_ctrl_set_result+0x14>)
 23fd510:	6800      	ldr	r0, [r0, #0]
 23fd512:	4b04      	ldr	r3, [pc, #16]	; (23fd524 <system_ctrl_set_result+0x18>)
 23fd514:	4403      	add	r3, r0
 23fd516:	681b      	ldr	r3, [r3, #0]
 23fd518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fd51c:	9302      	str	r3, [sp, #8]
 23fd51e:	bd09      	pop	{r0, r3, pc}
 23fd520:	1007ad84 	.word	0x1007ad84
 23fd524:	00000008 	.word	0x00000008

023fd528 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd528:	b509      	push	{r0, r3, lr}
 23fd52a:	4804      	ldr	r0, [pc, #16]	; (23fd53c <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd52c:	6800      	ldr	r0, [r0, #0]
 23fd52e:	4b04      	ldr	r3, [pc, #16]	; (23fd540 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd530:	4403      	add	r3, r0
 23fd532:	681b      	ldr	r3, [r3, #0]
 23fd534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd536:	9302      	str	r3, [sp, #8]
 23fd538:	bd09      	pop	{r0, r3, pc}
 23fd53a:	0000      	.short	0x0000
 23fd53c:	1007ad84 	.word	0x1007ad84
 23fd540:	0000002c 	.word	0x0000002c

023fd544 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd544:	b509      	push	{r0, r3, lr}
 23fd546:	4804      	ldr	r0, [pc, #16]	; (23fd558 <network_connect+0x14>)
 23fd548:	6800      	ldr	r0, [r0, #0]
 23fd54a:	4b04      	ldr	r3, [pc, #16]	; (23fd55c <network_connect+0x18>)
 23fd54c:	4403      	add	r3, r0
 23fd54e:	681b      	ldr	r3, [r3, #0]
 23fd550:	685b      	ldr	r3, [r3, #4]
 23fd552:	9302      	str	r3, [sp, #8]
 23fd554:	bd09      	pop	{r0, r3, pc}
 23fd556:	0000      	.short	0x0000
 23fd558:	1007ad84 	.word	0x1007ad84
 23fd55c:	00000028 	.word	0x00000028

023fd560 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd560:	b509      	push	{r0, r3, lr}
 23fd562:	4804      	ldr	r0, [pc, #16]	; (23fd574 <network_connecting+0x14>)
 23fd564:	6800      	ldr	r0, [r0, #0]
 23fd566:	4b04      	ldr	r3, [pc, #16]	; (23fd578 <network_connecting+0x18>)
 23fd568:	4403      	add	r3, r0
 23fd56a:	681b      	ldr	r3, [r3, #0]
 23fd56c:	689b      	ldr	r3, [r3, #8]
 23fd56e:	9302      	str	r3, [sp, #8]
 23fd570:	bd09      	pop	{r0, r3, pc}
 23fd572:	0000      	.short	0x0000
 23fd574:	1007ad84 	.word	0x1007ad84
 23fd578:	00000028 	.word	0x00000028

023fd57c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd57c:	b509      	push	{r0, r3, lr}
 23fd57e:	4804      	ldr	r0, [pc, #16]	; (23fd590 <network_disconnect+0x14>)
 23fd580:	6800      	ldr	r0, [r0, #0]
 23fd582:	4b04      	ldr	r3, [pc, #16]	; (23fd594 <network_disconnect+0x18>)
 23fd584:	4403      	add	r3, r0
 23fd586:	681b      	ldr	r3, [r3, #0]
 23fd588:	68db      	ldr	r3, [r3, #12]
 23fd58a:	9302      	str	r3, [sp, #8]
 23fd58c:	bd09      	pop	{r0, r3, pc}
 23fd58e:	0000      	.short	0x0000
 23fd590:	1007ad84 	.word	0x1007ad84
 23fd594:	00000028 	.word	0x00000028

023fd598 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd598:	b509      	push	{r0, r3, lr}
 23fd59a:	4804      	ldr	r0, [pc, #16]	; (23fd5ac <network_ready+0x14>)
 23fd59c:	6800      	ldr	r0, [r0, #0]
 23fd59e:	4b04      	ldr	r3, [pc, #16]	; (23fd5b0 <network_ready+0x18>)
 23fd5a0:	4403      	add	r3, r0
 23fd5a2:	681b      	ldr	r3, [r3, #0]
 23fd5a4:	691b      	ldr	r3, [r3, #16]
 23fd5a6:	9302      	str	r3, [sp, #8]
 23fd5a8:	bd09      	pop	{r0, r3, pc}
 23fd5aa:	0000      	.short	0x0000
 23fd5ac:	1007ad84 	.word	0x1007ad84
 23fd5b0:	00000028 	.word	0x00000028

023fd5b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd5b4:	b509      	push	{r0, r3, lr}
 23fd5b6:	4804      	ldr	r0, [pc, #16]	; (23fd5c8 <network_on+0x14>)
 23fd5b8:	6800      	ldr	r0, [r0, #0]
 23fd5ba:	4b04      	ldr	r3, [pc, #16]	; (23fd5cc <network_on+0x18>)
 23fd5bc:	4403      	add	r3, r0
 23fd5be:	681b      	ldr	r3, [r3, #0]
 23fd5c0:	695b      	ldr	r3, [r3, #20]
 23fd5c2:	9302      	str	r3, [sp, #8]
 23fd5c4:	bd09      	pop	{r0, r3, pc}
 23fd5c6:	0000      	.short	0x0000
 23fd5c8:	1007ad84 	.word	0x1007ad84
 23fd5cc:	00000028 	.word	0x00000028

023fd5d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd5d0:	b509      	push	{r0, r3, lr}
 23fd5d2:	4804      	ldr	r0, [pc, #16]	; (23fd5e4 <network_off+0x14>)
 23fd5d4:	6800      	ldr	r0, [r0, #0]
 23fd5d6:	4b04      	ldr	r3, [pc, #16]	; (23fd5e8 <network_off+0x18>)
 23fd5d8:	4403      	add	r3, r0
 23fd5da:	681b      	ldr	r3, [r3, #0]
 23fd5dc:	699b      	ldr	r3, [r3, #24]
 23fd5de:	9302      	str	r3, [sp, #8]
 23fd5e0:	bd09      	pop	{r0, r3, pc}
 23fd5e2:	0000      	.short	0x0000
 23fd5e4:	1007ad84 	.word	0x1007ad84
 23fd5e8:	00000028 	.word	0x00000028

023fd5ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd5ec:	b509      	push	{r0, r3, lr}
 23fd5ee:	4804      	ldr	r0, [pc, #16]	; (23fd600 <network_listen+0x14>)
 23fd5f0:	6800      	ldr	r0, [r0, #0]
 23fd5f2:	4b04      	ldr	r3, [pc, #16]	; (23fd604 <network_listen+0x18>)
 23fd5f4:	4403      	add	r3, r0
 23fd5f6:	681b      	ldr	r3, [r3, #0]
 23fd5f8:	69db      	ldr	r3, [r3, #28]
 23fd5fa:	9302      	str	r3, [sp, #8]
 23fd5fc:	bd09      	pop	{r0, r3, pc}
 23fd5fe:	0000      	.short	0x0000
 23fd600:	1007ad84 	.word	0x1007ad84
 23fd604:	00000028 	.word	0x00000028

023fd608 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd608:	b509      	push	{r0, r3, lr}
 23fd60a:	4804      	ldr	r0, [pc, #16]	; (23fd61c <network_listening+0x14>)
 23fd60c:	6800      	ldr	r0, [r0, #0]
 23fd60e:	4b04      	ldr	r3, [pc, #16]	; (23fd620 <network_listening+0x18>)
 23fd610:	4403      	add	r3, r0
 23fd612:	681b      	ldr	r3, [r3, #0]
 23fd614:	6a1b      	ldr	r3, [r3, #32]
 23fd616:	9302      	str	r3, [sp, #8]
 23fd618:	bd09      	pop	{r0, r3, pc}
 23fd61a:	0000      	.short	0x0000
 23fd61c:	1007ad84 	.word	0x1007ad84
 23fd620:	00000028 	.word	0x00000028

023fd624 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd624:	b509      	push	{r0, r3, lr}
 23fd626:	4804      	ldr	r0, [pc, #16]	; (23fd638 <network_set_listen_timeout+0x14>)
 23fd628:	6800      	ldr	r0, [r0, #0]
 23fd62a:	4b04      	ldr	r3, [pc, #16]	; (23fd63c <network_set_listen_timeout+0x18>)
 23fd62c:	4403      	add	r3, r0
 23fd62e:	681b      	ldr	r3, [r3, #0]
 23fd630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd632:	9302      	str	r3, [sp, #8]
 23fd634:	bd09      	pop	{r0, r3, pc}
 23fd636:	0000      	.short	0x0000
 23fd638:	1007ad84 	.word	0x1007ad84
 23fd63c:	00000028 	.word	0x00000028

023fd640 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd640:	b509      	push	{r0, r3, lr}
 23fd642:	4804      	ldr	r0, [pc, #16]	; (23fd654 <network_get_listen_timeout+0x14>)
 23fd644:	6800      	ldr	r0, [r0, #0]
 23fd646:	4b04      	ldr	r3, [pc, #16]	; (23fd658 <network_get_listen_timeout+0x18>)
 23fd648:	4403      	add	r3, r0
 23fd64a:	681b      	ldr	r3, [r3, #0]
 23fd64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd64e:	9302      	str	r3, [sp, #8]
 23fd650:	bd09      	pop	{r0, r3, pc}
 23fd652:	0000      	.short	0x0000
 23fd654:	1007ad84 	.word	0x1007ad84
 23fd658:	00000028 	.word	0x00000028

023fd65c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd65c:	b509      	push	{r0, r3, lr}
 23fd65e:	4804      	ldr	r0, [pc, #16]	; (23fd670 <network_is_on+0x14>)
 23fd660:	6800      	ldr	r0, [r0, #0]
 23fd662:	4b04      	ldr	r3, [pc, #16]	; (23fd674 <network_is_on+0x18>)
 23fd664:	4403      	add	r3, r0
 23fd666:	681b      	ldr	r3, [r3, #0]
 23fd668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd66a:	9302      	str	r3, [sp, #8]
 23fd66c:	bd09      	pop	{r0, r3, pc}
 23fd66e:	0000      	.short	0x0000
 23fd670:	1007ad84 	.word	0x1007ad84
 23fd674:	00000028 	.word	0x00000028

023fd678 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd678:	b509      	push	{r0, r3, lr}
 23fd67a:	4804      	ldr	r0, [pc, #16]	; (23fd68c <network_is_off+0x14>)
 23fd67c:	6800      	ldr	r0, [r0, #0]
 23fd67e:	4b04      	ldr	r3, [pc, #16]	; (23fd690 <network_is_off+0x18>)
 23fd680:	4403      	add	r3, r0
 23fd682:	681b      	ldr	r3, [r3, #0]
 23fd684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd686:	9302      	str	r3, [sp, #8]
 23fd688:	bd09      	pop	{r0, r3, pc}
 23fd68a:	0000      	.short	0x0000
 23fd68c:	1007ad84 	.word	0x1007ad84
 23fd690:	00000028 	.word	0x00000028

023fd694 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd694:	b509      	push	{r0, r3, lr}
 23fd696:	4804      	ldr	r0, [pc, #16]	; (23fd6a8 <malloc+0x14>)
 23fd698:	6800      	ldr	r0, [r0, #0]
 23fd69a:	4b04      	ldr	r3, [pc, #16]	; (23fd6ac <malloc+0x18>)
 23fd69c:	4403      	add	r3, r0
 23fd69e:	681b      	ldr	r3, [r3, #0]
 23fd6a0:	681b      	ldr	r3, [r3, #0]
 23fd6a2:	9302      	str	r3, [sp, #8]
 23fd6a4:	bd09      	pop	{r0, r3, pc}
 23fd6a6:	0000      	.short	0x0000
 23fd6a8:	1007ad84 	.word	0x1007ad84
 23fd6ac:	00000004 	.word	0x00000004

023fd6b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd6b0:	b509      	push	{r0, r3, lr}
 23fd6b2:	4804      	ldr	r0, [pc, #16]	; (23fd6c4 <free+0x14>)
 23fd6b4:	6800      	ldr	r0, [r0, #0]
 23fd6b6:	4b04      	ldr	r3, [pc, #16]	; (23fd6c8 <free+0x18>)
 23fd6b8:	4403      	add	r3, r0
 23fd6ba:	681b      	ldr	r3, [r3, #0]
 23fd6bc:	685b      	ldr	r3, [r3, #4]
 23fd6be:	9302      	str	r3, [sp, #8]
 23fd6c0:	bd09      	pop	{r0, r3, pc}
 23fd6c2:	0000      	.short	0x0000
 23fd6c4:	1007ad84 	.word	0x1007ad84
 23fd6c8:	00000004 	.word	0x00000004

023fd6cc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd6cc:	b509      	push	{r0, r3, lr}
 23fd6ce:	4804      	ldr	r0, [pc, #16]	; (23fd6e0 <__assert_func+0x14>)
 23fd6d0:	6800      	ldr	r0, [r0, #0]
 23fd6d2:	4b04      	ldr	r3, [pc, #16]	; (23fd6e4 <__assert_func+0x18>)
 23fd6d4:	4403      	add	r3, r0
 23fd6d6:	681b      	ldr	r3, [r3, #0]
 23fd6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd6da:	9302      	str	r3, [sp, #8]
 23fd6dc:	bd09      	pop	{r0, r3, pc}
 23fd6de:	0000      	.short	0x0000
 23fd6e0:	1007ad84 	.word	0x1007ad84
 23fd6e4:	00000004 	.word	0x00000004

023fd6e8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd6e8:	b509      	push	{r0, r3, lr}
 23fd6ea:	4804      	ldr	r0, [pc, #16]	; (23fd6fc <newlib_impure_ptr_callback+0x14>)
 23fd6ec:	6800      	ldr	r0, [r0, #0]
 23fd6ee:	4b04      	ldr	r3, [pc, #16]	; (23fd700 <newlib_impure_ptr_callback+0x18>)
 23fd6f0:	4403      	add	r3, r0
 23fd6f2:	681b      	ldr	r3, [r3, #0]
 23fd6f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd6f6:	9302      	str	r3, [sp, #8]
 23fd6f8:	bd09      	pop	{r0, r3, pc}
 23fd6fa:	0000      	.short	0x0000
 23fd6fc:	1007ad84 	.word	0x1007ad84
 23fd700:	00000004 	.word	0x00000004

023fd704 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fd704:	2100      	movs	r1, #0
 23fd706:	f7ff bee5 	b.w	23fd4d4 <system_delay_ms>
	...

023fd70c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd70c:	2300      	movs	r3, #0
 23fd70e:	4802      	ldr	r0, [pc, #8]	; (23fd718 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd710:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd712:	f7ff bc3f 	b.w	23fcf94 <os_mutex_recursive_create>
 23fd716:	bf00      	nop
 23fd718:	1007ae8c 	.word	0x1007ae8c

023fd71c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd71c:	2200      	movs	r2, #0
 23fd71e:	6840      	ldr	r0, [r0, #4]
 23fd720:	4611      	mov	r1, r2
 23fd722:	f7ff bf71 	b.w	23fd608 <network_listening>

023fd726 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd726:	2200      	movs	r2, #0
 23fd728:	6840      	ldr	r0, [r0, #4]
 23fd72a:	4611      	mov	r1, r2
 23fd72c:	f7ff bf88 	b.w	23fd640 <network_get_listen_timeout>

023fd730 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd730:	2200      	movs	r2, #0
 23fd732:	6840      	ldr	r0, [r0, #4]
 23fd734:	f7ff bf76 	b.w	23fd624 <network_set_listen_timeout>

023fd738 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd738:	2200      	movs	r2, #0
 23fd73a:	6840      	ldr	r0, [r0, #4]
 23fd73c:	f081 0101 	eor.w	r1, r1, #1
 23fd740:	f7ff bf54 	b.w	23fd5ec <network_listen>

023fd744 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd744:	2300      	movs	r3, #0
 23fd746:	6840      	ldr	r0, [r0, #4]
 23fd748:	461a      	mov	r2, r3
 23fd74a:	4619      	mov	r1, r3
 23fd74c:	f7ff bf40 	b.w	23fd5d0 <network_off>

023fd750 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd750:	2300      	movs	r3, #0
 23fd752:	6840      	ldr	r0, [r0, #4]
 23fd754:	461a      	mov	r2, r3
 23fd756:	4619      	mov	r1, r3
 23fd758:	f7ff bf2c 	b.w	23fd5b4 <network_on>

023fd75c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd75c:	2200      	movs	r2, #0
 23fd75e:	6840      	ldr	r0, [r0, #4]
 23fd760:	4611      	mov	r1, r2
 23fd762:	f7ff bf19 	b.w	23fd598 <network_ready>

023fd766 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd766:	2200      	movs	r2, #0
 23fd768:	6840      	ldr	r0, [r0, #4]
 23fd76a:	4611      	mov	r1, r2
 23fd76c:	f7ff bef8 	b.w	23fd560 <network_connecting>

023fd770 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd770:	2200      	movs	r2, #0
 23fd772:	2102      	movs	r1, #2
 23fd774:	6840      	ldr	r0, [r0, #4]
 23fd776:	f7ff bf01 	b.w	23fd57c <network_disconnect>

023fd77a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd77a:	2300      	movs	r3, #0
 23fd77c:	6840      	ldr	r0, [r0, #4]
 23fd77e:	461a      	mov	r2, r3
 23fd780:	f7ff bee0 	b.w	23fd544 <network_connect>

023fd784 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd784:	2203      	movs	r2, #3
 23fd786:	4b02      	ldr	r3, [pc, #8]	; (23fd790 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd788:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd78a:	4a02      	ldr	r2, [pc, #8]	; (23fd794 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd78c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd78e:	4770      	bx	lr
 23fd790:	1007ae90 	.word	0x1007ae90
 23fd794:	023ffdd8 	.word	0x023ffdd8

023fd798 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd798:	4770      	bx	lr

023fd79a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd79a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd79c:	4606      	mov	r6, r0
 23fd79e:	4615      	mov	r5, r2
 23fd7a0:	460c      	mov	r4, r1
 23fd7a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd7a4:	42bc      	cmp	r4, r7
 23fd7a6:	d006      	beq.n	23fd7b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd7a8:	6833      	ldr	r3, [r6, #0]
 23fd7aa:	4630      	mov	r0, r6
 23fd7ac:	689b      	ldr	r3, [r3, #8]
 23fd7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd7b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd7b4:	e7f6      	b.n	23fd7a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd7b6:	4628      	mov	r0, r5
 23fd7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd7ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd7ba:	2200      	movs	r2, #0
 23fd7bc:	7c00      	ldrb	r0, [r0, #16]
 23fd7be:	f7ff bc91 	b.w	23fd0e4 <hal_i2c_write>

023fd7c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd7c2:	2100      	movs	r1, #0
 23fd7c4:	7c00      	ldrb	r0, [r0, #16]
 23fd7c6:	f7ff bc9b 	b.w	23fd100 <hal_i2c_available>

023fd7ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd7ca:	2100      	movs	r1, #0
 23fd7cc:	7c00      	ldrb	r0, [r0, #16]
 23fd7ce:	f7ff bca5 	b.w	23fd11c <hal_i2c_read>

023fd7d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd7d2:	2100      	movs	r1, #0
 23fd7d4:	7c00      	ldrb	r0, [r0, #16]
 23fd7d6:	f7ff bcaf 	b.w	23fd138 <hal_i2c_peek>

023fd7da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd7da:	2100      	movs	r1, #0
 23fd7dc:	7c00      	ldrb	r0, [r0, #16]
 23fd7de:	f7ff bcb9 	b.w	23fd154 <hal_i2c_flush>

023fd7e2 <_ZN7TwoWireD0Ev>:
 23fd7e2:	b510      	push	{r4, lr}
 23fd7e4:	4604      	mov	r4, r0
 23fd7e6:	2114      	movs	r1, #20
 23fd7e8:	f7fd ff5d 	bl	23fb6a6 <_ZdlPvj>
 23fd7ec:	4620      	mov	r0, r4
 23fd7ee:	bd10      	pop	{r4, pc}

023fd7f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd7f0:	b538      	push	{r3, r4, r5, lr}
 23fd7f2:	4604      	mov	r4, r0
 23fd7f4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd7f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd7fa:	2200      	movs	r2, #0
 23fd7fc:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd800:	4b09      	ldr	r3, [pc, #36]	; (23fd828 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd802:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd804:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd806:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd808:	4629      	mov	r1, r5
 23fd80a:	f7ff fcbf 	bl	23fd18c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd80e:	30bf      	adds	r0, #191	; 0xbf
 23fd810:	d108      	bne.n	23fd824 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd812:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd814:	07db      	lsls	r3, r3, #31
 23fd816:	d505      	bpl.n	23fd824 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd818:	6868      	ldr	r0, [r5, #4]
 23fd81a:	f7ff ff49 	bl	23fd6b0 <free>
    free(conf.tx_buffer);
 23fd81e:	68e8      	ldr	r0, [r5, #12]
 23fd820:	f7ff ff46 	bl	23fd6b0 <free>
}
 23fd824:	4620      	mov	r0, r4
 23fd826:	bd38      	pop	{r3, r4, r5, pc}
 23fd828:	023ffe14 	.word	0x023ffe14

023fd82c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fd82c:	2300      	movs	r3, #0
 23fd82e:	7c00      	ldrb	r0, [r0, #16]
 23fd830:	461a      	mov	r2, r3
 23fd832:	4619      	mov	r1, r3
 23fd834:	f7ff bc2c 	b.w	23fd090 <hal_i2c_begin>

023fd838 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fd838:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fd83a:	2200      	movs	r2, #0
 23fd83c:	2314      	movs	r3, #20
 23fd83e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fd842:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fd846:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fd848:	7c00      	ldrb	r0, [r0, #16]
 23fd84a:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd84e:	684b      	ldr	r3, [r1, #4]
 23fd850:	9303      	str	r3, [sp, #12]
 23fd852:	68cb      	ldr	r3, [r1, #12]
 23fd854:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fd856:	7a0b      	ldrb	r3, [r1, #8]
 23fd858:	a901      	add	r1, sp, #4
 23fd85a:	9305      	str	r3, [sp, #20]
 23fd85c:	f7ff fca4 	bl	23fd1a8 <hal_i2c_request_ex>
}
 23fd860:	b007      	add	sp, #28
 23fd862:	f85d fb04 	ldr.w	pc, [sp], #4

023fd866 <_ZN7TwoWire11requestFromEhjh>:
{
 23fd866:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fd868:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fd86a:	f88d 1000 	strb.w	r1, [sp]
 23fd86e:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fd872:	bf18      	it	ne
 23fd874:	2301      	movne	r3, #1
 23fd876:	9103      	str	r1, [sp, #12]
 23fd878:	4669      	mov	r1, sp
    size_ = size;
 23fd87a:	9201      	str	r2, [sp, #4]
 23fd87c:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd880:	f7ff ffda 	bl	23fd838 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fd884:	b005      	add	sp, #20
 23fd886:	f85d fb04 	ldr.w	pc, [sp], #4

023fd88a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fd88a:	2301      	movs	r3, #1
 23fd88c:	f7ff bfeb 	b.w	23fd866 <_ZN7TwoWire11requestFromEhjh>

023fd890 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fd890:	2200      	movs	r2, #0
 23fd892:	7c00      	ldrb	r0, [r0, #16]
 23fd894:	f7ff bc0a 	b.w	23fd0ac <hal_i2c_begin_transmission>

023fd898 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23fd898:	b2c9      	uxtb	r1, r1
 23fd89a:	f7ff bff9 	b.w	23fd890 <_ZN7TwoWire17beginTransmissionEh>

023fd89e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fd89e:	2200      	movs	r2, #0
 23fd8a0:	7c00      	ldrb	r0, [r0, #16]
 23fd8a2:	f7ff bc11 	b.w	23fd0c8 <hal_i2c_end_transmission>

023fd8a6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fd8a6:	2101      	movs	r1, #1
 23fd8a8:	f7ff bff9 	b.w	23fd89e <_ZN7TwoWire15endTransmissionEh>

023fd8ac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd8ac:	4770      	bx	lr

023fd8ae <_ZN9IPAddressD0Ev>:
 23fd8ae:	b510      	push	{r4, lr}
 23fd8b0:	4604      	mov	r4, r0
 23fd8b2:	2118      	movs	r1, #24
 23fd8b4:	f7fd fef7 	bl	23fb6a6 <_ZdlPvj>
 23fd8b8:	4620      	mov	r0, r4
 23fd8ba:	bd10      	pop	{r4, pc}

023fd8bc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd8be:	7d03      	ldrb	r3, [r0, #20]
{
 23fd8c0:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd8c2:	2b06      	cmp	r3, #6
 23fd8c4:	f04f 0400 	mov.w	r4, #0
{
 23fd8c8:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd8ca:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd8ce:	d012      	beq.n	23fd8f6 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd8d0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd8d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd8d8:	220a      	movs	r2, #10
 23fd8da:	4630      	mov	r0, r6
 23fd8dc:	f000 f95d 	bl	23fdb9a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd8e0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd8e2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd8e4:	d019      	beq.n	23fd91a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd8e6:	2c00      	cmp	r4, #0
 23fd8e8:	d0f4      	beq.n	23fd8d4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd8ea:	212e      	movs	r1, #46	; 0x2e
 23fd8ec:	4630      	mov	r0, r6
 23fd8ee:	f000 f93b 	bl	23fdb68 <_ZN5Print5printEc>
 23fd8f2:	4404      	add	r4, r0
 23fd8f4:	e7ee      	b.n	23fd8d4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd8f6:	232f      	movs	r3, #47	; 0x2f
 23fd8f8:	466a      	mov	r2, sp
 23fd8fa:	4639      	mov	r1, r7
 23fd8fc:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd8fe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd902:	f7ff fc5f 	bl	23fd1c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd906:	4668      	mov	r0, sp
 23fd908:	f7fd fea6 	bl	23fb658 <strlen>
 23fd90c:	6833      	ldr	r3, [r6, #0]
 23fd90e:	4602      	mov	r2, r0
 23fd910:	4669      	mov	r1, sp
 23fd912:	4630      	mov	r0, r6
 23fd914:	68db      	ldr	r3, [r3, #12]
 23fd916:	4798      	blx	r3
 23fd918:	4604      	mov	r4, r0
    }
    return n;
}
 23fd91a:	4620      	mov	r0, r4
 23fd91c:	b00d      	add	sp, #52	; 0x34
 23fd91e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd920 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd920:	b510      	push	{r4, lr}
 23fd922:	4604      	mov	r4, r0
 23fd924:	4b04      	ldr	r3, [pc, #16]	; (23fd938 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd926:	2211      	movs	r2, #17
 23fd928:	2100      	movs	r1, #0
 23fd92a:	f840 3b04 	str.w	r3, [r0], #4
 23fd92e:	f000 fe4c 	bl	23fe5ca <memset>
}
 23fd932:	4620      	mov	r0, r4
 23fd934:	bd10      	pop	{r4, pc}
 23fd936:	bf00      	nop
 23fd938:	023ffe3c 	.word	0x023ffe3c

023fd93c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd93c:	4603      	mov	r3, r0
 23fd93e:	4a07      	ldr	r2, [pc, #28]	; (23fd95c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd940:	b510      	push	{r4, lr}
 23fd942:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd946:	f101 0210 	add.w	r2, r1, #16
 23fd94a:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd94e:	4291      	cmp	r1, r2
 23fd950:	f843 4b04 	str.w	r4, [r3], #4
 23fd954:	d1f9      	bne.n	23fd94a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd956:	780a      	ldrb	r2, [r1, #0]
 23fd958:	701a      	strb	r2, [r3, #0]
}
 23fd95a:	bd10      	pop	{r4, pc}
 23fd95c:	023ffe3c 	.word	0x023ffe3c

023fd960 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd960:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd962:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd966:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd96a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd96e:	2304      	movs	r3, #4
 23fd970:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd974:	6041      	str	r1, [r0, #4]
 23fd976:	7503      	strb	r3, [r0, #20]
}
 23fd978:	bd10      	pop	{r4, pc}
	...

023fd97c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd97c:	b507      	push	{r0, r1, r2, lr}
 23fd97e:	4b06      	ldr	r3, [pc, #24]	; (23fd998 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd980:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd982:	78cb      	ldrb	r3, [r1, #3]
 23fd984:	9300      	str	r3, [sp, #0]
 23fd986:	788b      	ldrb	r3, [r1, #2]
 23fd988:	784a      	ldrb	r2, [r1, #1]
 23fd98a:	7809      	ldrb	r1, [r1, #0]
 23fd98c:	f7ff ffe8 	bl	23fd960 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd990:	b003      	add	sp, #12
 23fd992:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd996:	bf00      	nop
 23fd998:	023ffe3c 	.word	0x023ffe3c

023fd99c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fd99c:	4b01      	ldr	r3, [pc, #4]	; (23fd9a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd99e:	4a02      	ldr	r2, [pc, #8]	; (23fd9a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd9a0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd9a2:	4770      	bx	lr
 23fd9a4:	1007ae98 	.word	0x1007ae98
 23fd9a8:	023ffe48 	.word	0x023ffe48

023fd9ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fd9ac:	2300      	movs	r3, #0
 23fd9ae:	6840      	ldr	r0, [r0, #4]
 23fd9b0:	461a      	mov	r2, r3
 23fd9b2:	f7ff bdc7 	b.w	23fd544 <network_connect>

023fd9b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fd9b6:	2200      	movs	r2, #0
 23fd9b8:	2102      	movs	r1, #2
 23fd9ba:	6840      	ldr	r0, [r0, #4]
 23fd9bc:	f7ff bdde 	b.w	23fd57c <network_disconnect>

023fd9c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fd9c0:	2200      	movs	r2, #0
 23fd9c2:	6840      	ldr	r0, [r0, #4]
 23fd9c4:	4611      	mov	r1, r2
 23fd9c6:	f7ff bdcb 	b.w	23fd560 <network_connecting>

023fd9ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fd9ca:	2200      	movs	r2, #0
 23fd9cc:	6840      	ldr	r0, [r0, #4]
 23fd9ce:	4611      	mov	r1, r2
 23fd9d0:	f7ff bde2 	b.w	23fd598 <network_ready>

023fd9d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fd9d4:	2300      	movs	r3, #0
 23fd9d6:	6840      	ldr	r0, [r0, #4]
 23fd9d8:	461a      	mov	r2, r3
 23fd9da:	4619      	mov	r1, r3
 23fd9dc:	f7ff bdea 	b.w	23fd5b4 <network_on>

023fd9e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fd9e0:	2300      	movs	r3, #0
 23fd9e2:	6840      	ldr	r0, [r0, #4]
 23fd9e4:	461a      	mov	r2, r3
 23fd9e6:	4619      	mov	r1, r3
 23fd9e8:	f7ff bdf2 	b.w	23fd5d0 <network_off>

023fd9ec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fd9ec:	2100      	movs	r1, #0
 23fd9ee:	6840      	ldr	r0, [r0, #4]
 23fd9f0:	f7ff be34 	b.w	23fd65c <network_is_on>

023fd9f4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fd9f4:	2100      	movs	r1, #0
 23fd9f6:	6840      	ldr	r0, [r0, #4]
 23fd9f8:	f7ff be3e 	b.w	23fd678 <network_is_off>

023fd9fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fd9fc:	2200      	movs	r2, #0
 23fd9fe:	6840      	ldr	r0, [r0, #4]
 23fda00:	f081 0101 	eor.w	r1, r1, #1
 23fda04:	f7ff bdf2 	b.w	23fd5ec <network_listen>

023fda08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fda08:	2200      	movs	r2, #0
 23fda0a:	6840      	ldr	r0, [r0, #4]
 23fda0c:	f7ff be0a 	b.w	23fd624 <network_set_listen_timeout>

023fda10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fda10:	2200      	movs	r2, #0
 23fda12:	6840      	ldr	r0, [r0, #4]
 23fda14:	4611      	mov	r1, r2
 23fda16:	f7ff be13 	b.w	23fd640 <network_get_listen_timeout>

023fda1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fda1a:	2200      	movs	r2, #0
 23fda1c:	6840      	ldr	r0, [r0, #4]
 23fda1e:	4611      	mov	r1, r2
 23fda20:	f7ff bdf2 	b.w	23fd608 <network_listening>

023fda24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fda24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fda28:	b095      	sub	sp, #84	; 0x54
 23fda2a:	4614      	mov	r4, r2
 23fda2c:	460d      	mov	r5, r1
 23fda2e:	4607      	mov	r7, r0
    IPAddress addr;
 23fda30:	f7ff ff76 	bl	23fd920 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fda34:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fda36:	221c      	movs	r2, #28
 23fda38:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fda3a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fda3c:	f000 fdc5 	bl	23fe5ca <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fda40:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fda42:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fda44:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fda46:	2100      	movs	r1, #0
 23fda48:	466b      	mov	r3, sp
 23fda4a:	aa0c      	add	r2, sp, #48	; 0x30
 23fda4c:	f7ff fbd6 	bl	23fd1fc <netdb_getaddrinfo>
    if (!r) {
 23fda50:	4604      	mov	r4, r0
 23fda52:	2800      	cmp	r0, #0
 23fda54:	d14b      	bne.n	23fdaee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fda56:	4602      	mov	r2, r0
 23fda58:	2101      	movs	r1, #1
 23fda5a:	6868      	ldr	r0, [r5, #4]
 23fda5c:	f7ff fd9c 	bl	23fd598 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fda60:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fda62:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fda64:	4622      	mov	r2, r4
 23fda66:	6868      	ldr	r0, [r5, #4]
 23fda68:	f7ff fd96 	bl	23fd598 <network_ready>
        bool ok = false;
 23fda6c:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fda6e:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fda70:	9e00      	ldr	r6, [sp, #0]
 23fda72:	2e00      	cmp	r6, #0
 23fda74:	d03b      	beq.n	23fdaee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fda76:	2900      	cmp	r1, #0
 23fda78:	d139      	bne.n	23fdaee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fda7a:	6873      	ldr	r3, [r6, #4]
 23fda7c:	2b02      	cmp	r3, #2
 23fda7e:	d003      	beq.n	23fda88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fda80:	2b0a      	cmp	r3, #10
 23fda82:	d011      	beq.n	23fdaa8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fda84:	69f6      	ldr	r6, [r6, #28]
 23fda86:	e7f4      	b.n	23fda72 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fda88:	f1b8 0f00 	cmp.w	r8, #0
 23fda8c:	d0fa      	beq.n	23fda84 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fda8e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fda90:	a806      	add	r0, sp, #24
 23fda92:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fda94:	1d3c      	adds	r4, r7, #4
 23fda96:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fda98:	f7ff ff70 	bl	23fd97c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fda9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fda9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fdaa0:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fdaa2:	4641      	mov	r1, r8
 23fdaa4:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fdaa6:	e7ed      	b.n	23fda84 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fdaa8:	f1b9 0f00 	cmp.w	r9, #0
 23fdaac:	d0ea      	beq.n	23fda84 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fdaae:	2210      	movs	r2, #16
 23fdab0:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fdab2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fdab4:	f000 fd89 	bl	23fe5ca <memset>
                    a.v = 6;
 23fdab8:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdaba:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fdabc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdac0:	f104 0308 	add.w	r3, r4, #8
 23fdac4:	3418      	adds	r4, #24
 23fdac6:	462a      	mov	r2, r5
 23fdac8:	6818      	ldr	r0, [r3, #0]
 23fdaca:	6859      	ldr	r1, [r3, #4]
 23fdacc:	3308      	adds	r3, #8
 23fdace:	c203      	stmia	r2!, {r0, r1}
 23fdad0:	42a3      	cmp	r3, r4
 23fdad2:	4615      	mov	r5, r2
 23fdad4:	d1f7      	bne.n	23fdac6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fdad6:	a901      	add	r1, sp, #4
 23fdad8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fdada:	1d3c      	adds	r4, r7, #4
 23fdadc:	ad07      	add	r5, sp, #28
 23fdade:	f7ff ff2d 	bl	23fd93c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fdae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fdae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fdae6:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fdae8:	4649      	mov	r1, r9
 23fdaea:	7023      	strb	r3, [r4, #0]
                    break;
 23fdaec:	e7ca      	b.n	23fda84 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fdaee:	9800      	ldr	r0, [sp, #0]
 23fdaf0:	f7ff fb76 	bl	23fd1e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fdaf4:	4638      	mov	r0, r7
 23fdaf6:	b015      	add	sp, #84	; 0x54
 23fdaf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fdafc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fdafc:	4b02      	ldr	r3, [pc, #8]	; (23fdb08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fdafe:	4a03      	ldr	r2, [pc, #12]	; (23fdb0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fdb00:	601a      	str	r2, [r3, #0]
 23fdb02:	2200      	movs	r2, #0
 23fdb04:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fdb06:	4770      	bx	lr
 23fdb08:	1007ae9c 	.word	0x1007ae9c
 23fdb0c:	023ffe54 	.word	0x023ffe54

023fdb10 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fdb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdb12:	4606      	mov	r6, r0
 23fdb14:	460d      	mov	r5, r1
  size_t n = 0;
 23fdb16:	2400      	movs	r4, #0
 23fdb18:	188f      	adds	r7, r1, r2
  while (size--) {
 23fdb1a:	42bd      	cmp	r5, r7
 23fdb1c:	d00c      	beq.n	23fdb38 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fdb1e:	6833      	ldr	r3, [r6, #0]
 23fdb20:	4630      	mov	r0, r6
 23fdb22:	689b      	ldr	r3, [r3, #8]
 23fdb24:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fdb28:	4798      	blx	r3
     if (chunk>=0)
 23fdb2a:	1e03      	subs	r3, r0, #0
 23fdb2c:	db01      	blt.n	23fdb32 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fdb2e:	441c      	add	r4, r3
  while (size--) {
 23fdb30:	e7f3      	b.n	23fdb1a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fdb32:	2c00      	cmp	r4, #0
 23fdb34:	bf08      	it	eq
 23fdb36:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fdb38:	4620      	mov	r0, r4
 23fdb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdb3c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fdb3c:	b513      	push	{r0, r1, r4, lr}
 23fdb3e:	4604      	mov	r4, r0
    }
 23fdb40:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fdb42:	b159      	cbz	r1, 23fdb5c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fdb44:	9101      	str	r1, [sp, #4]
 23fdb46:	f7fd fd87 	bl	23fb658 <strlen>
 23fdb4a:	4602      	mov	r2, r0
 23fdb4c:	4620      	mov	r0, r4
 23fdb4e:	6823      	ldr	r3, [r4, #0]
 23fdb50:	9901      	ldr	r1, [sp, #4]
 23fdb52:	68db      	ldr	r3, [r3, #12]
    }
 23fdb54:	b002      	add	sp, #8
 23fdb56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fdb5a:	4718      	bx	r3
    }
 23fdb5c:	b002      	add	sp, #8
 23fdb5e:	bd10      	pop	{r4, pc}

023fdb60 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fdb60:	b508      	push	{r3, lr}
  return write(str);
 23fdb62:	f7ff ffeb 	bl	23fdb3c <_ZN5Print5writeEPKc>
}
 23fdb66:	bd08      	pop	{r3, pc}

023fdb68 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fdb68:	6803      	ldr	r3, [r0, #0]
 23fdb6a:	689b      	ldr	r3, [r3, #8]
 23fdb6c:	4718      	bx	r3

023fdb6e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fdb6e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fdb70:	210d      	movs	r1, #13
{
 23fdb72:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fdb74:	f7ff fff8 	bl	23fdb68 <_ZN5Print5printEc>
  n += print('\n');
 23fdb78:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fdb7a:	4604      	mov	r4, r0
  n += print('\n');
 23fdb7c:	4628      	mov	r0, r5
 23fdb7e:	f7ff fff3 	bl	23fdb68 <_ZN5Print5printEc>
  return n;
}
 23fdb82:	4420      	add	r0, r4
 23fdb84:	bd38      	pop	{r3, r4, r5, pc}

023fdb86 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fdb86:	b538      	push	{r3, r4, r5, lr}
 23fdb88:	4605      	mov	r5, r0
  return write(str);
 23fdb8a:	f7ff ffd7 	bl	23fdb3c <_ZN5Print5writeEPKc>
 23fdb8e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fdb90:	4628      	mov	r0, r5
 23fdb92:	f7ff ffec 	bl	23fdb6e <_ZN5Print7printlnEv>
  return n;
}
 23fdb96:	4420      	add	r0, r4
 23fdb98:	bd38      	pop	{r3, r4, r5, pc}

023fdb9a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fdb9a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fdb9c:	2a01      	cmp	r2, #1
 23fdb9e:	bf98      	it	ls
 23fdba0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fdba2:	b530      	push	{r4, r5, lr}
 23fdba4:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fdba6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fdbaa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fdbac:	460d      	mov	r5, r1
 23fdbae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fdbb2:	fb01 5312 	mls	r3, r1, r2, r5
 23fdbb6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fdbba:	2b09      	cmp	r3, #9
 23fdbbc:	bf94      	ite	ls
 23fdbbe:	3330      	addls	r3, #48	; 0x30
 23fdbc0:	3337      	addhi	r3, #55	; 0x37
 23fdbc2:	b2db      	uxtb	r3, r3
  } while(n);
 23fdbc4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fdbc6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fdbca:	d9ef      	bls.n	23fdbac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fdbcc:	4621      	mov	r1, r4
 23fdbce:	f7ff ffb5 	bl	23fdb3c <_ZN5Print5writeEPKc>
}
 23fdbd2:	b00b      	add	sp, #44	; 0x2c
 23fdbd4:	bd30      	pop	{r4, r5, pc}
	...

023fdbd8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23fdbd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdbdc:	ec55 4b10 	vmov	r4, r5, d0
 23fdbe0:	4606      	mov	r6, r0
 23fdbe2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23fdbe4:	ee10 2a10 	vmov	r2, s0
 23fdbe8:	462b      	mov	r3, r5
 23fdbea:	ee10 0a10 	vmov	r0, s0
 23fdbee:	4629      	mov	r1, r5
 23fdbf0:	f7fd fcd4 	bl	23fb59c <__aeabi_dcmpun>
 23fdbf4:	b140      	cbz	r0, 23fdc08 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23fdbf6:	4953      	ldr	r1, [pc, #332]	; (23fdd44 <_ZN5Print10printFloatEdh+0x16c>)
 23fdbf8:	4630      	mov	r0, r6
 23fdbfa:	f7ff ff9f 	bl	23fdb3c <_ZN5Print5writeEPKc>
 23fdbfe:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23fdc00:	4650      	mov	r0, sl
 23fdc02:	b003      	add	sp, #12
 23fdc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23fdc08:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23fdc0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fdc10:	4620      	mov	r0, r4
 23fdc12:	4649      	mov	r1, r9
 23fdc14:	4b4c      	ldr	r3, [pc, #304]	; (23fdd48 <_ZN5Print10printFloatEdh+0x170>)
 23fdc16:	f7fd fcc1 	bl	23fb59c <__aeabi_dcmpun>
 23fdc1a:	b948      	cbnz	r0, 23fdc30 <_ZN5Print10printFloatEdh+0x58>
 23fdc1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fdc20:	4620      	mov	r0, r4
 23fdc22:	4649      	mov	r1, r9
 23fdc24:	4b48      	ldr	r3, [pc, #288]	; (23fdd48 <_ZN5Print10printFloatEdh+0x170>)
 23fdc26:	f7fd fc9b 	bl	23fb560 <__aeabi_dcmple>
 23fdc2a:	b908      	cbnz	r0, 23fdc30 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23fdc2c:	4947      	ldr	r1, [pc, #284]	; (23fdd4c <_ZN5Print10printFloatEdh+0x174>)
 23fdc2e:	e7e3      	b.n	23fdbf8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23fdc30:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23fdc34:	4620      	mov	r0, r4
 23fdc36:	4629      	mov	r1, r5
 23fdc38:	4b45      	ldr	r3, [pc, #276]	; (23fdd50 <_ZN5Print10printFloatEdh+0x178>)
 23fdc3a:	f7fd fca5 	bl	23fb588 <__aeabi_dcmpgt>
 23fdc3e:	b108      	cbz	r0, 23fdc44 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23fdc40:	4944      	ldr	r1, [pc, #272]	; (23fdd54 <_ZN5Print10printFloatEdh+0x17c>)
 23fdc42:	e7d9      	b.n	23fdbf8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23fdc44:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23fdc48:	4620      	mov	r0, r4
 23fdc4a:	4629      	mov	r1, r5
 23fdc4c:	4b42      	ldr	r3, [pc, #264]	; (23fdd58 <_ZN5Print10printFloatEdh+0x180>)
 23fdc4e:	f7fd fc7d 	bl	23fb54c <__aeabi_dcmplt>
 23fdc52:	2800      	cmp	r0, #0
 23fdc54:	d1f4      	bne.n	23fdc40 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23fdc56:	2200      	movs	r2, #0
 23fdc58:	2300      	movs	r3, #0
 23fdc5a:	4620      	mov	r0, r4
 23fdc5c:	4629      	mov	r1, r5
 23fdc5e:	f7fd fc75 	bl	23fb54c <__aeabi_dcmplt>
 23fdc62:	b1d0      	cbz	r0, 23fdc9a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23fdc64:	212d      	movs	r1, #45	; 0x2d
 23fdc66:	4630      	mov	r0, r6
 23fdc68:	f7ff ff7e 	bl	23fdb68 <_ZN5Print5printEc>
     number = -number;
 23fdc6c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23fdc70:	4682      	mov	sl, r0
     number = -number;
 23fdc72:	461d      	mov	r5, r3
  size_t n = 0;
 23fdc74:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23fdc78:	2000      	movs	r0, #0
    rounding /= 10.0;
 23fdc7a:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23fdc7e:	4937      	ldr	r1, [pc, #220]	; (23fdd5c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23fdc80:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23fdd64 <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23fdc84:	fa5f f38b 	uxtb.w	r3, fp
 23fdc88:	429f      	cmp	r7, r3
 23fdc8a:	d908      	bls.n	23fdc9e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23fdc8c:	4642      	mov	r2, r8
 23fdc8e:	464b      	mov	r3, r9
 23fdc90:	f7fd fb14 	bl	23fb2bc <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23fdc94:	f10b 0b01 	add.w	fp, fp, #1
 23fdc98:	e7f4      	b.n	23fdc84 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23fdc9a:	4682      	mov	sl, r0
 23fdc9c:	e7ea      	b.n	23fdc74 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23fdc9e:	4622      	mov	r2, r4
 23fdca0:	462b      	mov	r3, r5
 23fdca2:	f7fd f82b 	bl	23facfc <__adddf3>
 23fdca6:	460d      	mov	r5, r1
 23fdca8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23fdcaa:	f7fd fcb5 	bl	23fb618 <__aeabi_d2uiz>
 23fdcae:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23fdcb0:	f7fd f960 	bl	23faf74 <__aeabi_ui2d>
 23fdcb4:	4602      	mov	r2, r0
 23fdcb6:	460b      	mov	r3, r1
 23fdcb8:	4620      	mov	r0, r4
 23fdcba:	4629      	mov	r1, r5
 23fdcbc:	f7fd f81c 	bl	23facf8 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23fdcc0:	220a      	movs	r2, #10
 23fdcc2:	4604      	mov	r4, r0
 23fdcc4:	460d      	mov	r5, r1
 23fdcc6:	4630      	mov	r0, r6
 23fdcc8:	4641      	mov	r1, r8
 23fdcca:	f7ff ff66 	bl	23fdb9a <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23fdcce:	4482      	add	sl, r0
  if (digits > 0) {
 23fdcd0:	2f00      	cmp	r7, #0
 23fdcd2:	d095      	beq.n	23fdc00 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23fdcd4:	4630      	mov	r0, r6
 23fdcd6:	4922      	ldr	r1, [pc, #136]	; (23fdd60 <_ZN5Print10printFloatEdh+0x188>)
 23fdcd8:	f7ff ff30 	bl	23fdb3c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23fdcdc:	f04f 0800 	mov.w	r8, #0
 23fdce0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23fdd64 <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23fdce4:	4482      	add	sl, r0
  while (digits-- > 0)
 23fdce6:	2f00      	cmp	r7, #0
 23fdce8:	d08a      	beq.n	23fdc00 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23fdcea:	4642      	mov	r2, r8
 23fdcec:	464b      	mov	r3, r9
 23fdcee:	4620      	mov	r0, r4
 23fdcf0:	4629      	mov	r1, r5
 23fdcf2:	f7fd f9b9 	bl	23fb068 <__aeabi_dmul>
 23fdcf6:	4604      	mov	r4, r0
 23fdcf8:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23fdcfa:	f7fd fc65 	bl	23fb5c8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23fdcfe:	f1b0 0b00 	subs.w	fp, r0, #0
 23fdd02:	da1c      	bge.n	23fdd3e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23fdd04:	212d      	movs	r1, #45	; 0x2d
 23fdd06:	4630      	mov	r0, r6
 23fdd08:	f7ff ff2e 	bl	23fdb68 <_ZN5Print5printEc>
 23fdd0c:	4603      	mov	r3, r0
            val = -n;
 23fdd0e:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23fdd12:	220a      	movs	r2, #10
 23fdd14:	4630      	mov	r0, r6
 23fdd16:	9301      	str	r3, [sp, #4]
 23fdd18:	f7ff ff3f 	bl	23fdb9a <_ZN5Print11printNumberEmh>
 23fdd1c:	9b01      	ldr	r3, [sp, #4]
 23fdd1e:	3f01      	subs	r7, #1
 23fdd20:	4418      	add	r0, r3
    n += print(toPrint);
 23fdd22:	4482      	add	sl, r0
    remainder -= toPrint;
 23fdd24:	4658      	mov	r0, fp
 23fdd26:	f7fd f935 	bl	23faf94 <__aeabi_i2d>
 23fdd2a:	4602      	mov	r2, r0
 23fdd2c:	460b      	mov	r3, r1
 23fdd2e:	4620      	mov	r0, r4
 23fdd30:	4629      	mov	r1, r5
 23fdd32:	f7fc ffe1 	bl	23facf8 <__aeabi_dsub>
 23fdd36:	b2ff      	uxtb	r7, r7
 23fdd38:	4604      	mov	r4, r0
 23fdd3a:	460d      	mov	r5, r1
  while (digits-- > 0)
 23fdd3c:	e7d3      	b.n	23fdce6 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23fdd3e:	4659      	mov	r1, fp
        size_t t = 0;
 23fdd40:	2300      	movs	r3, #0
 23fdd42:	e7e6      	b.n	23fdd12 <_ZN5Print10printFloatEdh+0x13a>
 23fdd44:	023ffe88 	.word	0x023ffe88
 23fdd48:	7fefffff 	.word	0x7fefffff
 23fdd4c:	023ffe8c 	.word	0x023ffe8c
 23fdd50:	41efffff 	.word	0x41efffff
 23fdd54:	023ffe90 	.word	0x023ffe90
 23fdd58:	c1efffff 	.word	0xc1efffff
 23fdd5c:	3fe00000 	.word	0x3fe00000
 23fdd60:	023ffe94 	.word	0x023ffe94
 23fdd64:	40240000 	.word	0x40240000

023fdd68 <_ZN5Print5printEfi>:
{
 23fdd68:	b538      	push	{r3, r4, r5, lr}
 23fdd6a:	4604      	mov	r4, r0
 23fdd6c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23fdd70:	b2cd      	uxtb	r5, r1
 23fdd72:	f7fd f921 	bl	23fafb8 <__aeabi_f2d>
 23fdd76:	ec41 0b10 	vmov	d0, r0, r1
 23fdd7a:	4629      	mov	r1, r5
 23fdd7c:	4620      	mov	r0, r4
}
 23fdd7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23fdd82:	f7ff bf29 	b.w	23fdbd8 <_ZN5Print10printFloatEdh>
	...

023fdd88 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fdd88:	2200      	movs	r2, #0
 23fdd8a:	4b01      	ldr	r3, [pc, #4]	; (23fdd90 <_GLOBAL__sub_I_RGB+0x8>)
 23fdd8c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fdd8e:	4770      	bx	lr
 23fdd90:	1007aea4 	.word	0x1007aea4

023fdd94 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fdd94:	2100      	movs	r1, #0
 23fdd96:	f7ff baa1 	b.w	23fd2dc <hal_spi_release>

023fdd9a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fdd9a:	2100      	movs	r1, #0
 23fdd9c:	f7ff ba90 	b.w	23fd2c0 <hal_spi_acquire>

023fdda0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fdda0:	b510      	push	{r4, lr}
 23fdda2:	4604      	mov	r4, r0
 23fdda4:	4608      	mov	r0, r1
{
    _spi = spi;
 23fdda6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fdda8:	f7ff fa52 	bl	23fd250 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fddac:	2300      	movs	r3, #0
}
 23fddae:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fddb0:	6063      	str	r3, [r4, #4]
}
 23fddb2:	bd10      	pop	{r4, pc}

023fddb4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fddb4:	b513      	push	{r0, r1, r4, lr}
 23fddb6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fddb8:	7800      	ldrb	r0, [r0, #0]
 23fddba:	f7ff ffee 	bl	23fdd9a <_ZN8SPIClass4lockEv.isra.0>
 23fddbe:	b958      	cbnz	r0, 23fddd8 <_ZN8SPIClass5beginEv+0x24>
 23fddc0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fddc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fddc6:	9001      	str	r0, [sp, #4]
 23fddc8:	f7ff fa26 	bl	23fd218 <hal_spi_begin>
        unlock();
 23fddcc:	9801      	ldr	r0, [sp, #4]
    }
}
 23fddce:	b002      	add	sp, #8
 23fddd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fddd4:	f7ff bfde 	b.w	23fdd94 <_ZN8SPIClass6unlockEv.isra.0>
 23fddd8:	b002      	add	sp, #8
 23fddda:	bd10      	pop	{r4, pc}

023fdddc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fdddc:	7800      	ldrb	r0, [r0, #0]
 23fddde:	f7ff bfd9 	b.w	23fdd94 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fdde4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fdde4:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fdde6:	2400      	movs	r4, #0
 23fdde8:	0840      	lsrs	r0, r0, #1
 23fddea:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fddec:	6818      	ldr	r0, [r3, #0]
 23fddee:	b2e5      	uxtb	r5, r4
 23fddf0:	4288      	cmp	r0, r1
 23fddf2:	d906      	bls.n	23fde02 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fddf4:	3401      	adds	r4, #1
 23fddf6:	2c08      	cmp	r4, #8
 23fddf8:	d002      	beq.n	23fde00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fddfa:	0840      	lsrs	r0, r0, #1
 23fddfc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fddfe:	e7f5      	b.n	23fddec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fde00:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fde02:	4b02      	ldr	r3, [pc, #8]	; (23fde0c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fde04:	5d5b      	ldrb	r3, [r3, r5]
 23fde06:	7013      	strb	r3, [r2, #0]
}
 23fde08:	bd30      	pop	{r4, r5, pc}
 23fde0a:	bf00      	nop
 23fde0c:	023ffe96 	.word	0x023ffe96

023fde10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fde10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fde14:	4606      	mov	r6, r0
 23fde16:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fde18:	7800      	ldrb	r0, [r0, #0]
{
 23fde1a:	460c      	mov	r4, r1
    CHECK(lock());
 23fde1c:	f7ff ffbd 	bl	23fdd9a <_ZN8SPIClass4lockEv.isra.0>
 23fde20:	2800      	cmp	r0, #0
 23fde22:	db1b      	blt.n	23fde5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fde24:	2214      	movs	r2, #20
 23fde26:	2100      	movs	r1, #0
 23fde28:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fde2a:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fde2c:	f000 fbcd 	bl	23fe5ca <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fde30:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fde32:	2200      	movs	r2, #0
 23fde34:	4628      	mov	r0, r5
 23fde36:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fde38:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fde3c:	f7ff fa24 	bl	23fd288 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fde40:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fde44:	b113      	cbz	r3, 23fde4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fde46:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fde4a:	b155      	cbz	r5, 23fde62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fde4c:	2700      	movs	r7, #0
 23fde4e:	2501      	movs	r5, #1
 23fde50:	46b9      	mov	r9, r7
 23fde52:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fde54:	7923      	ldrb	r3, [r4, #4]
 23fde56:	b15d      	cbz	r5, 23fde70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fde58:	b1c3      	cbz	r3, 23fde8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fde5a:	2000      	movs	r0, #0
}
 23fde5c:	b00f      	add	sp, #60	; 0x3c
 23fde5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fde62:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fde66:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fde6a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fde6e:	e7f1      	b.n	23fde54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fde70:	2b00      	cmp	r3, #0
 23fde72:	d135      	bne.n	23fdee0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fde74:	68a3      	ldr	r3, [r4, #8]
 23fde76:	4543      	cmp	r3, r8
 23fde78:	d108      	bne.n	23fde8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fde7a:	f88d 9020 	strb.w	r9, [sp, #32]
 23fde7e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fde82:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fde86:	89a3      	ldrh	r3, [r4, #12]
 23fde88:	429a      	cmp	r2, r3
 23fde8a:	d0e6      	beq.n	23fde5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fde8c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fde8e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fde90:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fde94:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fde96:	ab04      	add	r3, sp, #16
 23fde98:	f10d 020f 	add.w	r2, sp, #15
 23fde9c:	f7ff ffa2 	bl	23fdde4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fdea0:	7921      	ldrb	r1, [r4, #4]
 23fdea2:	b985      	cbnz	r5, 23fdec6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fdea4:	b989      	cbnz	r1, 23fdeca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fdea6:	68a3      	ldr	r3, [r4, #8]
 23fdea8:	4543      	cmp	r3, r8
 23fdeaa:	d30e      	bcc.n	23fdeca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fdeac:	f88d 9020 	strb.w	r9, [sp, #32]
 23fdeb0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fdeb4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fdeb8:	89a3      	ldrh	r3, [r4, #12]
 23fdeba:	429a      	cmp	r2, r3
 23fdebc:	d105      	bne.n	23fdeca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fdebe:	9b04      	ldr	r3, [sp, #16]
 23fdec0:	4543      	cmp	r3, r8
 23fdec2:	d102      	bne.n	23fdeca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fdec4:	e7c9      	b.n	23fde5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fdec6:	2900      	cmp	r1, #0
 23fdec8:	d1f9      	bne.n	23fdebe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fdeca:	2300      	movs	r3, #0
 23fdecc:	9301      	str	r3, [sp, #4]
 23fdece:	7b63      	ldrb	r3, [r4, #13]
 23fded0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fded4:	9300      	str	r3, [sp, #0]
 23fded6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fded8:	7830      	ldrb	r0, [r6, #0]
 23fdeda:	f7ff f9e3 	bl	23fd2a4 <hal_spi_set_settings>
 23fdede:	e7bc      	b.n	23fde5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fdee0:	462b      	mov	r3, r5
 23fdee2:	462a      	mov	r2, r5
 23fdee4:	2101      	movs	r1, #1
 23fdee6:	e9cd 5500 	strd	r5, r5, [sp]
 23fdeea:	e7f5      	b.n	23fded8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fdeec <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fdeec:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fdeee:	7800      	ldrb	r0, [r0, #0]
 23fdef0:	f7ff f9a0 	bl	23fd234 <hal_spi_transfer>
}
 23fdef4:	b2c0      	uxtb	r0, r0
 23fdef6:	bd08      	pop	{r3, pc}

023fdef8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fdef8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fdefa:	2000      	movs	r0, #0
 23fdefc:	4b04      	ldr	r3, [pc, #16]	; (23fdf10 <_GLOBAL__sub_I_System+0x18>)
 23fdefe:	601a      	str	r2, [r3, #0]
 23fdf00:	4b04      	ldr	r3, [pc, #16]	; (23fdf14 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fdf02:	4a05      	ldr	r2, [pc, #20]	; (23fdf18 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fdf04:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fdf08:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fdf0a:	f7ff bad5 	b.w	23fd4b8 <set_system_mode>
 23fdf0e:	bf00      	nop
 23fdf10:	1007aec0 	.word	0x1007aec0
 23fdf14:	1007aeb4 	.word	0x1007aeb4
 23fdf18:	ffff0000 	.word	0xffff0000

023fdf1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fdf1c:	4b02      	ldr	r3, [pc, #8]	; (23fdf28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fdf1e:	681a      	ldr	r2, [r3, #0]
 23fdf20:	4b02      	ldr	r3, [pc, #8]	; (23fdf2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fdf22:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fdf24:	4770      	bx	lr
 23fdf26:	bf00      	nop
 23fdf28:	1007ad98 	.word	0x1007ad98
 23fdf2c:	1007aec4 	.word	0x1007aec4

023fdf30 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fdf30:	4770      	bx	lr

023fdf32 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdf32:	7441      	strb	r1, [r0, #17]
}
 23fdf34:	4770      	bx	lr

023fdf36 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fdf36:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fdf38:	7c00      	ldrb	r0, [r0, #16]
 23fdf3a:	f7ff fa31 	bl	23fd3a0 <hal_usart_available_data_for_write>
}
 23fdf3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdf42:	bd08      	pop	{r3, pc}

023fdf44 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fdf44:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fdf46:	7c00      	ldrb	r0, [r0, #16]
 23fdf48:	f7ff f9e4 	bl	23fd314 <hal_usart_available>
}
 23fdf4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdf50:	bd08      	pop	{r3, pc}

023fdf52 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fdf52:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fdf54:	7c00      	ldrb	r0, [r0, #16]
 23fdf56:	f7ff f9f9 	bl	23fd34c <hal_usart_peek>
}
 23fdf5a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdf5e:	bd08      	pop	{r3, pc}

023fdf60 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fdf60:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fdf62:	7c00      	ldrb	r0, [r0, #16]
 23fdf64:	f7ff f9e4 	bl	23fd330 <hal_usart_read>
}
 23fdf68:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdf6c:	bd08      	pop	{r3, pc}

023fdf6e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fdf6e:	7c00      	ldrb	r0, [r0, #16]
 23fdf70:	f7ff b9fa 	b.w	23fd368 <hal_usart_flush>

023fdf74 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fdf74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdf76:	7c45      	ldrb	r5, [r0, #17]
{
 23fdf78:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdf7a:	b12d      	cbz	r5, 23fdf88 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fdf7c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fdf7e:	b003      	add	sp, #12
 23fdf80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fdf84:	f7ff b9b8 	b.w	23fd2f8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdf88:	7c00      	ldrb	r0, [r0, #16]
 23fdf8a:	9101      	str	r1, [sp, #4]
 23fdf8c:	f7ff fa08 	bl	23fd3a0 <hal_usart_available_data_for_write>
 23fdf90:	2800      	cmp	r0, #0
 23fdf92:	9901      	ldr	r1, [sp, #4]
 23fdf94:	dcf2      	bgt.n	23fdf7c <_ZN11USARTSerial5writeEh+0x8>
}
 23fdf96:	4628      	mov	r0, r5
 23fdf98:	b003      	add	sp, #12
 23fdf9a:	bd30      	pop	{r4, r5, pc}

023fdf9c <_ZN11USARTSerialD0Ev>:
 23fdf9c:	b510      	push	{r4, lr}
 23fdf9e:	4604      	mov	r4, r0
 23fdfa0:	2114      	movs	r1, #20
 23fdfa2:	f7fd fb80 	bl	23fb6a6 <_ZdlPvj>
 23fdfa6:	4620      	mov	r0, r4
 23fdfa8:	bd10      	pop	{r4, pc}
	...

023fdfac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdfac:	b510      	push	{r4, lr}
 23fdfae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdfb2:	4604      	mov	r4, r0
 23fdfb4:	4608      	mov	r0, r1
 23fdfb6:	4611      	mov	r1, r2
 23fdfb8:	2200      	movs	r2, #0
 23fdfba:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fdfbe:	4b04      	ldr	r3, [pc, #16]	; (23fdfd0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fdfc0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdfc2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdfc4:	2301      	movs	r3, #1
 23fdfc6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fdfc8:	f7ff f9f8 	bl	23fd3bc <hal_usart_init_ex>
}
 23fdfcc:	4620      	mov	r0, r4
 23fdfce:	bd10      	pop	{r4, pc}
 23fdfd0:	023ffec4 	.word	0x023ffec4

023fdfd4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fdfd4:	7c00      	ldrb	r0, [r0, #16]
 23fdfd6:	f7ff b9d5 	b.w	23fd384 <hal_usart_is_enabled>

023fdfda <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdfda:	7441      	strb	r1, [r0, #17]
}
 23fdfdc:	4770      	bx	lr

023fdfde <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdfde:	4770      	bx	lr

023fdfe0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fdfe0:	4770      	bx	lr

023fdfe2 <_ZN9USBSerial4readEv>:
{
 23fdfe2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fdfe4:	2100      	movs	r1, #0
 23fdfe6:	7c00      	ldrb	r0, [r0, #16]
 23fdfe8:	f7ff fa2e 	bl	23fd448 <HAL_USB_USART_Receive_Data>
}
 23fdfec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdff0:	bd08      	pop	{r3, pc}

023fdff2 <_ZN9USBSerial4peekEv>:
{
 23fdff2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fdff4:	2101      	movs	r1, #1
 23fdff6:	7c00      	ldrb	r0, [r0, #16]
 23fdff8:	f7ff fa26 	bl	23fd448 <HAL_USB_USART_Receive_Data>
}
 23fdffc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe000:	bd08      	pop	{r3, pc}

023fe002 <_ZN9USBSerial17availableForWriteEv>:
{
 23fe002:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fe004:	7c00      	ldrb	r0, [r0, #16]
 23fe006:	f7ff fa11 	bl	23fd42c <HAL_USB_USART_Available_Data_For_Write>
}
 23fe00a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe00e:	bd08      	pop	{r3, pc}

023fe010 <_ZN9USBSerial9availableEv>:
{
 23fe010:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fe012:	7c00      	ldrb	r0, [r0, #16]
 23fe014:	f7ff f9fc 	bl	23fd410 <HAL_USB_USART_Available_Data>
}
 23fe018:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe01c:	bd08      	pop	{r3, pc}

023fe01e <_ZN9USBSerial5writeEh>:
{
 23fe01e:	b513      	push	{r0, r1, r4, lr}
 23fe020:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe022:	7c00      	ldrb	r0, [r0, #16]
{
 23fe024:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe026:	f7ff fa01 	bl	23fd42c <HAL_USB_USART_Available_Data_For_Write>
 23fe02a:	2800      	cmp	r0, #0
 23fe02c:	9901      	ldr	r1, [sp, #4]
 23fe02e:	dc01      	bgt.n	23fe034 <_ZN9USBSerial5writeEh+0x16>
 23fe030:	7c60      	ldrb	r0, [r4, #17]
 23fe032:	b120      	cbz	r0, 23fe03e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fe034:	7c20      	ldrb	r0, [r4, #16]
 23fe036:	f7ff fa15 	bl	23fd464 <HAL_USB_USART_Send_Data>
 23fe03a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fe03e:	b002      	add	sp, #8
 23fe040:	bd10      	pop	{r4, pc}

023fe042 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fe042:	7c00      	ldrb	r0, [r0, #16]
 23fe044:	f7ff ba1c 	b.w	23fd480 <HAL_USB_USART_Flush_Data>

023fe048 <_ZN9USBSerialD0Ev>:
 23fe048:	b510      	push	{r4, lr}
 23fe04a:	4604      	mov	r4, r0
 23fe04c:	2114      	movs	r1, #20
 23fe04e:	f7fd fb2a 	bl	23fb6a6 <_ZdlPvj>
 23fe052:	4620      	mov	r0, r4
 23fe054:	bd10      	pop	{r4, pc}
	...

023fe058 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe058:	b510      	push	{r4, lr}
 23fe05a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe05e:	4604      	mov	r4, r0
 23fe060:	4608      	mov	r0, r1
 23fe062:	2100      	movs	r1, #0
 23fe064:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fe068:	4b04      	ldr	r3, [pc, #16]	; (23fe07c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fe06a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe06c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe06e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fe070:	4611      	mov	r1, r2
  _blocking = true;
 23fe072:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fe074:	f7ff f9b0 	bl	23fd3d8 <HAL_USB_USART_Init>
}
 23fe078:	4620      	mov	r0, r4
 23fe07a:	bd10      	pop	{r4, pc}
 23fe07c:	023ffef4 	.word	0x023ffef4

023fe080 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fe080:	2200      	movs	r2, #0
 23fe082:	7c00      	ldrb	r0, [r0, #16]
 23fe084:	f7ff b9b6 	b.w	23fd3f4 <HAL_USB_USART_Begin>

023fe088 <_Z19acquireSerialBufferv>:
{
 23fe088:	b510      	push	{r4, lr}
 23fe08a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fe08c:	2214      	movs	r2, #20
 23fe08e:	2100      	movs	r1, #0
 23fe090:	f000 fa9b 	bl	23fe5ca <memset>
}
 23fe094:	4620      	mov	r0, r4
 23fe096:	bd10      	pop	{r4, pc}

023fe098 <_Z16_fetch_usbserialv>:
{
 23fe098:	b510      	push	{r4, lr}
 23fe09a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fe09c:	a803      	add	r0, sp, #12
 23fe09e:	f7ff fff3 	bl	23fe088 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe0a2:	4c0c      	ldr	r4, [pc, #48]	; (23fe0d4 <_Z16_fetch_usbserialv+0x3c>)
 23fe0a4:	e8d4 1f8f 	ldab	r1, [r4]
 23fe0a8:	f011 0101 	ands.w	r1, r1, #1
 23fe0ac:	d10f      	bne.n	23fe0ce <_Z16_fetch_usbserialv+0x36>
 23fe0ae:	4620      	mov	r0, r4
 23fe0b0:	9101      	str	r1, [sp, #4]
 23fe0b2:	f7fd fb07 	bl	23fb6c4 <__cxa_guard_acquire>
 23fe0b6:	9901      	ldr	r1, [sp, #4]
 23fe0b8:	b148      	cbz	r0, 23fe0ce <_Z16_fetch_usbserialv+0x36>
 23fe0ba:	aa03      	add	r2, sp, #12
 23fe0bc:	4806      	ldr	r0, [pc, #24]	; (23fe0d8 <_Z16_fetch_usbserialv+0x40>)
 23fe0be:	f7ff ffcb 	bl	23fe058 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fe0c2:	4620      	mov	r0, r4
 23fe0c4:	f7fd fb03 	bl	23fb6ce <__cxa_guard_release>
 23fe0c8:	4804      	ldr	r0, [pc, #16]	; (23fe0dc <_Z16_fetch_usbserialv+0x44>)
 23fe0ca:	f000 fa6b 	bl	23fe5a4 <atexit>
	return _usbserial;
}
 23fe0ce:	4802      	ldr	r0, [pc, #8]	; (23fe0d8 <_Z16_fetch_usbserialv+0x40>)
 23fe0d0:	b008      	add	sp, #32
 23fe0d2:	bd10      	pop	{r4, pc}
 23fe0d4:	1007aec8 	.word	0x1007aec8
 23fe0d8:	1007aecc 	.word	0x1007aecc
 23fe0dc:	023fdfdf 	.word	0x023fdfdf

023fe0e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fe0e0:	2200      	movs	r2, #0
 23fe0e2:	6840      	ldr	r0, [r0, #4]
 23fe0e4:	4611      	mov	r1, r2
 23fe0e6:	f7ff ba57 	b.w	23fd598 <network_ready>

023fe0ea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe0ea:	2200      	movs	r2, #0
 23fe0ec:	6840      	ldr	r0, [r0, #4]
 23fe0ee:	4611      	mov	r1, r2
 23fe0f0:	f7ff ba8a 	b.w	23fd608 <network_listening>

023fe0f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe0f4:	2200      	movs	r2, #0
 23fe0f6:	6840      	ldr	r0, [r0, #4]
 23fe0f8:	4611      	mov	r1, r2
 23fe0fa:	f7ff baa1 	b.w	23fd640 <network_get_listen_timeout>

023fe0fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe0fe:	2200      	movs	r2, #0
 23fe100:	6840      	ldr	r0, [r0, #4]
 23fe102:	f7ff ba8f 	b.w	23fd624 <network_set_listen_timeout>

023fe106 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe106:	2200      	movs	r2, #0
 23fe108:	6840      	ldr	r0, [r0, #4]
 23fe10a:	f081 0101 	eor.w	r1, r1, #1
 23fe10e:	f7ff ba6d 	b.w	23fd5ec <network_listen>

023fe112 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe112:	2300      	movs	r3, #0
 23fe114:	6840      	ldr	r0, [r0, #4]
 23fe116:	461a      	mov	r2, r3
 23fe118:	4619      	mov	r1, r3
 23fe11a:	f7ff ba59 	b.w	23fd5d0 <network_off>

023fe11e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe11e:	2300      	movs	r3, #0
 23fe120:	6840      	ldr	r0, [r0, #4]
 23fe122:	461a      	mov	r2, r3
 23fe124:	4619      	mov	r1, r3
 23fe126:	f7ff ba45 	b.w	23fd5b4 <network_on>

023fe12a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe12a:	2200      	movs	r2, #0
 23fe12c:	6840      	ldr	r0, [r0, #4]
 23fe12e:	4611      	mov	r1, r2
 23fe130:	f7ff ba16 	b.w	23fd560 <network_connecting>

023fe134 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe134:	2200      	movs	r2, #0
 23fe136:	2102      	movs	r1, #2
 23fe138:	6840      	ldr	r0, [r0, #4]
 23fe13a:	f7ff ba1f 	b.w	23fd57c <network_disconnect>

023fe13e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe13e:	2300      	movs	r3, #0
 23fe140:	6840      	ldr	r0, [r0, #4]
 23fe142:	461a      	mov	r2, r3
 23fe144:	f7ff b9fe 	b.w	23fd544 <network_connect>

023fe148 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fe148:	2204      	movs	r2, #4
 23fe14a:	4b02      	ldr	r3, [pc, #8]	; (23fe154 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fe14c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fe14e:	4a02      	ldr	r2, [pc, #8]	; (23fe158 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fe150:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fe152:	4770      	bx	lr
 23fe154:	1007aee0 	.word	0x1007aee0
 23fe158:	023fff24 	.word	0x023fff24

023fe15c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fe15c:	4b01      	ldr	r3, [pc, #4]	; (23fe164 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fe15e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fe160:	4770      	bx	lr
 23fe162:	bf00      	nop
 23fe164:	1007ad9c 	.word	0x1007ad9c

023fe168 <serialEventRun>:
{
 23fe168:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fe16a:	4b0f      	ldr	r3, [pc, #60]	; (23fe1a8 <serialEventRun+0x40>)
 23fe16c:	b143      	cbz	r3, 23fe180 <serialEventRun+0x18>
 23fe16e:	f7ff ff93 	bl	23fe098 <_Z16_fetch_usbserialv>
 23fe172:	6803      	ldr	r3, [r0, #0]
 23fe174:	691b      	ldr	r3, [r3, #16]
 23fe176:	4798      	blx	r3
 23fe178:	2800      	cmp	r0, #0
 23fe17a:	dd01      	ble.n	23fe180 <serialEventRun+0x18>
        serialEvent();
 23fe17c:	e000      	b.n	23fe180 <serialEventRun+0x18>
 23fe17e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fe180:	4b0a      	ldr	r3, [pc, #40]	; (23fe1ac <serialEventRun+0x44>)
 23fe182:	b143      	cbz	r3, 23fe196 <serialEventRun+0x2e>
 23fe184:	f000 f97c 	bl	23fe480 <_Z22__fetch_global_Serial1v>
 23fe188:	6803      	ldr	r3, [r0, #0]
 23fe18a:	691b      	ldr	r3, [r3, #16]
 23fe18c:	4798      	blx	r3
 23fe18e:	2800      	cmp	r0, #0
 23fe190:	dd01      	ble.n	23fe196 <serialEventRun+0x2e>
        serialEvent1();
 23fe192:	e000      	b.n	23fe196 <serialEventRun+0x2e>
 23fe194:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fe196:	4b06      	ldr	r3, [pc, #24]	; (23fe1b0 <serialEventRun+0x48>)
 23fe198:	b10b      	cbz	r3, 23fe19e <serialEventRun+0x36>
 23fe19a:	f000 f9b7 	bl	23fe50c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fe19e:	4b05      	ldr	r3, [pc, #20]	; (23fe1b4 <serialEventRun+0x4c>)
 23fe1a0:	b10b      	cbz	r3, 23fe1a6 <serialEventRun+0x3e>
 23fe1a2:	f000 f9e9 	bl	23fe578 <_Z15serialEventRun3v>
}
 23fe1a6:	bd08      	pop	{r3, pc}
	...

023fe1b8 <_post_loop>:
{
 23fe1b8:	b508      	push	{r3, lr}
	serialEventRun();
 23fe1ba:	f7ff ffd5 	bl	23fe168 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fe1be:	f7fe ff13 	bl	23fcfe8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fe1c2:	4b01      	ldr	r3, [pc, #4]	; (23fe1c8 <_post_loop+0x10>)
 23fe1c4:	6018      	str	r0, [r3, #0]
}
 23fe1c6:	bd08      	pop	{r3, pc}
 23fe1c8:	1007aef0 	.word	0x1007aef0

023fe1cc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe1cc:	4805      	ldr	r0, [pc, #20]	; (23fe1e4 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fe1ce:	4a06      	ldr	r2, [pc, #24]	; (23fe1e8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fe1d0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe1d2:	1a12      	subs	r2, r2, r0
 23fe1d4:	4905      	ldr	r1, [pc, #20]	; (23fe1ec <_Z33system_initialize_user_backup_ramv+0x20>)
 23fe1d6:	f000 f9eb 	bl	23fe5b0 <memcpy>
    __backup_sram_signature = signature;
 23fe1da:	4b05      	ldr	r3, [pc, #20]	; (23fe1f0 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fe1dc:	4a05      	ldr	r2, [pc, #20]	; (23fe1f4 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fe1de:	601a      	str	r2, [r3, #0]
}
 23fe1e0:	bd08      	pop	{r3, pc}
 23fe1e2:	bf00      	nop
 23fe1e4:	1007b400 	.word	0x1007b400
 23fe1e8:	1007b404 	.word	0x1007b404
 23fe1ec:	085ff410 	.word	0x085ff410
 23fe1f0:	1007b400 	.word	0x1007b400
 23fe1f4:	9a271c1e 	.word	0x9a271c1e

023fe1f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe1f8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fe1fa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe1fc:	461a      	mov	r2, r3
 23fe1fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe202:	9300      	str	r3, [sp, #0]
 23fe204:	f7ff f982 	bl	23fd50c <system_ctrl_set_result>
}
 23fe208:	b003      	add	sp, #12
 23fe20a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fe210 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fe210:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fe212:	8843      	ldrh	r3, [r0, #2]
 23fe214:	2b0a      	cmp	r3, #10
 23fe216:	d008      	beq.n	23fe22a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fe218:	2b50      	cmp	r3, #80	; 0x50
 23fe21a:	d10b      	bne.n	23fe234 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fe21c:	4b09      	ldr	r3, [pc, #36]	; (23fe244 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fe21e:	681b      	ldr	r3, [r3, #0]
 23fe220:	b14b      	cbz	r3, 23fe236 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fe222:	b003      	add	sp, #12
 23fe224:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fe228:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fe22a:	f7ff ffe5 	bl	23fe1f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fe22e:	b003      	add	sp, #12
 23fe230:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe234:	2300      	movs	r3, #0
 23fe236:	461a      	mov	r2, r3
 23fe238:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe23c:	9300      	str	r3, [sp, #0]
 23fe23e:	f7ff f965 	bl	23fd50c <system_ctrl_set_result>
}
 23fe242:	e7f4      	b.n	23fe22e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fe244:	1007aeec 	.word	0x1007aeec

023fe248 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe248:	2100      	movs	r1, #0
{
 23fe24a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe24c:	4811      	ldr	r0, [pc, #68]	; (23fe294 <module_user_init_hook+0x4c>)
 23fe24e:	f7ff fa4b 	bl	23fd6e8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fe252:	4b11      	ldr	r3, [pc, #68]	; (23fe298 <module_user_init_hook+0x50>)
 23fe254:	681a      	ldr	r2, [r3, #0]
 23fe256:	4b11      	ldr	r3, [pc, #68]	; (23fe29c <module_user_init_hook+0x54>)
 23fe258:	429a      	cmp	r2, r3
 23fe25a:	bf0c      	ite	eq
 23fe25c:	2201      	moveq	r2, #1
 23fe25e:	2200      	movne	r2, #0
 23fe260:	4b0f      	ldr	r3, [pc, #60]	; (23fe2a0 <module_user_init_hook+0x58>)
 23fe262:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fe264:	d001      	beq.n	23fe26a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fe266:	f7ff ffb1 	bl	23fe1cc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fe26a:	f7fe fea1 	bl	23fcfb0 <HAL_RNG_GetRandomNumber>
 23fe26e:	4604      	mov	r4, r0
    srand(seed);
 23fe270:	f000 f9b4 	bl	23fe5dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fe274:	4b0b      	ldr	r3, [pc, #44]	; (23fe2a4 <module_user_init_hook+0x5c>)
 23fe276:	b113      	cbz	r3, 23fe27e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fe278:	4620      	mov	r0, r4
 23fe27a:	e000      	b.n	23fe27e <module_user_init_hook+0x36>
 23fe27c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fe27e:	2100      	movs	r1, #0
 23fe280:	4808      	ldr	r0, [pc, #32]	; (23fe2a4 <module_user_init_hook+0x5c>)
 23fe282:	f7ff f951 	bl	23fd528 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fe286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fe28a:	2100      	movs	r1, #0
 23fe28c:	4806      	ldr	r0, [pc, #24]	; (23fe2a8 <module_user_init_hook+0x60>)
 23fe28e:	f7ff b92f 	b.w	23fd4f0 <system_ctrl_set_app_request_handler>
 23fe292:	bf00      	nop
 23fe294:	023fe15d 	.word	0x023fe15d
 23fe298:	1007b400 	.word	0x1007b400
 23fe29c:	9a271c1e 	.word	0x9a271c1e
 23fe2a0:	1007aee8 	.word	0x1007aee8
 23fe2a4:	00000000 	.word	0x00000000
 23fe2a8:	023fe211 	.word	0x023fe211

023fe2ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fe2ac:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fe2ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe2b0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fe2b2:	d902      	bls.n	23fe2ba <pinAvailable+0xe>
    return false;
 23fe2b4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fe2b6:	b003      	add	sp, #12
 23fe2b8:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe2ba:	f1a0 030f 	sub.w	r3, r0, #15
 23fe2be:	2b02      	cmp	r3, #2
 23fe2c0:	d90b      	bls.n	23fe2da <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fe2c2:	2801      	cmp	r0, #1
 23fe2c4:	d821      	bhi.n	23fe30a <pinAvailable+0x5e>
 23fe2c6:	f000 f887 	bl	23fe3d8 <_Z19__fetch_global_Wirev>
 23fe2ca:	2100      	movs	r1, #0
 23fe2cc:	7c00      	ldrb	r0, [r0, #16]
 23fe2ce:	f7fe ff4f 	bl	23fd170 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe2d2:	f080 0001 	eor.w	r0, r0, #1
 23fe2d6:	b2c0      	uxtb	r0, r0
 23fe2d8:	e7ed      	b.n	23fe2b6 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fe2da:	4d11      	ldr	r5, [pc, #68]	; (23fe320 <pinAvailable+0x74>)
 23fe2dc:	e8d5 1f8f 	ldab	r1, [r5]
 23fe2e0:	f011 0101 	ands.w	r1, r1, #1
 23fe2e4:	d10b      	bne.n	23fe2fe <pinAvailable+0x52>
 23fe2e6:	4628      	mov	r0, r5
 23fe2e8:	9101      	str	r1, [sp, #4]
 23fe2ea:	f7fd f9eb 	bl	23fb6c4 <__cxa_guard_acquire>
 23fe2ee:	9901      	ldr	r1, [sp, #4]
 23fe2f0:	b128      	cbz	r0, 23fe2fe <pinAvailable+0x52>
 23fe2f2:	480c      	ldr	r0, [pc, #48]	; (23fe324 <pinAvailable+0x78>)
 23fe2f4:	f7ff fd54 	bl	23fdda0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe2f8:	4628      	mov	r0, r5
 23fe2fa:	f7fd f9e8 	bl	23fb6ce <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe2fe:	4b09      	ldr	r3, [pc, #36]	; (23fe324 <pinAvailable+0x78>)
 23fe300:	7818      	ldrb	r0, [r3, #0]
 23fe302:	f7fe ffb3 	bl	23fd26c <hal_spi_is_enabled>
 23fe306:	2800      	cmp	r0, #0
 23fe308:	d1d4      	bne.n	23fe2b4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe30a:	3c08      	subs	r4, #8
 23fe30c:	2c01      	cmp	r4, #1
 23fe30e:	d805      	bhi.n	23fe31c <pinAvailable+0x70>
 23fe310:	f000 f8b6 	bl	23fe480 <_Z22__fetch_global_Serial1v>
 23fe314:	7c00      	ldrb	r0, [r0, #16]
 23fe316:	f7ff f835 	bl	23fd384 <hal_usart_is_enabled>
 23fe31a:	e7da      	b.n	23fe2d2 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fe31c:	2001      	movs	r0, #1
 23fe31e:	e7ca      	b.n	23fe2b6 <pinAvailable+0xa>
 23fe320:	1007ae80 	.word	0x1007ae80
 23fe324:	1007ae84 	.word	0x1007ae84

023fe328 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe328:	281b      	cmp	r0, #27
{
 23fe32a:	b538      	push	{r3, r4, r5, lr}
 23fe32c:	4604      	mov	r4, r0
 23fe32e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe330:	d80a      	bhi.n	23fe348 <pinMode+0x20>
 23fe332:	29ff      	cmp	r1, #255	; 0xff
 23fe334:	d008      	beq.n	23fe348 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fe336:	f7ff ffb9 	bl	23fe2ac <pinAvailable>
 23fe33a:	b128      	cbz	r0, 23fe348 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fe33c:	4629      	mov	r1, r5
 23fe33e:	4620      	mov	r0, r4
}
 23fe340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fe344:	f7fe be6c 	b.w	23fd020 <hal_gpio_mode>
}
 23fe348:	bd38      	pop	{r3, r4, r5, pc}

023fe34a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fe34a:	b538      	push	{r3, r4, r5, lr}
 23fe34c:	4604      	mov	r4, r0
 23fe34e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fe350:	f7fe fe74 	bl	23fd03c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fe354:	28ff      	cmp	r0, #255	; 0xff
 23fe356:	d010      	beq.n	23fe37a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fe358:	2806      	cmp	r0, #6
 23fe35a:	d804      	bhi.n	23fe366 <digitalWrite+0x1c>
 23fe35c:	234d      	movs	r3, #77	; 0x4d
 23fe35e:	fa23 f000 	lsr.w	r0, r3, r0
 23fe362:	07c3      	lsls	r3, r0, #31
 23fe364:	d409      	bmi.n	23fe37a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fe366:	4620      	mov	r0, r4
 23fe368:	f7ff ffa0 	bl	23fe2ac <pinAvailable>
 23fe36c:	b128      	cbz	r0, 23fe37a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fe36e:	4629      	mov	r1, r5
 23fe370:	4620      	mov	r0, r4
}
 23fe372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fe376:	f7fe be6f 	b.w	23fd058 <hal_gpio_write>
}
 23fe37a:	bd38      	pop	{r3, r4, r5, pc}

023fe37c <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23fe37c:	b510      	push	{r4, lr}
 23fe37e:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23fe380:	f7ff ff94 	bl	23fe2ac <pinAvailable>
 23fe384:	b150      	cbz	r0, 23fe39c <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23fe386:	2103      	movs	r1, #3
 23fe388:	4620      	mov	r0, r4
 23fe38a:	f7fe fe3b 	bl	23fd004 <hal_pin_validate_function>
 23fe38e:	2803      	cmp	r0, #3
 23fe390:	d104      	bne.n	23fe39c <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23fe392:	4620      	mov	r0, r4
}
 23fe394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23fe398:	f7fe be6c 	b.w	23fd074 <hal_adc_read>
}
 23fe39c:	2000      	movs	r0, #0
 23fe39e:	bd10      	pop	{r4, pc}

023fe3a0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe3a0:	4770      	bx	lr
	...

023fe3a4 <_Z17acquireWireBufferv>:
{
 23fe3a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fe3a6:	4b0a      	ldr	r3, [pc, #40]	; (23fe3d0 <_Z17acquireWireBufferv+0x2c>)
{
 23fe3a8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fe3aa:	6003      	str	r3, [r0, #0]
 23fe3ac:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe3ae:	4909      	ldr	r1, [pc, #36]	; (23fe3d4 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fe3b0:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe3b2:	2020      	movs	r0, #32
 23fe3b4:	f000 f8f4 	bl	23fe5a0 <_ZnajRKSt9nothrow_t>
	};
 23fe3b8:	2520      	movs	r5, #32
 23fe3ba:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe3bc:	4905      	ldr	r1, [pc, #20]	; (23fe3d4 <_Z17acquireWireBufferv+0x30>)
 23fe3be:	4628      	mov	r0, r5
	};
 23fe3c0:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe3c2:	f000 f8ed 	bl	23fe5a0 <_ZnajRKSt9nothrow_t>
	};
 23fe3c6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fe3ca:	4620      	mov	r0, r4
 23fe3cc:	bd38      	pop	{r3, r4, r5, pc}
 23fe3ce:	bf00      	nop
 23fe3d0:	00010018 	.word	0x00010018
 23fe3d4:	023fff58 	.word	0x023fff58

023fe3d8 <_Z19__fetch_global_Wirev>:
{
 23fe3d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe3da:	4d0e      	ldr	r5, [pc, #56]	; (23fe414 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fe3dc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe3de:	e8d5 1f8f 	ldab	r1, [r5]
 23fe3e2:	f011 0401 	ands.w	r4, r1, #1
 23fe3e6:	d111      	bne.n	23fe40c <_Z19__fetch_global_Wirev+0x34>
 23fe3e8:	4628      	mov	r0, r5
 23fe3ea:	f7fd f96b 	bl	23fb6c4 <__cxa_guard_acquire>
 23fe3ee:	b168      	cbz	r0, 23fe40c <_Z19__fetch_global_Wirev+0x34>
 23fe3f0:	4668      	mov	r0, sp
 23fe3f2:	f7ff ffd7 	bl	23fe3a4 <_Z17acquireWireBufferv>
 23fe3f6:	466a      	mov	r2, sp
 23fe3f8:	4621      	mov	r1, r4
 23fe3fa:	4807      	ldr	r0, [pc, #28]	; (23fe418 <_Z19__fetch_global_Wirev+0x40>)
 23fe3fc:	f7ff f9f8 	bl	23fd7f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fe400:	4628      	mov	r0, r5
 23fe402:	f7fd f964 	bl	23fb6ce <__cxa_guard_release>
 23fe406:	4805      	ldr	r0, [pc, #20]	; (23fe41c <_Z19__fetch_global_Wirev+0x44>)
 23fe408:	f000 f8cc 	bl	23fe5a4 <atexit>
	return wire;
}
 23fe40c:	4802      	ldr	r0, [pc, #8]	; (23fe418 <_Z19__fetch_global_Wirev+0x40>)
 23fe40e:	b007      	add	sp, #28
 23fe410:	bd30      	pop	{r4, r5, pc}
 23fe412:	bf00      	nop
 23fe414:	1007aef4 	.word	0x1007aef4
 23fe418:	1007aef8 	.word	0x1007aef8
 23fe41c:	023fe3a1 	.word	0x023fe3a1

023fe420 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe420:	4770      	bx	lr
	...

023fe424 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe424:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fe426:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe428:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fe42a:	462a      	mov	r2, r5
 23fe42c:	2100      	movs	r1, #0
 23fe42e:	f000 f8cc 	bl	23fe5ca <memset>
 23fe432:	8025      	strh	r5, [r4, #0]
 23fe434:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe436:	4907      	ldr	r1, [pc, #28]	; (23fe454 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fe438:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fe43a:	8125      	strh	r5, [r4, #8]
 23fe43c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe43e:	f000 f8af 	bl	23fe5a0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe442:	4904      	ldr	r1, [pc, #16]	; (23fe454 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fe444:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe446:	4628      	mov	r0, r5
 23fe448:	f000 f8aa 	bl	23fe5a0 <_ZnajRKSt9nothrow_t>
    };
 23fe44c:	60e0      	str	r0, [r4, #12]
}
 23fe44e:	4620      	mov	r0, r4
 23fe450:	bd38      	pop	{r3, r4, r5, pc}
 23fe452:	bf00      	nop
 23fe454:	023fff58 	.word	0x023fff58

023fe458 <__tcf_2>:
 23fe458:	4770      	bx	lr

023fe45a <__tcf_1>:
 23fe45a:	4770      	bx	lr

023fe45c <_Z20acquireSerial1Bufferv>:
{
 23fe45c:	b510      	push	{r4, lr}
 23fe45e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fe460:	f7ff ffe0 	bl	23fe424 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fe464:	4620      	mov	r0, r4
 23fe466:	bd10      	pop	{r4, pc}

023fe468 <_Z20acquireSerial2Bufferv>:
 23fe468:	b510      	push	{r4, lr}
 23fe46a:	4604      	mov	r4, r0
 23fe46c:	f7ff ffda 	bl	23fe424 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe470:	4620      	mov	r0, r4
 23fe472:	bd10      	pop	{r4, pc}

023fe474 <_Z20acquireSerial3Bufferv>:
 23fe474:	b510      	push	{r4, lr}
 23fe476:	4604      	mov	r4, r0
 23fe478:	f7ff ffd4 	bl	23fe424 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe47c:	4620      	mov	r0, r4
 23fe47e:	bd10      	pop	{r4, pc}

023fe480 <_Z22__fetch_global_Serial1v>:
{
 23fe480:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe482:	4d0e      	ldr	r5, [pc, #56]	; (23fe4bc <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe484:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe486:	e8d5 1f8f 	ldab	r1, [r5]
 23fe48a:	f011 0401 	ands.w	r4, r1, #1
 23fe48e:	d111      	bne.n	23fe4b4 <_Z22__fetch_global_Serial1v+0x34>
 23fe490:	4628      	mov	r0, r5
 23fe492:	f7fd f917 	bl	23fb6c4 <__cxa_guard_acquire>
 23fe496:	b168      	cbz	r0, 23fe4b4 <_Z22__fetch_global_Serial1v+0x34>
 23fe498:	a801      	add	r0, sp, #4
 23fe49a:	f7ff ffdf 	bl	23fe45c <_Z20acquireSerial1Bufferv>
 23fe49e:	4621      	mov	r1, r4
 23fe4a0:	aa01      	add	r2, sp, #4
 23fe4a2:	4807      	ldr	r0, [pc, #28]	; (23fe4c0 <_Z22__fetch_global_Serial1v+0x40>)
 23fe4a4:	f7ff fd82 	bl	23fdfac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe4a8:	4628      	mov	r0, r5
 23fe4aa:	f7fd f910 	bl	23fb6ce <__cxa_guard_release>
 23fe4ae:	4805      	ldr	r0, [pc, #20]	; (23fe4c4 <_Z22__fetch_global_Serial1v+0x44>)
 23fe4b0:	f000 f878 	bl	23fe5a4 <atexit>
    return serial1;
}
 23fe4b4:	4802      	ldr	r0, [pc, #8]	; (23fe4c0 <_Z22__fetch_global_Serial1v+0x40>)
 23fe4b6:	b007      	add	sp, #28
 23fe4b8:	bd30      	pop	{r4, r5, pc}
 23fe4ba:	bf00      	nop
 23fe4bc:	1007af0c 	.word	0x1007af0c
 23fe4c0:	1007af18 	.word	0x1007af18
 23fe4c4:	023fe421 	.word	0x023fe421

023fe4c8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe4c8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe4ca:	4c0d      	ldr	r4, [pc, #52]	; (23fe500 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe4cc:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe4ce:	e8d4 3f8f 	ldab	r3, [r4]
 23fe4d2:	07db      	lsls	r3, r3, #31
 23fe4d4:	d411      	bmi.n	23fe4fa <_Z22__fetch_global_Serial2v+0x32>
 23fe4d6:	4620      	mov	r0, r4
 23fe4d8:	f7fd f8f4 	bl	23fb6c4 <__cxa_guard_acquire>
 23fe4dc:	b168      	cbz	r0, 23fe4fa <_Z22__fetch_global_Serial2v+0x32>
 23fe4de:	a801      	add	r0, sp, #4
 23fe4e0:	f7ff ffc2 	bl	23fe468 <_Z20acquireSerial2Bufferv>
 23fe4e4:	2101      	movs	r1, #1
 23fe4e6:	aa01      	add	r2, sp, #4
 23fe4e8:	4806      	ldr	r0, [pc, #24]	; (23fe504 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe4ea:	f7ff fd5f 	bl	23fdfac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe4ee:	4620      	mov	r0, r4
 23fe4f0:	f7fd f8ed 	bl	23fb6ce <__cxa_guard_release>
 23fe4f4:	4804      	ldr	r0, [pc, #16]	; (23fe508 <_Z22__fetch_global_Serial2v+0x40>)
 23fe4f6:	f000 f855 	bl	23fe5a4 <atexit>
	return serial2;
}
 23fe4fa:	4802      	ldr	r0, [pc, #8]	; (23fe504 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe4fc:	b006      	add	sp, #24
 23fe4fe:	bd10      	pop	{r4, pc}
 23fe500:	1007af10 	.word	0x1007af10
 23fe504:	1007af2c 	.word	0x1007af2c
 23fe508:	023fe45b 	.word	0x023fe45b

023fe50c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe50c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe50e:	f7ff ffdb 	bl	23fe4c8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe512:	4b07      	ldr	r3, [pc, #28]	; (23fe530 <_Z15serialEventRun2v+0x24>)
 23fe514:	4604      	mov	r4, r0
 23fe516:	b153      	cbz	r3, 23fe52e <_Z15serialEventRun2v+0x22>
 23fe518:	f7ff fd5c 	bl	23fdfd4 <_ZN11USARTSerial9isEnabledEv>
 23fe51c:	b138      	cbz	r0, 23fe52e <_Z15serialEventRun2v+0x22>
 23fe51e:	6823      	ldr	r3, [r4, #0]
 23fe520:	4620      	mov	r0, r4
 23fe522:	691b      	ldr	r3, [r3, #16]
 23fe524:	4798      	blx	r3
 23fe526:	2800      	cmp	r0, #0
 23fe528:	dd01      	ble.n	23fe52e <_Z15serialEventRun2v+0x22>
        handler();
 23fe52a:	e000      	b.n	23fe52e <_Z15serialEventRun2v+0x22>
 23fe52c:	bf00      	nop
}
 23fe52e:	bd10      	pop	{r4, pc}
 23fe530:	00000000 	.word	0x00000000

023fe534 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe534:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe536:	4c0d      	ldr	r4, [pc, #52]	; (23fe56c <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe538:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe53a:	e8d4 3f8f 	ldab	r3, [r4]
 23fe53e:	07db      	lsls	r3, r3, #31
 23fe540:	d411      	bmi.n	23fe566 <_Z22__fetch_global_Serial3v+0x32>
 23fe542:	4620      	mov	r0, r4
 23fe544:	f7fd f8be 	bl	23fb6c4 <__cxa_guard_acquire>
 23fe548:	b168      	cbz	r0, 23fe566 <_Z22__fetch_global_Serial3v+0x32>
 23fe54a:	a801      	add	r0, sp, #4
 23fe54c:	f7ff ff92 	bl	23fe474 <_Z20acquireSerial3Bufferv>
 23fe550:	2102      	movs	r1, #2
 23fe552:	aa01      	add	r2, sp, #4
 23fe554:	4806      	ldr	r0, [pc, #24]	; (23fe570 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe556:	f7ff fd29 	bl	23fdfac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe55a:	4620      	mov	r0, r4
 23fe55c:	f7fd f8b7 	bl	23fb6ce <__cxa_guard_release>
 23fe560:	4804      	ldr	r0, [pc, #16]	; (23fe574 <_Z22__fetch_global_Serial3v+0x40>)
 23fe562:	f000 f81f 	bl	23fe5a4 <atexit>
	return serial3;
}
 23fe566:	4802      	ldr	r0, [pc, #8]	; (23fe570 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe568:	b006      	add	sp, #24
 23fe56a:	bd10      	pop	{r4, pc}
 23fe56c:	1007af14 	.word	0x1007af14
 23fe570:	1007af40 	.word	0x1007af40
 23fe574:	023fe459 	.word	0x023fe459

023fe578 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe578:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe57a:	f7ff ffdb 	bl	23fe534 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe57e:	4b07      	ldr	r3, [pc, #28]	; (23fe59c <_Z15serialEventRun3v+0x24>)
 23fe580:	4604      	mov	r4, r0
 23fe582:	b153      	cbz	r3, 23fe59a <_Z15serialEventRun3v+0x22>
 23fe584:	f7ff fd26 	bl	23fdfd4 <_ZN11USARTSerial9isEnabledEv>
 23fe588:	b138      	cbz	r0, 23fe59a <_Z15serialEventRun3v+0x22>
 23fe58a:	6823      	ldr	r3, [r4, #0]
 23fe58c:	4620      	mov	r0, r4
 23fe58e:	691b      	ldr	r3, [r3, #16]
 23fe590:	4798      	blx	r3
 23fe592:	2800      	cmp	r0, #0
 23fe594:	dd01      	ble.n	23fe59a <_Z15serialEventRun3v+0x22>
        handler();
 23fe596:	e000      	b.n	23fe59a <_Z15serialEventRun3v+0x22>
 23fe598:	bf00      	nop
}
 23fe59a:	bd10      	pop	{r4, pc}
 23fe59c:	00000000 	.word	0x00000000

023fe5a0 <_ZnajRKSt9nothrow_t>:
 23fe5a0:	f7fd b87f 	b.w	23fb6a2 <_Znaj>

023fe5a4 <atexit>:
 23fe5a4:	2300      	movs	r3, #0
 23fe5a6:	4601      	mov	r1, r0
 23fe5a8:	461a      	mov	r2, r3
 23fe5aa:	4618      	mov	r0, r3
 23fe5ac:	f000 b844 	b.w	23fe638 <__register_exitproc>

023fe5b0 <memcpy>:
 23fe5b0:	440a      	add	r2, r1
 23fe5b2:	1e43      	subs	r3, r0, #1
 23fe5b4:	4291      	cmp	r1, r2
 23fe5b6:	d100      	bne.n	23fe5ba <memcpy+0xa>
 23fe5b8:	4770      	bx	lr
 23fe5ba:	b510      	push	{r4, lr}
 23fe5bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe5c0:	4291      	cmp	r1, r2
 23fe5c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fe5c6:	d1f9      	bne.n	23fe5bc <memcpy+0xc>
 23fe5c8:	bd10      	pop	{r4, pc}

023fe5ca <memset>:
 23fe5ca:	4402      	add	r2, r0
 23fe5cc:	4603      	mov	r3, r0
 23fe5ce:	4293      	cmp	r3, r2
 23fe5d0:	d100      	bne.n	23fe5d4 <memset+0xa>
 23fe5d2:	4770      	bx	lr
 23fe5d4:	f803 1b01 	strb.w	r1, [r3], #1
 23fe5d8:	e7f9      	b.n	23fe5ce <memset+0x4>
	...

023fe5dc <srand>:
 23fe5dc:	b538      	push	{r3, r4, r5, lr}
 23fe5de:	4b10      	ldr	r3, [pc, #64]	; (23fe620 <srand+0x44>)
 23fe5e0:	4604      	mov	r4, r0
 23fe5e2:	681d      	ldr	r5, [r3, #0]
 23fe5e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe5e6:	b9b3      	cbnz	r3, 23fe616 <srand+0x3a>
 23fe5e8:	2018      	movs	r0, #24
 23fe5ea:	f7ff f853 	bl	23fd694 <malloc>
 23fe5ee:	4602      	mov	r2, r0
 23fe5f0:	63a8      	str	r0, [r5, #56]	; 0x38
 23fe5f2:	b920      	cbnz	r0, 23fe5fe <srand+0x22>
 23fe5f4:	4b0b      	ldr	r3, [pc, #44]	; (23fe624 <srand+0x48>)
 23fe5f6:	2142      	movs	r1, #66	; 0x42
 23fe5f8:	480b      	ldr	r0, [pc, #44]	; (23fe628 <srand+0x4c>)
 23fe5fa:	f7ff f867 	bl	23fd6cc <__assert_func>
 23fe5fe:	490b      	ldr	r1, [pc, #44]	; (23fe62c <srand+0x50>)
 23fe600:	4b0b      	ldr	r3, [pc, #44]	; (23fe630 <srand+0x54>)
 23fe602:	e9c0 1300 	strd	r1, r3, [r0]
 23fe606:	4b0b      	ldr	r3, [pc, #44]	; (23fe634 <srand+0x58>)
 23fe608:	2100      	movs	r1, #0
 23fe60a:	6083      	str	r3, [r0, #8]
 23fe60c:	230b      	movs	r3, #11
 23fe60e:	8183      	strh	r3, [r0, #12]
 23fe610:	2001      	movs	r0, #1
 23fe612:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fe616:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe618:	2200      	movs	r2, #0
 23fe61a:	611c      	str	r4, [r3, #16]
 23fe61c:	615a      	str	r2, [r3, #20]
 23fe61e:	bd38      	pop	{r3, r4, r5, pc}
 23fe620:	1007ad9c 	.word	0x1007ad9c
 23fe624:	023fff59 	.word	0x023fff59
 23fe628:	023fff70 	.word	0x023fff70
 23fe62c:	abcd330e 	.word	0xabcd330e
 23fe630:	e66d1234 	.word	0xe66d1234
 23fe634:	0005deec 	.word	0x0005deec

023fe638 <__register_exitproc>:
 23fe638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe63c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fe6fc <__register_exitproc+0xc4>
 23fe640:	4606      	mov	r6, r0
 23fe642:	461f      	mov	r7, r3
 23fe644:	460d      	mov	r5, r1
 23fe646:	f8d8 0000 	ldr.w	r0, [r8]
 23fe64a:	4691      	mov	r9, r2
 23fe64c:	f000 f858 	bl	23fe700 <__retarget_lock_acquire_recursive>
 23fe650:	4b26      	ldr	r3, [pc, #152]	; (23fe6ec <__register_exitproc+0xb4>)
 23fe652:	681c      	ldr	r4, [r3, #0]
 23fe654:	b934      	cbnz	r4, 23fe664 <__register_exitproc+0x2c>
 23fe656:	4c26      	ldr	r4, [pc, #152]	; (23fe6f0 <__register_exitproc+0xb8>)
 23fe658:	601c      	str	r4, [r3, #0]
 23fe65a:	4b26      	ldr	r3, [pc, #152]	; (23fe6f4 <__register_exitproc+0xbc>)
 23fe65c:	b113      	cbz	r3, 23fe664 <__register_exitproc+0x2c>
 23fe65e:	681b      	ldr	r3, [r3, #0]
 23fe660:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fe664:	6863      	ldr	r3, [r4, #4]
 23fe666:	2b1f      	cmp	r3, #31
 23fe668:	dd07      	ble.n	23fe67a <__register_exitproc+0x42>
 23fe66a:	f8d8 0000 	ldr.w	r0, [r8]
 23fe66e:	f000 f849 	bl	23fe704 <__retarget_lock_release_recursive>
 23fe672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fe67a:	b35e      	cbz	r6, 23fe6d4 <__register_exitproc+0x9c>
 23fe67c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fe680:	b988      	cbnz	r0, 23fe6a6 <__register_exitproc+0x6e>
 23fe682:	4b1d      	ldr	r3, [pc, #116]	; (23fe6f8 <__register_exitproc+0xc0>)
 23fe684:	b923      	cbnz	r3, 23fe690 <__register_exitproc+0x58>
 23fe686:	f8d8 0000 	ldr.w	r0, [r8]
 23fe68a:	f000 f83a 	bl	23fe702 <__retarget_lock_release>
 23fe68e:	e7f0      	b.n	23fe672 <__register_exitproc+0x3a>
 23fe690:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fe694:	f7fe fffe 	bl	23fd694 <malloc>
 23fe698:	2800      	cmp	r0, #0
 23fe69a:	d0f4      	beq.n	23fe686 <__register_exitproc+0x4e>
 23fe69c:	2300      	movs	r3, #0
 23fe69e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fe6a2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fe6a6:	6863      	ldr	r3, [r4, #4]
 23fe6a8:	2201      	movs	r2, #1
 23fe6aa:	2e02      	cmp	r6, #2
 23fe6ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fe6b0:	fa02 f203 	lsl.w	r2, r2, r3
 23fe6b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fe6b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fe6bc:	ea43 0302 	orr.w	r3, r3, r2
 23fe6c0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fe6c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fe6c8:	bf02      	ittt	eq
 23fe6ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fe6ce:	4313      	orreq	r3, r2
 23fe6d0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fe6d4:	6863      	ldr	r3, [r4, #4]
 23fe6d6:	f8d8 0000 	ldr.w	r0, [r8]
 23fe6da:	1c5a      	adds	r2, r3, #1
 23fe6dc:	3302      	adds	r3, #2
 23fe6de:	6062      	str	r2, [r4, #4]
 23fe6e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fe6e4:	f000 f80e 	bl	23fe704 <__retarget_lock_release_recursive>
 23fe6e8:	2000      	movs	r0, #0
 23fe6ea:	e7c4      	b.n	23fe676 <__register_exitproc+0x3e>
 23fe6ec:	1007afe0 	.word	0x1007afe0
 23fe6f0:	1007af54 	.word	0x1007af54
 23fe6f4:	00000000 	.word	0x00000000
 23fe6f8:	023fd695 	.word	0x023fd695
 23fe6fc:	1007ae00 	.word	0x1007ae00

023fe700 <__retarget_lock_acquire_recursive>:
 23fe700:	4770      	bx	lr

023fe702 <__retarget_lock_release>:
 23fe702:	4770      	bx	lr

023fe704 <__retarget_lock_release_recursive>:
 23fe704:	4770      	bx	lr
	...

023fe708 <dynalib_user>:
 23fe708:	b669 023f b691 023f b695 023f 0000 0000     i.?...?...?.....
 23fe718:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23fe728:	7574 6c61 4500 7272 726f 203a 5753 525f     tual.Error: SW_R
 23fe738:	5345 5445 2928 202e 5453 504f 0021 7245     ESET(). STOP!.Er
 23fe748:	6f72 3a72 7320 7465 635f 6e6f 6974 756e     ror: set_continu
 23fe758:	756f 5f73 6f6d 6564 2928 202e 5453 504f     ous_mode(). STOP
 23fe768:	0021 7245 6f72 3a72 7220 6165 5f64 6574     !.Error: read_te
 23fe778:	706d 7265 7461 7275 2865 2e29 5320 4f54     mperature(). STO
 23fe788:	2150 2000 0043 005a                         P!. C.Z.

023fe790 <_ZL12Org_01Glyphs>:
 23fe790:	0000 0000 0006 0001 0000 0501 0002 00fc     ................
 23fe7a0:	0001 0103 0004 00fc 0002 0505 0006 00fc     ................
 23fe7b0:	0006 0505 0006 00fc 000a 0505 0006 00fc     ................
 23fe7c0:	000e 0505 0006 00fc 0012 0101 0002 00fc     ................
 23fe7d0:	0013 0502 0003 00fc 0015 0502 0003 00fc     ................
 23fe7e0:	0017 0303 0004 00fd 0019 0303 0004 00fd     ................
 23fe7f0:	001b 0201 0002 0000 001c 0104 0005 00fe     ................
 23fe800:	001d 0101 0002 0000 001e 0505 0006 00fc     ................
 23fe810:	0022 0505 0006 00fc 0026 0501 0002 00fc     ".......&.......
 23fe820:	0027 0505 0006 00fc 002b 0505 0006 00fc     '.......+.......
 23fe830:	002f 0505 0006 00fc 0033 0505 0006 00fc     /.......3.......
 23fe840:	0037 0505 0006 00fc 003b 0505 0006 00fc     7.......;.......
 23fe850:	003f 0505 0006 00fc 0043 0505 0006 00fc     ?.......C.......
 23fe860:	0047 0401 0002 00fd 0048 0401 0002 00fd     G.......H.......
 23fe870:	0049 0503 0004 00fc 004b 0304 0005 00fd     I.......K.......
 23fe880:	004d 0503 0004 00fc 004f 0505 0006 00fc     M.......O.......
 23fe890:	0053 0505 0006 00fc 0057 0505 0006 00fc     S.......W.......
 23fe8a0:	005b 0505 0006 00fc 005f 0505 0006 00fc     [......._.......
 23fe8b0:	0063 0505 0006 00fc 0067 0505 0006 00fc     c.......g.......
 23fe8c0:	006b 0505 0006 00fc 006f 0505 0006 00fc     k.......o.......
 23fe8d0:	0073 0505 0006 00fc 0077 0505 0006 00fc     s.......w.......
 23fe8e0:	007b 0505 0006 00fc 007f 0505 0006 00fc     {...............
 23fe8f0:	0083 0505 0006 00fc 0087 0505 0006 00fc     ................
 23fe900:	008b 0505 0006 00fc 008f 0505 0006 00fc     ................
 23fe910:	0093 0505 0006 00fc 0097 0505 0006 00fc     ................
 23fe920:	009b 0505 0006 00fc 009f 0505 0006 00fc     ................
 23fe930:	00a3 0505 0006 00fc 00a7 0505 0006 00fc     ................
 23fe940:	00ab 0505 0006 00fc 00af 0505 0006 00fc     ................
 23fe950:	00b3 0505 0006 00fc 00b7 0505 0006 00fc     ................
 23fe960:	00bb 0505 0006 00fc 00bf 0502 0003 00fc     ................
 23fe970:	00c1 0505 0006 00fc 00c5 0502 0003 00fc     ................
 23fe980:	00c7 0203 0004 00fc 00c8 0105 0006 0001     ................
 23fe990:	00c9 0101 0002 00fc 00ca 0404 0005 00fd     ................
 23fe9a0:	00cc 0504 0005 00fc 00cf 0404 0005 00fd     ................
 23fe9b0:	00d1 0504 0005 00fc 00d4 0404 0005 00fd     ................
 23fe9c0:	00d6 0503 0004 00fc 00d8 0504 0005 00fd     ................
 23fe9d0:	00db 0504 0005 00fc 00de 0401 0002 00fd     ................
 23fe9e0:	00df 0502 0003 00fd 00e1 0504 0005 00fc     ................
 23fe9f0:	00e4 0501 0002 00fc 00e5 0405 0006 00fd     ................
 23fea00:	00e8 0404 0005 00fd 00ea 0404 0005 00fd     ................
 23fea10:	00ec 0504 0005 00fd 00ef 0504 0005 00fd     ................
 23fea20:	00f2 0404 0005 00fd 00f4 0404 0005 00fd     ................
 23fea30:	00f6 0505 0006 00fc 00fa 0404 0005 00fd     ................
 23fea40:	00fc 0404 0005 00fd 00fe 0405 0006 00fd     ................
 23fea50:	0101 0404 0005 00fd 0103 0504 0005 00fd     ................
 23fea60:	0106 0404 0005 00fd 0108 0503 0004 00fc     ................
 23fea70:	010a 0501 0002 00fc 010b 0503 0004 00fc     ................
 23fea80:	010d 0305 0006 00fd                         ........

023fea88 <_ZL13Org_01Bitmaps>:
 23fea88:	a0e8 d557 00f5 3efd 805f 8888 8088 bff4     ..W....>_.......
 23fea98:	802e 6a80 9540 aa80 5d80 c000 80f0 8808     ...j@....]......
 23feaa8:	0088 63fc 801f f8f8 0f7f f880 1f7e 8c80     ...c........~...
 23feab8:	107e fc80 1f3e fc80 1f3f f880 1042 fc80     ~...>...?...B...
 23feac8:	1f7f fc80 1f7e 9080 2ab0 f022 88f0 f8a8     ....~....*".....
 23fead8:	024e fd00 0f6f fc80 187f f480 1f7d fc00     N...o.......}...
 23feae8:	0f21 f480 1f63 fc00 0f3f fc80 083f fc00     !...c...?...?...
 23feaf8:	1f2f 8c80 187f f980 4f08 7880 2f85 8d80     /........O.x./..
 23feb08:	68b1 8480 0f21 fd80 5a6b fc80 1863 fc80     .h..!...kZ..c...
 23feb18:	1f63 fc80 087f fc00 3f63 fc80 297f fc00     c.......c?...)..
 23feb28:	1f3e f980 4208 8c00 1f63 8c80 a262 ad00     >....B..c...b...
 23feb38:	5f6b 8a80 a888 8c80 4254 f800 0f7f ea80     k_......TB......
 23feb48:	82c0 2008 d580 54c0 80f8 fff1 998f f8f0     ... ...T........
 23feb58:	1f8f f099 8fff a46b 9ff9 8f10 9099 55f0     ......k........U
 23feb68:	8ac0 90f9 fdf8 1063 99f9 9ff9 9ff9 f980     ......c.........
 23feb78:	209f 88f8 1f47 c827 0042 9f99 9799 6b8c     . ..G.'.B......k
 23feb88:	96f0 9969 109f 8f2e 222b 89f8 0fa8 00e0     ..i.....+"......

023feb98 <_ZL18FreeSansBold12pt7b>:
 23feb98:	ee9c 023f eba4 023f 7e20 001d               ..?...?. ~..

023feba4 <_ZL24FreeSansBold12pt7bGlyphs>:
 23feba4:	0000 0000 0007 0001 0000 1104 0308 00f0     ................
 23febb4:	0009 060a 010b 00ef 0011 100d 000d 00f1     ................
 23febc4:	002b 140d 000d 00ef 004c 1113 0115 00f0     +.......L.......
 23febd4:	0075 1110 0111 00f0 0097 0604 0106 00ef     u...............
 23febe4:	009a 1606 0108 00ef 00ab 1606 0108 00ef     ................
 23febf4:	00bc 0807 0109 00ef 00c3 0b0b 020e 00f6     ................
 23fec04:	00d3 0704 0106 00fe 00d7 0306 0108 00f9     ................
 23fec14:	00da 0304 0106 00fe 00dc 1106 0007 00f0     ................
 23fec24:	00e9 110c 010d 00f0 0103 1107 030e 00f0     ................
 23fec34:	0112 110c 010d 00f0 012c 110c 010d 00f0     ........,.......
 23fec44:	0146 110b 010d 00f0 015e 110c 010d 00f0     F.......^.......
 23fec54:	0178 110c 010d 00f0 0192 110b 010d 00f0     x...............
 23fec64:	01aa 110c 010d 00f0 01c4 110c 010d 00f0     ................
 23fec74:	01de 0c04 0106 00f5 01e4 1004 0106 00f5     ................
 23fec84:	01ec 0c0c 010e 00f5 01fe 090c 010e 00f7     ................
 23fec94:	020c 0c0c 010e 00f5 021e 120c 020f 00ef     ................
 23feca4:	0239 1515 0117 00ef 0271 1210 0011 00ef     9.......q.......
 23fecb4:	0295 120e 0211 00ef 02b5 1210 0111 00ef     ................
 23fecc4:	02d9 120f 0211 00ef 02fb 120d 0210 00ef     ................
 23fecd4:	0319 120c 020f 00ef 0334 1210 0112 00ef     ........4.......
 23fece4:	0358 120e 0212 00ef 0378 1204 0207 00ef     X.......x.......
 23fecf4:	0381 120b 010e 00ef 039a 1210 0211 00ef     ................
 23fed04:	03be 120b 020f 00ef 03d7 1211 0215 00ef     ................
 23fed14:	03fe 120f 0212 00ef 0420 1211 0113 00ef     ........ .......
 23fed24:	0447 120e 0210 00ef 0467 1311 0113 00ef     G.......g.......
 23fed34:	0490 1210 0211 00ef 04b4 120f 0110 00ef     ................
 23fed44:	04d6 120c 020f 00ef 04f1 120e 0212 00ef     ................
 23fed54:	0511 120f 0010 00ef 0533 1217 0017 00ef     ........3.......
 23fed64:	0567 120f 0110 00ef 0589 1210 000f 00ef     g...............
 23fed74:	05ad 120d 010f 00ef 05cb 1706 0208 00ef     ................
 23fed84:	05dd 1107 0007 00f0 05ec 1706 0008 00ef     ................
 23fed94:	05fe 0b0c 010e 00f0 060f 020f ff0d 0004     ................
 23feda4:	0613 0304 0006 00ef 0615 0d0d 010e 00f4     ................
 23fedb4:	062b 120d 020f 00ef 0649 0d0c 010d 00f4     +.......I.......
 23fedc4:	065d 120d 010f 00ef 067b 0d0d 010e 00f4     ].......{.......
 23fedd4:	0691 1207 0108 00ef 06a1 120d 010f 00f4     ................
 23fede4:	06bf 120c 020e 00ef 06da 1204 0207 00ef     ................
 23fedf4:	06e3 1706 0007 00ef 06f5 120c 020e 00ef     ................
 23fee04:	0710 1204 0206 00ef 0719 0d13 0215 00f4     ................
 23fee14:	0738 0d0c 020f 00f4 074c 0d0d 010f 00f4     8.......L.......
 23fee24:	0762 120d 020f 00f4 0780 120d 010f 00f4     b...............
 23fee34:	079e 0d08 0209 00f4 07ab 0d0c 010d 00f4     ................
 23fee44:	07bf 0f06 0108 00f2 07cb 0d0c 020f 00f4     ................
 23fee54:	07df 0d0d 000d 00f4 07f5 0d12 0013 00f4     ................
 23fee64:	0813 0d0d 000d 00f4 0829 120d 000d 00f4     ........).......
 23fee74:	0847 0d0a 010c 00f4 0858 1706 0109 00ef     G.......X.......
 23fee84:	086a 1602 0207 00ef 0870 1706 0309 00ef     j.......p.......
 23fee94:	0882 050c 000c 00f9                         ........

023fee9c <_ZL25FreeSansBold12pt7bBitmaps>:
 23fee9c:	ffff ffff 6676 ff60 f3f0 fffc cf3f 9861     ....vf`.....?.a.
 23feeac:	0e60 7370 1883 f7ff bfff 73fc 1883 c718     `.ps.......s....
 23feebc:	bfff fffd 18e3 c139 0ece 0270 7e00 f80f     ......9...p..~..
 23feecc:	e77f b9af c83d 400f 003f 00ff 05fc 27ff     ....=..@?......'
 23feedc:	3ff9 efeb 3ffe 7ce0 8000 0004 063c c10f     .?...?.|....<...
 23feeec:	fc81 7330 0c8c 8131 60ce cc1f f303 3c00     ..0s..1..`.....<
 23feefc:	8067 f819 7f02 ce80 1170 0686 c139 f887     g.......p...9...
 23fef0c:	7e30 070c 0780 1f80 3fc0 3ce0 3ce0 3ee0     0~.......?.<.<.>
 23fef1c:	0fe0 07c0 3f00 7f8c f1cc f0fc f0f8 f878     .....?........x.
 23fef2c:	7ff8 3ffc 1fde ff8e 66ff 730c 718e 38c7     ...?.....f.s.q.8
 23fef3c:	8ee3 e338 1c8e c371 188e c370 1c87 e338     ..8...q...p...8.
 23fef4c:	1c87 c771 711c 38ce 1ce7 8063 2310 f35f     ..q..q.8..c..#_.
 23fef5c:	1b87 0e14 c001 0738 ff0f ffff 70f8 010e     ......8......p..
 23fef6c:	38c0 ff00 36f3 ffc0 c0ff f0ff 300c 1886     .8...6.......0..
 23fef7c:	0c61 c230 6118 3084 1fc0 fc83 e77f f09e     a.0..a.0........
 23fef8c:	0fff fff0 f00f 0fff fff0 f00f 9ef7 e37f     ................
 23fef9c:	0ffc 0600 7f1c e3ff 8fc7 3c1e f178 c7e3     ...........<x...
 23fefac:	1e8f 831f 7ffc 9fef fff0 000f 0ff0 e001     ................
 23fefbc:	0f3c e081 033c 7f80 fff7 f07f 071f fffc     <...<...........
 23fefcc:	1eef e0f1 031e 78c0 c007 001e 0ff0 fff0     .......x........
 23fefdc:	7f1f fce7 801f c003 1ff8 e107 27bc f38c     .............'..
 23fefec:	631e 7bd8 ffff feff 8007 1ef0 c003 e73f     .c.{..........?.
 23feffc:	7ffe 00e7 0660 7ff8 fecf f0f1 000f 0ff0     ....`...........
 23ff00c:	fe00 ff1e fce7 003f 830f 7ffc 9fe7 0ff0     ......?.........
 23ff01c:	ff78 fecf fff9 f00f 0fff f7f0 7f9f fce3     x...............
 23ff02c:	800f ffff ffff e080 071c e001 0f38 c001     ............8...
 23ff03c:	0f78 e001 0f38 e001 003c 030f 7ffc 9ec7     x...8...<.......
 23ff04c:	e770 390e f8c1 c73f f09e 0fff fff0 7f9f     p..9..?.........
 23ff05c:	fce3 801f 031f 7ffc 9eef eff0 f00f 0fff     ................
 23ff06c:	f7f9 3fff eff1 ef00 7f1e fce7 001f f0ff     ...?............
 23ff07c:	0000 ff0f f0ff 0000 ff0f 6c11 1000 0307     ...........l....
 23ff08c:	fcf1 0f7e e080 c00f 803f 007f 03f0 ffff     ..~.....?.......
 23ff09c:	ffff 00f0 0000 ff00 ffff f0ff 0e00 fc00     ................
 23ff0ac:	f007 e00f 001f 7ff0 8f1f f0e0 0008 071f     ................
 23ff0bc:	7ffc 9fef fff0 000f 0ff0 e001 073c f080     ............<...
 23ff0cc:	000e 00e0 f000 000f 00f0 00fe fc1f c003     ................
 23ff0dc:	38f0 c301 0780 3d18 8799 6cec c371 06c3     .8.....=...lq...
 23ff0ec:	181e f130 8781 188c 607c 63c3 3b8e df8f     ..0.....|`.c.;..
 23ff0fc:	3c8c 70f0 0100 00c0 8007 1f80 00fe c01f     .<.p............
 23ff10c:	0300 03e0 03e0 07e0 07f0 07f0 0f70 0e78     ............p.x.
 23ff11c:	0e78 1e38 1c3c 3f3c 3ffc 3ffe 78fe 780e     x.8.<.<?.?.?.x.x
 23ff12c:	700f f00f ff07 ffc3 ffcf 3e3c 7bf0 efc1     .p........<>.{..
 23ff13c:	bf0f fffc ffe3 07cf 0fbc 3ff0 ffc0 ff07     ...........?....
 23ff14c:	fffe fffb 0780 1fe0 3ff8 7cfc 783e f81f     .........?.|>x..
 23ff15c:	f00f f000 f000 f000 f000 f000 f800 780f     ...............x
 23ff16c:	7c1f 3f3e 1ffe 07fc fff0 ffe1 ffe3 83e7     .|>?............
 23ff17c:	03ef 07de 07fc 0ff8 1ff0 3fe0 7fc0 ff80     ...........?....
 23ff18c:	fe03 bc07 7f1f fffc fff1 ff80 fff7 fdbf     ................
 23ff19c:	0fe0 7800 c003 fc1f e7ff 3cff e001 000f     ...x.......<....
 23ff1ac:	0378 1fc0 ffff ffff ffc0 ffff ffff f000     x...............
 23ff1bc:	000f 0ff0 fffe feef 0ff0 f000 000f 0ff0     ................
 23ff1cc:	f000 000f f003 fc0f fe3f 1f3e 0778 0078     ........?.>.x.x.
 23ff1dc:	00f0 00f0 7ff0 7ff0 7ff0 07f0 0778 0f7c     ............x.|.
 23ff1ec:	1f3e fb3f fb0f e303 3ff0 ffc0 fc03 f00f     >.?......?......
 23ff1fc:	c03f 03ff ffff ffff ffff fc03 f00f c03f     ?.............?.
 23ff20c:	03ff 0ffc 3ff0 f0c0 ffff ffff ffff ffff     .....?..........
 23ff21c:	01ff 3ce0 8007 1ef0 c003 0f78 e001 073c     ...<......x...<.
 23ff22c:	fff8 e31f 7bfc 7ffe e0c3 3ef0 3cf0 78f0     .....{.....>.<.x
 23ff23c:	f0f0 e0f1 c0f3 80f7 00ff 80ff 80ff c0fb     ................
 23ff24c:	e0f1 f0f0 f0f0 78f0 3cf0 3ef0 1ef0 1ef0     .......x.<.>....
 23ff25c:	c003 0f78 e001 073c f080 031e 78c0 010f     ..x...<......x..
 23ff26c:	3ce0 ff07 ffff f8fc fe1f ff0f ff0f ff87     .<..............
 23ff27c:	ffc3 ffe1 fff9 effc 77fe 3bfb ddfd fcfe     .........w.;....
 23ff28c:	7eff 9f7f cf3f e79f f38f f8c7 c0e3 1ff0     .~..?...........
 23ff29c:	3ff0 7ff0 ffe0 ffe1 fdc3 fbc7 f38f e79f     .?..............
 23ff2ac:	c73f 8f7f 0fff 1ffe 1ffc 1ff8 3ff0 3ce0     ?............?.<
 23ff2bc:	e003 fc0f ff0f c787 80c7 c0f3 c07b e01f     ............{...
 23ff2cc:	f00f f807 fc03 fe01 f700 f380 78c0 f8f0     .............x..
 23ff2dc:	fc7f fc1f f803 ff00 ffe3 ffef 1fbc 3ff0     ...............?
 23ff2ec:	ffc0 fc03 ff1f fffb fecf 003c 03f0 0fc0     ..........<.....
 23ff2fc:	3c00 f000 c003 0300 0fe0 0ffc 87ff c7c7     .<..............
 23ff30c:	f380 7bc0 1fc0 0fe0 07f0 03f8 01fc 04fe     ...{............
 23ff31c:	87f7 c3f3 f0f8 7ff8 1ffc 83ff 80f1 0000     ................
 23ff32c:	f8ff fcff fcff 3ef0 1ef0 1ef0 1ef0 3cf0     .......>.......<
 23ff33c:	f8ff f0ff f8ff 3cf0 3cf0 3cf0 3cf0 3cf0     .......<.<.<.<.<
 23ff34c:	3cf0 1ff0 c00f e17f e7ff efc3 de03 3c00     .<.............<
 23ff35c:	7f00 7f00 3ff0 0ff8 01f8 01f0 03fe 0fde     .....?..........
 23ff36c:	febf f83f c01f ffff ffff f0f0 000f 0ff0     ..?.............
 23ff37c:	f000 000f 0ff0 f000 000f 0ff0 f000 000f     ................
 23ff38c:	f0f0 c03f 03ff 0ffc 3ff0 ffc0 fc03 f00f     ..?......?......
 23ff39c:	c03f 03ff 0ffc 3ff0 f7c0 9f87 3ffe 3ff0     ?......?.....?.?
 23ff3ac:	7000 f00e e03d c079 81e3 87c7 0e87 1c0e     .p..=.y.........
 23ff3bc:	781e e01c c039 8073 007e 01fc 01f8 03e0     .x..9.s.~.......
 23ff3cc:	07c0 7080 1c38 f0e0 e179 f3f0 e1c3 87e3     ...p8...y.......
 23ff3dc:	87c3 870f 3b0e 1e9e 3877 ee1c 3970 e0cc     .....;..w8..p9..
 23ff3ec:	9973 6ec0 003f 7efc f801 03fc f8f0 e103     s..n?..~........
 23ff3fc:	07e0 c083 070f f080 f03c e1f9 e7e1 cf83     ........<.......
 23ff40c:	fc03 f003 e007 8007 000f 003f 01ff 07fe     ..........?.....
 23ff41c:	0f9e 3c1e f83c e03d f078 781e 781e 3c3c     ...<<.=.x..x.x<<
 23ff42c:	3c3c 1e78 0e78 0f70 07f0 07e0 03e0 03c0     <<x.x.p.........
 23ff43c:	03c0 03c0 03c0 03c0 03c0 03c0 ffc0 ffff     ................
 23ff44c:	feff f001 000f 0ff0 f800 8007 0778 7c80     ............x..|
 23ff45c:	c003 033c 1fc0 ffff ffff ffc0 fcff cff3     ..<.............
 23ff46c:	f33c 3ccf cff3 f33c 3ccf ffff c1c0 0381     <..<..<..<......
 23ff47c:	0406 180c 3010 4060 81c1 0603 ffff 3ccf     .....0`@.......<
 23ff48c:	cff3 f33c 3ccf cff3 f33c ffcf c0ff 000f     ..<..<..<.......
 23ff49c:	0ff0 f801 831b 399c 0cc3 e770 e00e ff70     .......9..p...p.
 23ff4ac:	ffff e6fc 1f30 ff83 fd1f e0e1 030f fff9     ....0...........
 23ff4bc:	1edf f7f0 bf8f fffc cfe3 f080 8007 013c     ..............<.
 23ff4cc:	0fe0 7b00 ffc3 fe9f f7f8 fc83 e01f 07ff     ...{............
 23ff4dc:	3ff8 dfe3 fffe bee7 0f00 fe83 f77f f08f     .?..............
 23ff4ec:	007f 0ff0 f000 8f77 f37f 0ffe 0080 0378     ......w.......x.
 23ff4fc:	1ec0 f000 8f07 ffbc ffef ff78 fc83 e01f     ..........x.....
 23ff50c:	07ff 3df8 efe3 3fff fbf8 1fc0 fe81 f91f     ...=...?........
 23ff51c:	cff1 7f07 fffb 00de 03f0 9fc3 7ffc f8c0     ................
 23ff52c:	3e00 fbfd 9fc7 3cbf f178 c7e3 1e8f 783c     .>.....<x.....<x
 23ff53c:	1ef0 fb79 fedf fff1 f807 c13f 0ffe 7ff0     ..y.......?.....
 23ff54c:	dfc7 7ffe f7f1 3c80 ff01 7f1e fef0 f000     .......<........
 23ff55c:	000f 0ff0 f000 7c0f efff f9ff 0fff fff0     .......|........
 23ff56c:	f00f 0fff fff0 f00f 0fff f0ff ff0f ffff     ................
 23ff57c:	ffff 3cff c0f3 f300 3ccf cff3 f33c 3ccf     ...<.....<..<..<
 23ff58c:	cff3 ffff f080 000f 0ff0 f000 0f0f eff1     ................
 23ff59c:	f73c f08f 0fff fff8 3c8f cff1 f01e 0fef     <........<......
 23ff5ac:	ffff ffff ffff ffff f7ff 9f8f fbfb ffff     ................
 23ff5bc:	f8fc 1eff e31f fcc3 7f78 0f8f e1f1 3cfe     ........x......<
 23ff5cc:	c73f f887 fff0 1e1e cff7 fffe 9fff fff0     ?...............
 23ff5dc:	f00f 0fff fff0 f00f 0fff f0f0 810f 1fff     ................
 23ff5ec:	f1fc 07ef 3ff8 fec1 f00f c77b fc9f c07f     .....?....{.....
 23ff5fc:	00f8 c7f7 3fff f1fd 07ef 3ff8 fec1 f00f     .....?.....?....
 23ff60c:	c77f fdbf cfff 7878 c003 001e 07f0 0080     ......xx........
 23ff61c:	790f dfff f1fe 07ff 3ff8 fec1 f00f c77b     .y.......?....{.
 23ff62c:	fedf f17f 80f7 013c 0fe0 7800 c003 f7f3     ......<....x....
 23ff63c:	f8ff f0f0 f0f0 f0f0 f0f0 1ff0 fc87 efff     ................
 23ff64c:	f80f f00f e07f 01ff 0fff e7ff 1ffe 7980     ...............y
 23ff65c:	bfe7 e7fd 799e 9ee7 f37d f0c0 0fff fff0     .....y..}.......
 23ff66c:	f00f 0fff fff0 f00f 1fff f7ff 3eff f0f0     .............>..
 23ff67c:	837b 1c9e e3f1 1c8e 7770 b883 c01d 037e     {.......pw....~.
 23ff68c:	1fe0 7000 f000 dce1 7778 3d1f cfe7 b379     ...p....xw.=..y.
 23ff69c:	6c8e bbe3 ee38 1ffc 073f c1c7 f0f1 787c     .l..8...?.....|x
 23ff6ac:	1e0e 7800 c7f3 788f 813b 07fc 1ec0 f001     ...x...x;.......
 23ff6bc:	c01f 0fef f178 87e7 f000 837b 1c9e e371     ....x.....{...q.
 23ff6cc:	1e8e 7370 b883 c01f 037e 0fe0 7000 8003     ..ps....~....p..
 23ff6dc:	073c 3ec0 e001 ff00 ffff 0ffc 8307 e0c1     <..>............
 23ff6ec:	78f0 0f3c ffff c0ff f31c 38ce 8ee3 e338     .x<........8..8.
 23ff6fc:	f0bc 8ee3 e338 3c8e c0f1 ffff ffff f0ff     ....8..<........
 23ff70c:	8fe3 711c 1cc7 c771 3d0f 1cc7 c771 f31c     ...q..q..=..q...
 23ff71c:	00ce 0f78 cfe0 7f30 e001 0000               ..x...0.....

023ff728 <_ZL6Org_01>:
 23ff728:	ea88 023f e790 023f 7e20 0007               ..?...?. ~..

023ff734 <_ZL4font>:
 23ff734:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff744:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff754:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff764:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff774:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff784:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff794:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff7a4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff7b4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff7c4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff7d4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff7e4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff7f4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff804:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff814:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff824:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff834:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff844:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff854:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff864:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff874:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff884:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff894:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff8a4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff8b4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff8c4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff8d4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff8e4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff8f4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff904:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff914:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff924:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff934:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff944:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff954:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff964:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff974:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff984:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff994:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff9a4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff9b4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff9c4:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff9d4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff9e4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ff9f4:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ffa04:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ffa14:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ffa24:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ffa34:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ffa44:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ffa54:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ffa64:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ffa74:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ffa84:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ffa94:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ffaa4:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ffab4:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ffac4:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ffad4:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ffae4:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ffaf4:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ffb04:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ffb14:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ffb24:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ffb34:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ffb44:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ffb54:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ffb64:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ffb74:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ffb84:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ffb94:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ffba4:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ffbb4:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ffbc4:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ffbd4:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ffbe4:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ffbf4:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ffc04:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ffc14:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ffc24:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

023ffc34 <_ZTV12Adafruit_GFX>:
	...
 23ffc44:	c3ad 023f db11 023f b6ad 023f be5f 023f     ..?...?...?._.?.
 23ffc54:	be61 023f be93 023f be6f 023f be81 023f     a.?...?.o.?...?.
 23ffc64:	bda1 023f be5f 023f c089 023f c087 023f     ..?._.?...?...?.
 23ffc74:	beab 023f bee9 023f bf23 023f bf69 023f     ..?...?.#.?.i.?.
 23ffc84:	bf85 023f c007 023f                         ..?...?.

023ffc8c <_ZTV15Adafruit_SPITFT>:
	...
 23ffc9c:	c3ad 023f db11 023f cc51 023f c6e7 023f     ..?...?.Q.?...?.
 23ffcac:	cc13 023f c807 023f cabf 023f ca67 023f     ..?...?...?.g.?.
 23ffcbc:	bda1 023f c713 023f c089 023f cb8d 023f     ..?...?...?...?.
 23ffccc:	c9eb 023f c96b 023f c8a7 023f bf69 023f     ..?.k.?...?.i.?.
 23ffcdc:	bf85 023f c007 023f b6ad 023f b6ad 023f     ..?...?...?...?.

023ffcec <_ZL11cmd_240x240>:
 23ffcec:	0109 9680 8011 3aff 5581 360a 0801 042a     .......:.U.6..*.
 23ffcfc:	0000 f000 042b 0000 f000 8021 130a 0a80     ....+.....!.....
 23ffd0c:	8029 00ff                                   )...

023ffd10 <_ZTV15Adafruit_ST7789>:
	...
 23ffd18:	cd17 023f cd7f 023f c3ad 023f db11 023f     ..?...?...?...?.
 23ffd28:	cc51 023f c6e7 023f cc13 023f c807 023f     Q.?...?...?...?.
 23ffd38:	cabf 023f ca67 023f bda1 023f c713 023f     ..?.g.?...?...?.
 23ffd48:	cd19 023f cb8d 023f c9eb 023f c96b 023f     ..?...?...?.k.?.
 23ffd58:	c8a7 023f bf69 023f bf85 023f c007 023f     ..?.i.?...?...?.
 23ffd68:	ce49 023f ce69 023f                         I.?.i.?.

023ffd70 <_ZTV15Adafruit_ST77xx>:
	...
 23ffd78:	cdd5 023f cebb 023f c3ad 023f db11 023f     ..?...?...?...?.
 23ffd88:	cc51 023f c6e7 023f cc13 023f c807 023f     Q.?...?...?...?.
 23ffd98:	cabf 023f ca67 023f bda1 023f c713 023f     ..?.g.?...?...?.
 23ffda8:	cdd7 023f cb8d 023f c9eb 023f c96b 023f     ..?...?...?.k.?.
 23ffdb8:	c8a7 023f bf69 023f bf85 023f c007 023f     ..?.i.?...?...?.
 23ffdc8:	ce49 023f ce69 023f                         I.?.i.?.

023ffdd0 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdd8:	d77b 023f d771 023f d767 023f d75d 023f     {.?.q.?.g.?.].?.
 23ffde8:	d751 023f d745 023f d9ed 023f d9f5 023f     Q.?.E.?...?...?.
 23ffdf8:	d739 023f d731 023f d727 023f d71d 023f     9.?.1.?.'.?...?.
 23ffe08:	da25 023f                                   %.?.

023ffe0c <_ZTV7TwoWire>:
	...
 23ffe14:	d799 023f d7e3 023f d7bb 023f d79b 023f     ..?...?...?...?.
 23ffe24:	d7c3 023f d7cb 023f d7d3 023f d7db 023f     ..?...?...?...?.

023ffe34 <_ZTV9IPAddress>:
	...
 23ffe3c:	d8bd 023f d8ad 023f d8af 023f 7061 0070     ..?...?...?.app.

023ffe4c <_ZTVN5spark12NetworkClassE>:
	...
 23ffe54:	d9ad 023f d9b7 023f d9c1 023f d9cb 023f     ..?...?...?...?.
 23ffe64:	d9d5 023f d9e1 023f d9ed 023f d9f5 023f     ..?...?...?...?.
 23ffe74:	d9fd 023f da09 023f da11 023f da1b 023f     ..?...?...?...?.
 23ffe84:	da25 023f 616e 006e 6e69 0066 766f 0066     %.?.nan.inf.ovf.
 23ffe94:	002e                                        ..

023ffe96 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffe96:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffea6:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffeb6:	6d69 0065 0000                              ime...

023ffebc <_ZTV11USARTSerial>:
	...
 23ffec4:	df31 023f df9d 023f df75 023f db11 023f     1.?...?.u.?...?.
 23ffed4:	df45 023f df61 023f df53 023f df6f 023f     E.?.a.?.S.?.o.?.
 23ffee4:	df33 023f df37 023f                         3.?.7.?.

023ffeec <_ZTV9USBSerial>:
	...
 23ffef4:	dfe1 023f e049 023f e01f 023f db11 023f     ..?.I.?...?...?.
 23fff04:	e011 023f dfe3 023f dff3 023f e043 023f     ..?...?...?.C.?.
 23fff14:	e003 023f dfdb 023f                         ..?...?.

023fff1c <_ZTVN5spark9WiFiClassE>:
	...
 23fff24:	e13f 023f e135 023f e12b 023f e0e1 023f     ?.?.5.?.+.?...?.
 23fff34:	e11f 023f e113 023f d9ed 023f d9f5 023f     ..?...?...?...?.
 23fff44:	e107 023f e0ff 023f e0f5 023f e0eb 023f     ..?...?...?...?.
 23fff54:	da25 023f                                   %.?.

023fff58 <_ZSt7nothrow>:
 23fff58:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff68:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff78:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff88:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fff98:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffa8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffb8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fba2d 	.word	0x023fba2d
 23fffd0:	023fd70d 	.word	0x023fd70d
 23fffd4:	023fd785 	.word	0x023fd785
 23fffd8:	023fd99d 	.word	0x023fd99d
 23fffdc:	023fdafd 	.word	0x023fdafd
 23fffe0:	023fdd89 	.word	0x023fdd89
 23fffe4:	023fdef9 	.word	0x023fdef9
 23fffe8:	023fdf1d 	.word	0x023fdf1d
 23fffec:	023fe149 	.word	0x023fe149
