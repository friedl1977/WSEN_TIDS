
/Users/friedl/Desktop/Projects/WSEN_TIDS/target/5.4.0/argon/WSEN_TIDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004f08  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8f24  000b8f24  00008f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000007c  2003e5bc  000b8f48  0000e5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001b8  2003e638  2003e638  0001e638  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b8fc4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b8fc8  000b8fc8  00018fc8  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8fce  000b8fce  00018fce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8ff2  000b8ff2  00018ff2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00142511  00000000  00000000  00018ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015be4  00000000  00000000  0015b507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00040089  00000000  00000000  001710eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002f00  00000000  00000000  001b1174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a800  00000000  00000000  001b4074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041d28  00000000  00000000  001be874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004e5da  00000000  00000000  0020059c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013cafe  00000000  00000000  0024eb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008950  00000000  00000000  0038b674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__gedf2>:
   b47b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47bc:	e006      	b.n	b47cc <__cmpdf2+0x4>
   b47be:	bf00      	nop

000b47c0 <__ledf2>:
   b47c0:	f04f 0c01 	mov.w	ip, #1
   b47c4:	e002      	b.n	b47cc <__cmpdf2+0x4>
   b47c6:	bf00      	nop

000b47c8 <__cmpdf2>:
   b47c8:	f04f 0c01 	mov.w	ip, #1
   b47cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47dc:	bf18      	it	ne
   b47de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e2:	d01b      	beq.n	b481c <__cmpdf2+0x54>
   b47e4:	b001      	add	sp, #4
   b47e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ea:	bf0c      	ite	eq
   b47ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f0:	ea91 0f03 	teqne	r1, r3
   b47f4:	bf02      	ittt	eq
   b47f6:	ea90 0f02 	teqeq	r0, r2
   b47fa:	2000      	moveq	r0, #0
   b47fc:	4770      	bxeq	lr
   b47fe:	f110 0f00 	cmn.w	r0, #0
   b4802:	ea91 0f03 	teq	r1, r3
   b4806:	bf58      	it	pl
   b4808:	4299      	cmppl	r1, r3
   b480a:	bf08      	it	eq
   b480c:	4290      	cmpeq	r0, r2
   b480e:	bf2c      	ite	cs
   b4810:	17d8      	asrcs	r0, r3, #31
   b4812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b4816:	f040 0001 	orr.w	r0, r0, #1
   b481a:	4770      	bx	lr
   b481c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4824:	d102      	bne.n	b482c <__cmpdf2+0x64>
   b4826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482a:	d107      	bne.n	b483c <__cmpdf2+0x74>
   b482c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4834:	d1d6      	bne.n	b47e4 <__cmpdf2+0x1c>
   b4836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483a:	d0d3      	beq.n	b47e4 <__cmpdf2+0x1c>
   b483c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4840:	4770      	bx	lr
   b4842:	bf00      	nop

000b4844 <__aeabi_cdrcmple>:
   b4844:	4684      	mov	ip, r0
   b4846:	4610      	mov	r0, r2
   b4848:	4662      	mov	r2, ip
   b484a:	468c      	mov	ip, r1
   b484c:	4619      	mov	r1, r3
   b484e:	4663      	mov	r3, ip
   b4850:	e000      	b.n	b4854 <__aeabi_cdcmpeq>
   b4852:	bf00      	nop

000b4854 <__aeabi_cdcmpeq>:
   b4854:	b501      	push	{r0, lr}
   b4856:	f7ff ffb7 	bl	b47c8 <__cmpdf2>
   b485a:	2800      	cmp	r0, #0
   b485c:	bf48      	it	mi
   b485e:	f110 0f00 	cmnmi.w	r0, #0
   b4862:	bd01      	pop	{r0, pc}

000b4864 <__aeabi_dcmpeq>:
   b4864:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4868:	f7ff fff4 	bl	b4854 <__aeabi_cdcmpeq>
   b486c:	bf0c      	ite	eq
   b486e:	2001      	moveq	r0, #1
   b4870:	2000      	movne	r0, #0
   b4872:	f85d fb08 	ldr.w	pc, [sp], #8
   b4876:	bf00      	nop

000b4878 <__aeabi_dcmplt>:
   b4878:	f84d ed08 	str.w	lr, [sp, #-8]!
   b487c:	f7ff ffea 	bl	b4854 <__aeabi_cdcmpeq>
   b4880:	bf34      	ite	cc
   b4882:	2001      	movcc	r0, #1
   b4884:	2000      	movcs	r0, #0
   b4886:	f85d fb08 	ldr.w	pc, [sp], #8
   b488a:	bf00      	nop

000b488c <__aeabi_dcmple>:
   b488c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4890:	f7ff ffe0 	bl	b4854 <__aeabi_cdcmpeq>
   b4894:	bf94      	ite	ls
   b4896:	2001      	movls	r0, #1
   b4898:	2000      	movhi	r0, #0
   b489a:	f85d fb08 	ldr.w	pc, [sp], #8
   b489e:	bf00      	nop

000b48a0 <__aeabi_dcmpge>:
   b48a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a4:	f7ff ffce 	bl	b4844 <__aeabi_cdrcmple>
   b48a8:	bf94      	ite	ls
   b48aa:	2001      	movls	r0, #1
   b48ac:	2000      	movhi	r0, #0
   b48ae:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b2:	bf00      	nop

000b48b4 <__aeabi_dcmpgt>:
   b48b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48b8:	f7ff ffc4 	bl	b4844 <__aeabi_cdrcmple>
   b48bc:	bf34      	ite	cc
   b48be:	2001      	movcc	r0, #1
   b48c0:	2000      	movcs	r0, #0
   b48c2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48c6:	bf00      	nop

000b48c8 <__aeabi_dcmpun>:
   b48c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d0:	d102      	bne.n	b48d8 <__aeabi_dcmpun+0x10>
   b48d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48d6:	d10a      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e0:	d102      	bne.n	b48e8 <__aeabi_dcmpun+0x20>
   b48e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48e6:	d102      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48e8:	f04f 0000 	mov.w	r0, #0
   b48ec:	4770      	bx	lr
   b48ee:	f04f 0001 	mov.w	r0, #1
   b48f2:	4770      	bx	lr

000b48f4 <__aeabi_d2iz>:
   b48f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48fc:	d215      	bcs.n	b492a <__aeabi_d2iz+0x36>
   b48fe:	d511      	bpl.n	b4924 <__aeabi_d2iz+0x30>
   b4900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4908:	d912      	bls.n	b4930 <__aeabi_d2iz+0x3c>
   b490a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b490e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	bf18      	it	ne
   b4920:	4240      	negne	r0, r0
   b4922:	4770      	bx	lr
   b4924:	f04f 0000 	mov.w	r0, #0
   b4928:	4770      	bx	lr
   b492a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492e:	d105      	bne.n	b493c <__aeabi_d2iz+0x48>
   b4930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4934:	bf08      	it	eq
   b4936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493a:	4770      	bx	lr
   b493c:	f04f 0000 	mov.w	r0, #0
   b4940:	4770      	bx	lr
   b4942:	bf00      	nop

000b4944 <__aeabi_d2uiz>:
   b4944:	004a      	lsls	r2, r1, #1
   b4946:	d211      	bcs.n	b496c <__aeabi_d2uiz+0x28>
   b4948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b494c:	d211      	bcs.n	b4972 <__aeabi_d2uiz+0x2e>
   b494e:	d50d      	bpl.n	b496c <__aeabi_d2uiz+0x28>
   b4950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4958:	d40e      	bmi.n	b4978 <__aeabi_d2uiz+0x34>
   b495a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4966:	fa23 f002 	lsr.w	r0, r3, r2
   b496a:	4770      	bx	lr
   b496c:	f04f 0000 	mov.w	r0, #0
   b4970:	4770      	bx	lr
   b4972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4976:	d102      	bne.n	b497e <__aeabi_d2uiz+0x3a>
   b4978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b497c:	4770      	bx	lr
   b497e:	f04f 0000 	mov.w	r0, #0
   b4982:	4770      	bx	lr

000b4984 <strlen>:
   b4984:	4603      	mov	r3, r0
   b4986:	f813 2b01 	ldrb.w	r2, [r3], #1
   b498a:	2a00      	cmp	r2, #0
   b498c:	d1fb      	bne.n	b4986 <strlen+0x2>
   b498e:	1a18      	subs	r0, r3, r0
   b4990:	3801      	subs	r0, #1
   b4992:	4770      	bx	lr

000b4994 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4994:	4809      	ldr	r0, [pc, #36]	; (b49bc <module_user_pre_init+0x28>)
   b4996:	490a      	ldr	r1, [pc, #40]	; (b49c0 <module_user_pre_init+0x2c>)
   b4998:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b499a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b499c:	d005      	beq.n	b49aa <module_user_pre_init+0x16>
   b499e:	4a09      	ldr	r2, [pc, #36]	; (b49c4 <module_user_pre_init+0x30>)
   b49a0:	4282      	cmp	r2, r0
   b49a2:	d002      	beq.n	b49aa <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49a4:	1a12      	subs	r2, r2, r0
   b49a6:	f002 fd9d 	bl	b74e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49aa:	4807      	ldr	r0, [pc, #28]	; (b49c8 <module_user_pre_init+0x34>)
   b49ac:	4a07      	ldr	r2, [pc, #28]	; (b49cc <module_user_pre_init+0x38>)
   b49ae:	2100      	movs	r1, #0
   b49b0:	1a12      	subs	r2, r2, r0
   b49b2:	f002 fda5 	bl	b7500 <memset>
    return &link_global_data_start;
}
   b49b6:	4801      	ldr	r0, [pc, #4]	; (b49bc <module_user_pre_init+0x28>)
   b49b8:	bd08      	pop	{r3, pc}
   b49ba:	bf00      	nop
   b49bc:	2003e5bc 	.word	0x2003e5bc
   b49c0:	000b8f48 	.word	0x000b8f48
   b49c4:	2003e638 	.word	0x2003e638
   b49c8:	2003e638 	.word	0x2003e638
   b49cc:	2003e7f0 	.word	0x2003e7f0

000b49d0 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49d0:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49d2:	4e07      	ldr	r6, [pc, #28]	; (b49f0 <module_user_init+0x20>)
   b49d4:	4c07      	ldr	r4, [pc, #28]	; (b49f4 <module_user_init+0x24>)
    module_user_init_hook();
   b49d6:	f002 fc4d 	bl	b7274 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49da:	1ba4      	subs	r4, r4, r6
   b49dc:	08a4      	lsrs	r4, r4, #2
   b49de:	2500      	movs	r5, #0
   b49e0:	42ac      	cmp	r4, r5
   b49e2:	d100      	bne.n	b49e6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b49e4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b49e6:	f856 3b04 	ldr.w	r3, [r6], #4
   b49ea:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49ec:	3501      	adds	r5, #1
   b49ee:	e7f7      	b.n	b49e0 <module_user_init+0x10>
   b49f0:	000b8f00 	.word	0x000b8f00
   b49f4:	000b8f24 	.word	0x000b8f24

000b49f8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b49f8:	f000 b844 	b.w	b4a84 <setup>

000b49fc <module_user_loop>:
}

void module_user_loop() {
   b49fc:	b508      	push	{r3, lr}
    loop();
   b49fe:	f000 f9c7 	bl	b4d90 <loop>
    _post_loop();
}
   b4a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a06:	f002 bbed 	b.w	b71e4 <_post_loop>

000b4a0a <_Znaj>:
   b4a0a:	f001 be7f 	b.w	b670c <malloc>

000b4a0e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a0e:	f001 be85 	b.w	b671c <free>
	...

000b4a14 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a14:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a16:	4a03      	ldr	r2, [pc, #12]	; (b4a24 <__cxa_pure_virtual+0x10>)
   b4a18:	4903      	ldr	r1, [pc, #12]	; (b4a28 <__cxa_pure_virtual+0x14>)
   b4a1a:	200c      	movs	r0, #12
   b4a1c:	f001 fde2 	bl	b65e4 <panic_>
  while (1);
   b4a20:	e7fe      	b.n	b4a20 <__cxa_pure_virtual+0xc>
   b4a22:	bf00      	nop
   b4a24:	000b6325 	.word	0x000b6325
   b4a28:	000b764c 	.word	0x000b764c

000b4a2c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a2c:	7800      	ldrb	r0, [r0, #0]
   b4a2e:	fab0 f080 	clz	r0, r0
   b4a32:	0940      	lsrs	r0, r0, #5
   b4a34:	4770      	bx	lr

000b4a36 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a36:	2301      	movs	r3, #1
   b4a38:	7003      	strb	r3, [r0, #0]
   b4a3a:	4770      	bx	lr

000b4a3c <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4a3c:	b570      	push	{r4, r5, r6, lr}
   b4a3e:	4606      	mov	r6, r0
   b4a40:	460c      	mov	r4, r1
{
    if (base == 0) {
   b4a42:	4615      	mov	r5, r2
   b4a44:	b92a      	cbnz	r2, b4a52 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b4a46:	6803      	ldr	r3, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b4a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b4a4c:	689b      	ldr	r3, [r3, #8]
   b4a4e:	b2c9      	uxtb	r1, r1
   b4a50:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b4a52:	2900      	cmp	r1, #0
   b4a54:	da0b      	bge.n	b4a6e <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
   b4a56:	2a0a      	cmp	r2, #10
   b4a58:	d109      	bne.n	b4a6e <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b4a5a:	212d      	movs	r1, #45	; 0x2d
   b4a5c:	f002 f8a8 	bl	b6bb0 <_ZN5Print5printEc>
            val = -n;
   b4a60:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4a62:	b2ea      	uxtb	r2, r5
   b4a64:	4630      	mov	r0, r6
}
   b4a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4a6a:	f002 b8ba 	b.w	b6be2 <_ZN5Print11printNumberEmh>
            val = n;
   b4a6e:	4621      	mov	r1, r4
   b4a70:	e7f7      	b.n	b4a62 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

000b4a72 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b4a72:	b510      	push	{r4, lr}
   b4a74:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b4a76:	f7ff ffe1 	bl	b4a3c <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
   b4a7a:	4620      	mov	r0, r4
    }
   b4a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4a80:	f002 b899 	b.w	b6bb6 <_ZN5Print7printlnEv>

000b4a84 <setup>:
int status;
int ODR = 25;                                                       // Set temperature read frequency: (10 000/ODR)  e.g. 25 = 4s
int print_temp = 0;                                                 // The Output Data Rate in Hz
int previous_temp = 0; 

void setup() {
   b4a84:	b510      	push	{r4, lr}

  delay(1000);
   b4a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4a8a:	f001 fe5f 	bl	b674c <delay>
  Serial.begin(115400); // (115400)
   b4a8e:	f002 fb23 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4a92:	491c      	ldr	r1, [pc, #112]	; (b4b04 <setup+0x80>)
  tft.init(320, 240);                                                 // Init ST7789 320x240 
  tft.fillScreen(ST77XX_BLACK);                                       // creates black background in display
  tft.setRotation(3);                                                 // set screen in landscape mode

  sensor.init(TIDS_ADDRESS_I2C_1);                                    // Initialize the I2C interface
  status = sensor.SW_RESET();                                         // Perform a software reset
   b4a94:	4c1c      	ldr	r4, [pc, #112]	; (b4b08 <setup+0x84>)
  Serial.begin(115400); // (115400)
   b4a96:	f002 fb13 	bl	b70c0 <_ZN9USBSerial5beginEl>
  pinMode (LDR_1, INPUT);                                             // Set LDR pins as INPUT pins
   b4a9a:	2100      	movs	r1, #0
   b4a9c:	2013      	movs	r0, #19
   b4a9e:	f002 fc59 	bl	b7354 <pinMode>
  pinMode (LDR_2, INPUT);                                             // Set LDR pins as INPUT pins
   b4aa2:	2100      	movs	r1, #0
   b4aa4:	2012      	movs	r0, #18
   b4aa6:	f002 fc55 	bl	b7354 <pinMode>
  tft.init(320, 240);                                                 // Init ST7789 320x240 
   b4aaa:	22f0      	movs	r2, #240	; 0xf0
   b4aac:	4817      	ldr	r0, [pc, #92]	; (b4b0c <setup+0x88>)
   b4aae:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b4ab2:	f001 fb2d 	bl	b6110 <_ZN15Adafruit_ST77894initEtt>
  tft.fillScreen(ST77XX_BLACK);                                       // creates black background in display
   b4ab6:	4815      	ldr	r0, [pc, #84]	; (b4b0c <setup+0x88>)
   b4ab8:	2100      	movs	r1, #0
   b4aba:	f000 fc07 	bl	b52cc <_ZN12Adafruit_GFX10fillScreenEt>
  tft.setRotation(3);                                                 // set screen in landscape mode
   b4abe:	4813      	ldr	r0, [pc, #76]	; (b4b0c <setup+0x88>)
   b4ac0:	2103      	movs	r1, #3
   b4ac2:	f001 fae0 	bl	b6086 <_ZN15Adafruit_ST778911setRotationEh>
  sensor.init(TIDS_ADDRESS_I2C_1);                                    // Initialize the I2C interface
   b4ac6:	2138      	movs	r1, #56	; 0x38
   b4ac8:	4811      	ldr	r0, [pc, #68]	; (b4b10 <setup+0x8c>)
   b4aca:	f000 f9e1 	bl	b4e90 <_ZN11Sensor_TIDS4initEi>
  status = sensor.SW_RESET();                                         // Perform a software reset
   b4ace:	4810      	ldr	r0, [pc, #64]	; (b4b10 <setup+0x8c>)
   b4ad0:	f000 fa1c 	bl	b4f0c <_ZN11Sensor_TIDS8SW_RESETEv>
   b4ad4:	6020      	str	r0, [r4, #0]
  
  if (WE_FAIL == status) {
   b4ad6:	3001      	adds	r0, #1
   b4ad8:	d105      	bne.n	b4ae6 <setup+0x62>
    Serial.println("Error: SW_RESET(). STOP!");
   b4ada:	f002 fafd 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4ade:	490d      	ldr	r1, [pc, #52]	; (b4b14 <setup+0x90>)
   b4ae0:	f002 f875 	bl	b6bce <_ZN5Print7printlnEPKc>
    while(1);
   b4ae4:	e7fe      	b.n	b4ae4 <setup+0x60>
    }

  status = sensor.set_continuous_mode(ODR);             // Set the free run mode with given ODR
   b4ae6:	4b0c      	ldr	r3, [pc, #48]	; (b4b18 <setup+0x94>)
   b4ae8:	4809      	ldr	r0, [pc, #36]	; (b4b10 <setup+0x8c>)
   b4aea:	6819      	ldr	r1, [r3, #0]
   b4aec:	f000 fa4e 	bl	b4f8c <_ZN11Sensor_TIDS19set_continuous_modeEi>
   b4af0:	6020      	str	r0, [r4, #0]
  
  if (WE_FAIL == status) {
   b4af2:	3001      	adds	r0, #1
   b4af4:	d105      	bne.n	b4b02 <setup+0x7e>
    Serial.println("Error: set_continuous_mode(). STOP!");
   b4af6:	f002 faef 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4afa:	4908      	ldr	r1, [pc, #32]	; (b4b1c <setup+0x98>)
   b4afc:	f002 f867 	bl	b6bce <_ZN5Print7printlnEPKc>
    while(1);
   b4b00:	e7fe      	b.n	b4b00 <setup+0x7c>
  }
}
   b4b02:	bd10      	pop	{r4, pc}
   b4b04:	0001c2c8 	.word	0x0001c2c8
   b4b08:	2003e660 	.word	0x2003e660
   b4b0c:	2003e664 	.word	0x2003e664
   b4b10:	2003e654 	.word	0x2003e654
   b4b14:	000b7661 	.word	0x000b7661
   b4b18:	2003e5bc 	.word	0x2003e5bc
   b4b1c:	000b767a 	.word	0x000b767a

000b4b20 <_Z16draw_wake_screenv>:
        }

  Serial.println (Sleep_State);
}

void draw_wake_screen() {
   b4b20:	b570      	push	{r4, r5, r6, lr}

////// Temperature Reading display ///////
  tft.setFont(&Org_01);
   b4b22:	4c11      	ldr	r4, [pc, #68]	; (b4b68 <_Z16draw_wake_screenv+0x48>)
   b4b24:	4911      	ldr	r1, [pc, #68]	; (b4b6c <_Z16draw_wake_screenv+0x4c>)
  tft.setTextSize(29);                                                                    // set font size
  tft.setTextWrap(false);                                                                 // set text wrapping
  tft.setTextColor(ST77XX_BLACK);                                                         // set font colour
  tft.setCursor(0, 160);        //160                                                     // set sursor to start writing text
  tft.print(previous_temp);                                                               // overwrite current display to clear screen
   b4b26:	4d12      	ldr	r5, [pc, #72]	; (b4b70 <_Z16draw_wake_screenv+0x50>)
  tft.setFont(&Org_01);
   b4b28:	4620      	mov	r0, r4
   b4b2a:	f000 fe7a 	bl	b5822 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextSize(29);                                                                    // set font size
   b4b2e:	211d      	movs	r1, #29
   b4b30:	4620      	mov	r0, r4
   b4b32:	f000 fe70 	bl	b5816 <_ZN12Adafruit_GFX11setTextSizeEh>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4b36:	f44f 0620 	mov.w	r6, #10485760	; 0xa00000
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
   b4b3a:	2300      	movs	r3, #0
  tft.print(previous_temp);                                                               // overwrite current display to clear screen
   b4b3c:	6829      	ldr	r1, [r5, #0]
   b4b3e:	76e3      	strb	r3, [r4, #27]
   b4b40:	220a      	movs	r2, #10
   b4b42:	4620      	mov	r0, r4
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4b44:	e9c4 6304 	strd	r6, r3, [r4, #16]
   b4b48:	f7ff ff78 	bl	b4a3c <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4b4c:	6126      	str	r6, [r4, #16]

  tft.setTextColor(ST77XX_ORANGE);
  tft.setCursor(0,160);                                                                  
  tft.print(print_temp);                                                                  // Print current temperature 
   b4b4e:	4e09      	ldr	r6, [pc, #36]	; (b4b74 <_Z16draw_wake_screenv+0x54>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4b50:	f04f 23fc 	mov.w	r3, #4227922944	; 0xfc00fc00
   b4b54:	6831      	ldr	r1, [r6, #0]
   b4b56:	6163      	str	r3, [r4, #20]
   b4b58:	220a      	movs	r2, #10
   b4b5a:	4620      	mov	r0, r4
   b4b5c:	f7ff ff6e 	bl	b4a3c <_ZN5Print5printIiLi0EEEjT_i.isra.0>

  previous_temp = print_temp;                                                             // Set the new temperature = previous temperature
   b4b60:	6833      	ldr	r3, [r6, #0]
   b4b62:	602b      	str	r3, [r5, #0]

}
   b4b64:	bd70      	pop	{r4, r5, r6, pc}
   b4b66:	bf00      	nop
   b4b68:	2003e664 	.word	0x2003e664
   b4b6c:	000b865c 	.word	0x000b865c
   b4b70:	2003e64c 	.word	0x2003e64c
   b4b74:	2003e650 	.word	0x2003e650

000b4b78 <_Z8get_tempv>:
void get_temp() {
   b4b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = sensor.read_temperature(&temperature);
   b4b7a:	4824      	ldr	r0, [pc, #144]	; (b4c0c <_Z8get_tempv+0x94>)
   b4b7c:	a901      	add	r1, sp, #4
   b4b7e:	f000 f9db 	bl	b4f38 <_ZN11Sensor_TIDS16read_temperatureEPf>
   b4b82:	4b23      	ldr	r3, [pc, #140]	; (b4c10 <_Z8get_tempv+0x98>)
   b4b84:	6018      	str	r0, [r3, #0]
  if (WE_FAIL == status) {
   b4b86:	3001      	adds	r0, #1
   b4b88:	d105      	bne.n	b4b96 <_Z8get_tempv+0x1e>
    Serial.println("Error: read_temperature(). STOP!");
   b4b8a:	f002 faa5 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4b8e:	4921      	ldr	r1, [pc, #132]	; (b4c14 <_Z8get_tempv+0x9c>)
   b4b90:	f002 f81d 	bl	b6bce <_ZN5Print7printlnEPKc>
    while(1);
   b4b94:	e7fe      	b.n	b4b94 <_Z8get_tempv+0x1c>
  if (Sleep_State == 2) {
   b4b96:	4a20      	ldr	r2, [pc, #128]	; (b4c18 <_Z8get_tempv+0xa0>)
   b4b98:	4d20      	ldr	r5, [pc, #128]	; (b4c1c <_Z8get_tempv+0xa4>)
   b4b9a:	6813      	ldr	r3, [r2, #0]
   b4b9c:	4c20      	ldr	r4, [pc, #128]	; (b4c20 <_Z8get_tempv+0xa8>)
   b4b9e:	2b02      	cmp	r3, #2
   b4ba0:	d12a      	bne.n	b4bf8 <_Z8get_tempv+0x80>
    previous_temp = 0;
   b4ba2:	2300      	movs	r3, #0
   b4ba4:	602b      	str	r3, [r5, #0]
    Sleep_State = 1;
   b4ba6:	2301      	movs	r3, #1
   b4ba8:	6013      	str	r3, [r2, #0]
  Serial.print(print_temp);                               // Print the temperature on the serial monitor as INT
   b4baa:	f002 fa95 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4bae:	220a      	movs	r2, #10
   b4bb0:	6821      	ldr	r1, [r4, #0]
   b4bb2:	f7ff ff43 	bl	b4a3c <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  Serial.println(" C");
   b4bb6:	f002 fa8f 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4bba:	491a      	ldr	r1, [pc, #104]	; (b4c24 <_Z8get_tempv+0xac>)
   b4bbc:	f002 f807 	bl	b6bce <_ZN5Print7printlnEPKc>
  Serial.print(temperature);                              // Print the temperature on the serial monitor as FLOAT
   b4bc0:	f002 fa8a 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4bc4:	ed9d 0a01 	vldr	s0, [sp, #4]
   b4bc8:	2102      	movs	r1, #2
   b4bca:	f002 f8f1 	bl	b6db0 <_ZN5Print5printEfi>
  Serial.println(" C");
   b4bce:	f002 fa83 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4bd2:	4914      	ldr	r1, [pc, #80]	; (b4c24 <_Z8get_tempv+0xac>)
   b4bd4:	f001 fffb 	bl	b6bce <_ZN5Print7printlnEPKc>
  int waitMillis = 10000 / ODR;                           // Waiting time between measurement
   b4bd8:	4b13      	ldr	r3, [pc, #76]	; (b4c28 <_Z8get_tempv+0xb0>)
  delay(waitMillis);                                      // Wait before continuing with the next measurement
   b4bda:	f242 7010 	movw	r0, #10000	; 0x2710
  int waitMillis = 10000 / ODR;                           // Waiting time between measurement
   b4bde:	681b      	ldr	r3, [r3, #0]
  delay(waitMillis);                                      // Wait before continuing with the next measurement
   b4be0:	fb90 f0f3 	sdiv	r0, r0, r3
   b4be4:	f001 fdb2 	bl	b674c <delay>
  if (print_temp != previous_temp) { 
   b4be8:	6822      	ldr	r2, [r4, #0]
   b4bea:	682b      	ldr	r3, [r5, #0]
   b4bec:	429a      	cmp	r2, r3
   b4bee:	d001      	beq.n	b4bf4 <_Z8get_tempv+0x7c>
    draw_wake_screen();
   b4bf0:	f7ff ff96 	bl	b4b20 <_Z16draw_wake_screenv>
}
   b4bf4:	b003      	add	sp, #12
   b4bf6:	bd30      	pop	{r4, r5, pc}
    } else if (Sleep_State == 1) { 
   b4bf8:	2b01      	cmp	r3, #1
      print_temp = temperature;
   b4bfa:	bf02      	ittt	eq
   b4bfc:	eddd 7a01 	vldreq	s15, [sp, #4]
   b4c00:	eefd 7ae7 	vcvteq.s32.f32	s15, s15
   b4c04:	edc4 7a00 	vstreq	s15, [r4]
   b4c08:	e7cf      	b.n	b4baa <_Z8get_tempv+0x32>
   b4c0a:	bf00      	nop
   b4c0c:	2003e654 	.word	0x2003e654
   b4c10:	2003e660 	.word	0x2003e660
   b4c14:	000b769e 	.word	0x000b769e
   b4c18:	2003e5c0 	.word	0x2003e5c0
   b4c1c:	2003e64c 	.word	0x2003e64c
   b4c20:	2003e650 	.word	0x2003e650
   b4c24:	000b76bf 	.word	0x000b76bf
   b4c28:	2003e5bc 	.word	0x2003e5bc

000b4c2c <_Z18draw_sleepy_screenv>:

void draw_sleepy_screen() {
   b4c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

////// Sleepy display ///////
  tft.fillScreen(ST77XX_BLACK);                                                           // creates black background in display
   b4c30:	4c33      	ldr	r4, [pc, #204]	; (b4d00 <_Z18draw_sleepy_screenv+0xd4>)
  delay(100);  
  tft.setTextColor(ST77XX_CYAN);
  tft.setTextSize(6);                                                                    // set font size
  tft.setTextWrap(false);                                                                 // set text wrapping
  tft.setCursor(80, 200);                                                                  // set sursor to start writing text
  tft.print("Z");
   b4c32:	f8df 90dc 	ldr.w	r9, [pc, #220]	; b4d10 <_Z18draw_sleepy_screenv+0xe4>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4c36:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b4d14 <_Z18draw_sleepy_screenv+0xe8>
  delay(250);                                                                         // overwrite current display to clear screen
  tft.setTextSize(3);  
  tft.setCursor(180, 120);
  tft.print("z");
   b4c3a:	4d32      	ldr	r5, [pc, #200]	; (b4d04 <_Z18draw_sleepy_screenv+0xd8>)
   b4c3c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b4d18 <_Z18draw_sleepy_screenv+0xec>
   b4c40:	4f31      	ldr	r7, [pc, #196]	; (b4d08 <_Z18draw_sleepy_screenv+0xdc>)
  tft.fillScreen(ST77XX_BLACK);                                                           // creates black background in display
   b4c42:	4620      	mov	r0, r4
   b4c44:	2100      	movs	r1, #0
   b4c46:	f000 fb41 	bl	b52cc <_ZN12Adafruit_GFX10fillScreenEt>
  tft.setFont(&FreeSansBold12pt7b);
   b4c4a:	4930      	ldr	r1, [pc, #192]	; (b4d0c <_Z18draw_sleepy_screenv+0xe0>)
   b4c4c:	4620      	mov	r0, r4
   b4c4e:	f000 fde8 	bl	b5822 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  delay(100);  
   b4c52:	2064      	movs	r0, #100	; 0x64
   b4c54:	f001 fd7a 	bl	b674c <delay>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4c58:	f06f 23f8 	mvn.w	r3, #4160813056	; 0xf800f800
  tft.setTextSize(6);                                                                    // set font size
   b4c5c:	4620      	mov	r0, r4
   b4c5e:	2106      	movs	r1, #6
   b4c60:	6163      	str	r3, [r4, #20]
  void setTextWrap(boolean w) { wrap = w; }
   b4c62:	2600      	movs	r6, #0
   b4c64:	f000 fdd7 	bl	b5816 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.print("Z");
   b4c68:	4649      	mov	r1, r9
   b4c6a:	4620      	mov	r0, r4
   b4c6c:	76e6      	strb	r6, [r4, #27]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4c6e:	f8c4 a010 	str.w	sl, [r4, #16]
   b4c72:	f001 ff99 	bl	b6ba8 <_ZN5Print5printEPKc>
  delay(250);                                                                         // overwrite current display to clear screen
   b4c76:	20fa      	movs	r0, #250	; 0xfa
   b4c78:	f001 fd68 	bl	b674c <delay>
  tft.setTextSize(3);  
   b4c7c:	4620      	mov	r0, r4
   b4c7e:	2103      	movs	r1, #3
   b4c80:	f000 fdc9 	bl	b5816 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.print("z");
   b4c84:	4629      	mov	r1, r5
   b4c86:	4620      	mov	r0, r4
   b4c88:	f8c4 8010 	str.w	r8, [r4, #16]
   b4c8c:	f001 ff8c 	bl	b6ba8 <_ZN5Print5printEPKc>
  delay(250);  
   b4c90:	20fa      	movs	r0, #250	; 0xfa
   b4c92:	f001 fd5b 	bl	b674c <delay>
  tft.setTextSize(2);  
   b4c96:	4620      	mov	r0, r4
   b4c98:	2102      	movs	r1, #2
   b4c9a:	f000 fdbc 	bl	b5816 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.setCursor(230, 90);
  tft.print("z");  
   b4c9e:	4629      	mov	r1, r5
   b4ca0:	4620      	mov	r0, r4
   b4ca2:	6127      	str	r7, [r4, #16]
   b4ca4:	f001 ff80 	bl	b6ba8 <_ZN5Print5printEPKc>

  delay(1000);  
   b4ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4cac:	f001 fd4e 	bl	b674c <delay>
  tft.setTextColor(ST77XX_BLACK);
  tft.setTextSize(6);                                                                    // set font size
   b4cb0:	4620      	mov	r0, r4
   b4cb2:	2106      	movs	r1, #6
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4cb4:	6166      	str	r6, [r4, #20]
   b4cb6:	f000 fdae 	bl	b5816 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.setTextWrap(false);                                                                 // set text wrapping
  tft.setCursor(80, 200);                                                                  // set sursor to start writing text
  tft.print("Z");
   b4cba:	4649      	mov	r1, r9
   b4cbc:	4620      	mov	r0, r4
  void setTextWrap(boolean w) { wrap = w; }
   b4cbe:	76e6      	strb	r6, [r4, #27]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4cc0:	f8c4 a010 	str.w	sl, [r4, #16]
   b4cc4:	f001 ff70 	bl	b6ba8 <_ZN5Print5printEPKc>
  delay(100);                                                                         // overwrite current display to clear screen
   b4cc8:	2064      	movs	r0, #100	; 0x64
   b4cca:	f001 fd3f 	bl	b674c <delay>
  tft.setTextSize(3);  
   b4cce:	4620      	mov	r0, r4
   b4cd0:	2103      	movs	r1, #3
   b4cd2:	f000 fda0 	bl	b5816 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.setCursor(180, 120);
  tft.print("z");
   b4cd6:	4629      	mov	r1, r5
   b4cd8:	4620      	mov	r0, r4
   b4cda:	f8c4 8010 	str.w	r8, [r4, #16]
   b4cde:	f001 ff63 	bl	b6ba8 <_ZN5Print5printEPKc>
  delay(100);  
   b4ce2:	2064      	movs	r0, #100	; 0x64
   b4ce4:	f001 fd32 	bl	b674c <delay>
  tft.setTextSize(2);  
   b4ce8:	4620      	mov	r0, r4
   b4cea:	2102      	movs	r1, #2
   b4cec:	f000 fd93 	bl	b5816 <_ZN12Adafruit_GFX11setTextSizeEh>
   b4cf0:	6127      	str	r7, [r4, #16]
  tft.setCursor(230, 90);
  tft.print("z");  
   b4cf2:	4629      	mov	r1, r5
   b4cf4:	4620      	mov	r0, r4

}
   b4cf6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tft.print("z");  
   b4cfa:	f001 bf55 	b.w	b6ba8 <_ZN5Print5printEPKc>
   b4cfe:	bf00      	nop
   b4d00:	2003e664 	.word	0x2003e664
   b4d04:	000b8de4 	.word	0x000b8de4
   b4d08:	005a00e6 	.word	0x005a00e6
   b4d0c:	000b7acc 	.word	0x000b7acc
   b4d10:	000b76c2 	.word	0x000b76c2
   b4d14:	00c80050 	.word	0x00c80050
   b4d18:	007800b4 	.word	0x007800b4

000b4d1c <_Z3LDRv>:
void LDR() {
   b4d1c:	b510      	push	{r4, lr}
  light_level_1 = analogRead (LDR_1);
   b4d1e:	2013      	movs	r0, #19
   b4d20:	f002 fb42 	bl	b73a8 <analogRead>
   b4d24:	4c15      	ldr	r4, [pc, #84]	; (b4d7c <_Z3LDRv+0x60>)
   b4d26:	6020      	str	r0, [r4, #0]
  light_level_2 = analogRead (LDR_2);
   b4d28:	2012      	movs	r0, #18
   b4d2a:	f002 fb3d 	bl	b73a8 <analogRead>
   b4d2e:	4b14      	ldr	r3, [pc, #80]	; (b4d80 <_Z3LDRv+0x64>)
    if (light_level_1 > day_level) {
   b4d30:	4a14      	ldr	r2, [pc, #80]	; (b4d84 <_Z3LDRv+0x68>)
  light_level_2 = analogRead (LDR_2);
   b4d32:	6018      	str	r0, [r3, #0]
    if (light_level_1 > day_level) {
   b4d34:	6812      	ldr	r2, [r2, #0]
   b4d36:	6823      	ldr	r3, [r4, #0]
   b4d38:	4c13      	ldr	r4, [pc, #76]	; (b4d88 <_Z3LDRv+0x6c>)
   b4d3a:	4293      	cmp	r3, r2
   b4d3c:	dd0f      	ble.n	b4d5e <_Z3LDRv+0x42>
      Serial.println (Sleep_State);
   b4d3e:	f002 f9cb 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4d42:	6821      	ldr	r1, [r4, #0]
   b4d44:	220a      	movs	r2, #10
   b4d46:	f7ff fe94 	bl	b4a72 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
      get_temp();
   b4d4a:	f7ff ff15 	bl	b4b78 <_Z8get_tempv>
  Serial.println (Sleep_State);
   b4d4e:	f002 f9c3 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4d52:	6821      	ldr	r1, [r4, #0]
   b4d54:	220a      	movs	r2, #10
}
   b4d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println (Sleep_State);
   b4d5a:	f7ff be8a 	b.w	b4a72 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        } else if (light_level_1 < night_level) {
   b4d5e:	4a0b      	ldr	r2, [pc, #44]	; (b4d8c <_Z3LDRv+0x70>)
   b4d60:	6812      	ldr	r2, [r2, #0]
   b4d62:	4293      	cmp	r3, r2
   b4d64:	daf3      	bge.n	b4d4e <_Z3LDRv+0x32>
          Sleep_State = 2;
   b4d66:	2302      	movs	r3, #2
   b4d68:	6023      	str	r3, [r4, #0]
          Serial.println (Sleep_State);
   b4d6a:	f002 f9b5 	bl	b70d8 <_Z16_fetch_usbserialv>
   b4d6e:	6821      	ldr	r1, [r4, #0]
   b4d70:	220a      	movs	r2, #10
   b4d72:	f7ff fe7e 	bl	b4a72 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
          draw_sleepy_screen();
   b4d76:	f7ff ff59 	bl	b4c2c <_Z18draw_sleepy_screenv>
   b4d7a:	e7e8      	b.n	b4d4e <_Z3LDRv+0x32>
   b4d7c:	2003e644 	.word	0x2003e644
   b4d80:	2003e648 	.word	0x2003e648
   b4d84:	2003e5c4 	.word	0x2003e5c4
   b4d88:	2003e5c0 	.word	0x2003e5c0
   b4d8c:	2003e5c8 	.word	0x2003e5c8

000b4d90 <loop>:

void loop() {

  LDR();
   b4d90:	f7ff bfc4 	b.w	b4d1c <_Z3LDRv>

000b4d94 <_GLOBAL__sub_I_SystemMode>:

   b4d94:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4d96:	4b09      	ldr	r3, [pc, #36]	; (b4dbc <_GLOBAL__sub_I_SystemMode+0x28>)
   b4d98:	2200      	movs	r2, #0
   b4d9a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4d9e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4da2:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4da4:	2002      	movs	r0, #2
   b4da6:	f001 fc25 	bl	b65f4 <set_system_mode>
   b4daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);     // Hardware SPI
   b4dae:	4804      	ldr	r0, [pc, #16]	; (b4dc0 <_GLOBAL__sub_I_SystemMode+0x2c>)
   b4db0:	2306      	movs	r3, #6
   b4db2:	2205      	movs	r2, #5
   b4db4:	2110      	movs	r1, #16
   b4db6:	f001 b9a1 	b.w	b60fc <_ZN15Adafruit_ST7789C1Eaaa>
   b4dba:	bf00      	nop
   b4dbc:	2003e638 	.word	0x2003e638
   b4dc0:	2003e664 	.word	0x2003e664

000b4dc4 <I2CInit>:
 * @param  I2C address
 * @retval Error Code
 */

int I2CInit(int address)
{
   b4dc4:	b508      	push	{r3, lr}
	// uint32_t timeout = (uint32_t)(TIMEOUT_MS * 1000);  /* timeout in us */
	// bool reset_on_timeout = false;
	
    deviceAddress = address;
   b4dc6:	4b04      	ldr	r3, [pc, #16]	; (b4dd8 <I2CInit+0x14>)
   b4dc8:	6018      	str	r0, [r3, #0]
//	Wire.setWireTimeout(timeout, reset_on_timeout);
    Wire.begin();
   b4dca:	f002 fb1f 	bl	b740c <_Z19__fetch_global_Wirev>
   b4dce:	f001 fd51 	bl	b6874 <_ZN7TwoWire5beginEv>
	
    return WE_SUCCESS;
}
   b4dd2:	2000      	movs	r0, #0
   b4dd4:	bd08      	pop	{r3, pc}
   b4dd6:	bf00      	nop
   b4dd8:	2003e6b4 	.word	0x2003e6b4

000b4ddc <ReadReg>:
 *         -pointer Data : address stores the data
 * @retval Error Code
 */

int ReadReg(uint8_t RegAdr, int NumByteToRead, uint8_t *Data)
{
   b4ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4dde:	4605      	mov	r5, r0
   b4de0:	4616      	mov	r6, r2
	if (0 == NumByteToRead)
   b4de2:	460c      	mov	r4, r1
   b4de4:	b319      	cbz	r1, b4e2e <ReadReg+0x52>
	{
		return WE_FAIL;
	}

    Wire.beginTransmission(deviceAddress);
   b4de6:	4f14      	ldr	r7, [pc, #80]	; (b4e38 <ReadReg+0x5c>)
   b4de8:	f002 fb10 	bl	b740c <_Z19__fetch_global_Wirev>
   b4dec:	6839      	ldr	r1, [r7, #0]
   b4dee:	f001 fd77 	bl	b68e0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(RegAdr);
   b4df2:	f002 fb0b 	bl	b740c <_Z19__fetch_global_Wirev>
   b4df6:	6803      	ldr	r3, [r0, #0]
   b4df8:	4629      	mov	r1, r5
   b4dfa:	689b      	ldr	r3, [r3, #8]
   b4dfc:	4798      	blx	r3
	Wire.endTransmission();
   b4dfe:	f002 fb05 	bl	b740c <_Z19__fetch_global_Wirev>
   b4e02:	f001 fd74 	bl	b68ee <_ZN7TwoWire15endTransmissionEv>
	
    int n = Wire.requestFrom(deviceAddress, NumByteToRead);	
   b4e06:	f002 fb01 	bl	b740c <_Z19__fetch_global_Wirev>
   b4e0a:	7839      	ldrb	r1, [r7, #0]
   b4e0c:	4622      	mov	r2, r4
   b4e0e:	f001 fd60 	bl	b68d2 <_ZN7TwoWire11requestFromEhj>
	if (n != NumByteToRead) /* also includes: if n == 0 */
   b4e12:	4284      	cmp	r4, r0
    int n = Wire.requestFrom(deviceAddress, NumByteToRead);	
   b4e14:	4605      	mov	r5, r0
	if (n != NumByteToRead) /* also includes: if n == 0 */
   b4e16:	d10a      	bne.n	b4e2e <ReadReg+0x52>
	{
		return WE_FAIL;
	}
	
    for (int i = 0; i < n; i++)
   b4e18:	2400      	movs	r4, #0
   b4e1a:	42ac      	cmp	r4, r5
   b4e1c:	da0a      	bge.n	b4e34 <ReadReg+0x58>
    {
        Data[i] = Wire.read();
   b4e1e:	f002 faf5 	bl	b740c <_Z19__fetch_global_Wirev>
   b4e22:	6803      	ldr	r3, [r0, #0]
   b4e24:	695b      	ldr	r3, [r3, #20]
   b4e26:	4798      	blx	r3
   b4e28:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < n; i++)
   b4e2a:	3401      	adds	r4, #1
   b4e2c:	e7f5      	b.n	b4e1a <ReadReg+0x3e>
		return WE_FAIL;
   b4e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return WE_SUCCESS;
}
   b4e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return WE_SUCCESS;
   b4e34:	2000      	movs	r0, #0
   b4e36:	e7fc      	b.n	b4e32 <ReadReg+0x56>
   b4e38:	2003e6b4 	.word	0x2003e6b4

000b4e3c <WriteReg>:
 *         -pointer Data : address of the data to be written
 * @retval Error Code
 */

int WriteReg(uint8_t RegAdr, int NumByteToWrite, uint8_t *Data)
{
   b4e3c:	b570      	push	{r4, r5, r6, lr}
   b4e3e:	4604      	mov	r4, r0
   b4e40:	4616      	mov	r6, r2

	if (0 == NumByteToWrite)
   b4e42:	460d      	mov	r5, r1
   b4e44:	b1f9      	cbz	r1, b4e86 <WriteReg+0x4a>
	{
		return WE_FAIL;
	}

    Wire.beginTransmission(deviceAddress);
   b4e46:	f002 fae1 	bl	b740c <_Z19__fetch_global_Wirev>
   b4e4a:	4b10      	ldr	r3, [pc, #64]	; (b4e8c <WriteReg+0x50>)
   b4e4c:	6819      	ldr	r1, [r3, #0]
   b4e4e:	f001 fd47 	bl	b68e0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(RegAdr);
   b4e52:	f002 fadb 	bl	b740c <_Z19__fetch_global_Wirev>
   b4e56:	6803      	ldr	r3, [r0, #0]
   b4e58:	4621      	mov	r1, r4
   b4e5a:	689b      	ldr	r3, [r3, #8]
   b4e5c:	4798      	blx	r3
	
	for (int i = 0; i < NumByteToWrite; i++)
   b4e5e:	2400      	movs	r4, #0
   b4e60:	42a5      	cmp	r5, r4
   b4e62:	dd07      	ble.n	b4e74 <WriteReg+0x38>
    {
        Wire.write(Data[i]);
   b4e64:	f002 fad2 	bl	b740c <_Z19__fetch_global_Wirev>
   b4e68:	6803      	ldr	r3, [r0, #0]
   b4e6a:	5d31      	ldrb	r1, [r6, r4]
   b4e6c:	689b      	ldr	r3, [r3, #8]
   b4e6e:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b4e70:	3401      	adds	r4, #1
   b4e72:	e7f5      	b.n	b4e60 <WriteReg+0x24>
    }
	
	if (Wire.endTransmission()) /* slave ack or nack */
   b4e74:	f002 faca 	bl	b740c <_Z19__fetch_global_Wirev>
   b4e78:	f001 fd39 	bl	b68ee <_ZN7TwoWire15endTransmissionEv>
   b4e7c:	3800      	subs	r0, #0
   b4e7e:	bf18      	it	ne
   b4e80:	2001      	movne	r0, #1
   b4e82:	4240      	negs	r0, r0
    {
        return WE_FAIL;
    }

    return WE_SUCCESS;
}
   b4e84:	bd70      	pop	{r4, r5, r6, pc}
		return WE_FAIL;
   b4e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4e8a:	e7fb      	b.n	b4e84 <WriteReg+0x48>
   b4e8c:	2003e6b4 	.word	0x2003e6b4

000b4e90 <_ZN11Sensor_TIDS4initEi>:
   @param  I2C address
   @retval Error Code
*/
int Sensor_TIDS::init(int address)
{
  return I2CInit(address);
   b4e90:	4608      	mov	r0, r1
   b4e92:	f7ff bf97 	b.w	b4dc4 <I2CInit>

000b4e96 <_ZN11Sensor_TIDS10Select_ODREv>:
/**
   @brief  Setting up the output data rate for the continuous mode
   @retval Error Code
*/
int Sensor_TIDS::Select_ODR()
{
   b4e96:	b508      	push	{r3, lr}

  switch (ODR)
   b4e98:	6800      	ldr	r0, [r0, #0]
   b4e9a:	2832      	cmp	r0, #50	; 0x32
   b4e9c:	d01b      	beq.n	b4ed6 <_ZN11Sensor_TIDS10Select_ODREv+0x40>
   b4e9e:	dc06      	bgt.n	b4eae <_ZN11Sensor_TIDS10Select_ODREv+0x18>
   b4ea0:	2801      	cmp	r0, #1
   b4ea2:	d00e      	beq.n	b4ec2 <_ZN11Sensor_TIDS10Select_ODREv+0x2c>
   b4ea4:	2819      	cmp	r0, #25
   b4ea6:	d018      	beq.n	b4eda <_ZN11Sensor_TIDS10Select_ODREv+0x44>
   b4ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4eac:	e010      	b.n	b4ed0 <_ZN11Sensor_TIDS10Select_ODREv+0x3a>
   b4eae:	2864      	cmp	r0, #100	; 0x64
   b4eb0:	d00f      	beq.n	b4ed2 <_ZN11Sensor_TIDS10Select_ODREv+0x3c>
   b4eb2:	28c8      	cmp	r0, #200	; 0xc8
   b4eb4:	d1f8      	bne.n	b4ea8 <_ZN11Sensor_TIDS10Select_ODREv+0x12>
  {
    case 200:
    {
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_200HZ))
   b4eb6:	2003      	movs	r0, #3
      break;
    }

    case 50:
    {
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_50HZ))
   b4eb8:	f000 f8d1 	bl	b505e <TIDS_setOutputDataRate>
   b4ebc:	3001      	adds	r0, #1
   b4ebe:	d0f3      	beq.n	b4ea8 <_ZN11Sensor_TIDS10Select_ODREv+0x12>
    {
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_25HZ))
	  {
		return WE_FAIL;
      }
      if(WE_FAIL == TIDS_setContinuousMode(TIDS_enable))
   b4ec0:	2001      	movs	r0, #1
      break;
    }

    case 1:
    {
      if(WE_FAIL == TIDS_setContinuousMode(TIDS_enable)) // Low ODR bit is enabled, ODR 1 Hz
   b4ec2:	f000 f896 	bl	b4ff2 <TIDS_setContinuousMode>
   b4ec6:	3001      	adds	r0, #1
   b4ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4ecc:	bf18      	it	ne
   b4ece:	2000      	movne	r0, #0
      return WE_FAIL;
    }
  }
  
  return WE_SUCCESS;
}
   b4ed0:	bd08      	pop	{r3, pc}
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_100HZ))
   b4ed2:	2002      	movs	r0, #2
   b4ed4:	e7f0      	b.n	b4eb8 <_ZN11Sensor_TIDS10Select_ODREv+0x22>
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_50HZ))
   b4ed6:	2001      	movs	r0, #1
   b4ed8:	e7ee      	b.n	b4eb8 <_ZN11Sensor_TIDS10Select_ODREv+0x22>
      if(WE_FAIL == TIDS_setOutputDataRate(TIDS_ODR_25HZ))
   b4eda:	2000      	movs	r0, #0
   b4edc:	e7ec      	b.n	b4eb8 <_ZN11Sensor_TIDS10Select_ODREv+0x22>

000b4ede <_ZN11Sensor_TIDS10power_downEv>:
   @brief   Performing the power-down (by setting the bit FREERUN
            in the CTRL register to '0')
   @retval Error Code
*/
int Sensor_TIDS::power_down()
{
   b4ede:	b508      	push	{r3, lr}
  if(WE_FAIL == TIDS_setBlockDataUpdate(TIDS_enable))
   b4ee0:	2001      	movs	r0, #1
   b4ee2:	f000 f8a1 	bl	b5028 <TIDS_setBlockDataUpdate>
   b4ee6:	3001      	adds	r0, #1
   b4ee8:	d102      	bne.n	b4ef0 <_ZN11Sensor_TIDS10power_downEv+0x12>
  {
      return WE_FAIL;
   b4eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  {
      return WE_FAIL;
  }
	
  return WE_SUCCESS;
}
   b4eee:	bd08      	pop	{r3, pc}
  if(WE_FAIL == TIDS_setAutoIncrement(TIDS_enable))
   b4ef0:	2001      	movs	r0, #1
   b4ef2:	f000 f8cf 	bl	b5094 <TIDS_setAutoIncrement>
   b4ef6:	3001      	adds	r0, #1
   b4ef8:	d0f7      	beq.n	b4eea <_ZN11Sensor_TIDS10power_downEv+0xc>
  if(WE_FAIL == TIDS_setContinuousMode(TIDS_disable))
   b4efa:	2000      	movs	r0, #0
   b4efc:	f000 f879 	bl	b4ff2 <TIDS_setContinuousMode>
   b4f00:	3001      	adds	r0, #1
   b4f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4f06:	bf18      	it	ne
   b4f08:	2000      	movne	r0, #0
   b4f0a:	e7f0      	b.n	b4eee <_ZN11Sensor_TIDS10power_downEv+0x10>

000b4f0c <_ZN11Sensor_TIDS8SW_RESETEv>:
   @brief   Configuring a software reset procedure
            Necessary before requesting a new temperature
   @retval Error Code
*/
int Sensor_TIDS::SW_RESET()
{
   b4f0c:	b508      	push	{r3, lr}
  if(WE_FAIL == TIDS_setSwReset(TIDS_enable))
   b4f0e:	2001      	movs	r0, #1
   b4f10:	f000 f854 	bl	b4fbc <TIDS_setSwReset>
   b4f14:	3001      	adds	r0, #1
   b4f16:	d102      	bne.n	b4f1e <_ZN11Sensor_TIDS8SW_RESETEv+0x12>
  {
      return WE_FAIL;
   b4f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      return WE_FAIL;
  }
  
  delay(12);
  return WE_SUCCESS;
}
   b4f1c:	bd08      	pop	{r3, pc}
  delay(12);
   b4f1e:	200c      	movs	r0, #12
   b4f20:	f001 fc14 	bl	b674c <delay>
  if(WE_FAIL == TIDS_setSwReset(TIDS_disable))
   b4f24:	2000      	movs	r0, #0
   b4f26:	f000 f849 	bl	b4fbc <TIDS_setSwReset>
   b4f2a:	3001      	adds	r0, #1
   b4f2c:	d0f4      	beq.n	b4f18 <_ZN11Sensor_TIDS8SW_RESETEv+0xc>
  delay(12);
   b4f2e:	200c      	movs	r0, #12
   b4f30:	f001 fc0c 	bl	b674c <delay>
  return WE_SUCCESS;
   b4f34:	2000      	movs	r0, #0
   b4f36:	e7f1      	b.n	b4f1c <_ZN11Sensor_TIDS8SW_RESETEv+0x10>

000b4f38 <_ZN11Sensor_TIDS16read_temperatureEPf>:
   @brief  Read and calculate the temperature in °C
   @param temperature in °C
   @retval Error code
*/
int Sensor_TIDS::read_temperature(float *temp)
{
   b4f38:	b538      	push	{r3, r4, r5, lr}
   b4f3a:	4604      	mov	r4, r0
  float float_temp;
  if(WE_FAIL == TIDS_getRAWTemperature(&rawTemp))
   b4f3c:	3004      	adds	r0, #4
{
   b4f3e:	460d      	mov	r5, r1
  if(WE_FAIL == TIDS_getRAWTemperature(&rawTemp))
   b4f40:	f000 f8c3 	bl	b50ca <TIDS_getRAWTemperature>
   b4f44:	1c43      	adds	r3, r0, #1
   b4f46:	d01c      	beq.n	b4f82 <_ZN11Sensor_TIDS16read_temperatureEPf+0x4a>
  {
      return WE_FAIL;
  }

  if (rawTemp > 32767)
   b4f48:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   b4f4c:	88a3      	ldrh	r3, [r4, #4]
   b4f4e:	eddf 6a0d 	vldr	s13, [pc, #52]	; b4f84 <_ZN11Sensor_TIDS16read_temperatureEPf+0x4c>
   b4f52:	2a00      	cmp	r2, #0
  {
    T_neg = rawTemp - 32768;
   b4f54:	bfbf      	itttt	lt
   b4f56:	f5a3 4300 	sublt.w	r3, r3, #32768	; 0x8000
   b4f5a:	ee07 3a90 	vmovlt	s15, r3
    float_temp = (float)(0 - 32768 + T_neg)/100.0f;
   b4f5e:	ed9f 7a0a 	vldrlt	s14, [pc, #40]	; b4f88 <_ZN11Sensor_TIDS16read_temperatureEPf+0x50>
    T_neg = rawTemp - 32768;
   b4f62:	eef8 7ae7 	vcvtlt.f32.s32	s15, s15
  }
  else
  {
    float_temp = (float)rawTemp/100.0f;
   b4f66:	bfab      	itete	ge
   b4f68:	ee07 3a90 	vmovge	s15, r3
    T_neg = rawTemp - 32768;
   b4f6c:	edc4 7a02 	vstrlt	s15, [r4, #8]
    float_temp = (float)rawTemp/100.0f;
   b4f70:	eef8 7a67 	vcvtge.f32.u32	s15, s15
    float_temp = (float)(0 - 32768 + T_neg)/100.0f;
   b4f74:	ee77 7ac7 	vsublt.f32	s15, s15, s14
  }

  *temp = float_temp;
  return WE_SUCCESS;
   b4f78:	2000      	movs	r0, #0
    float_temp = (float)rawTemp/100.0f;
   b4f7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  *temp = float_temp;
   b4f7e:	ed85 7a00 	vstr	s14, [r5]
}
   b4f82:	bd38      	pop	{r3, r4, r5, pc}
   b4f84:	42c80000 	.word	0x42c80000
   b4f88:	47000000 	.word	0x47000000

000b4f8c <_ZN11Sensor_TIDS19set_continuous_modeEi>:
            The measurement rate is defined by the user selectable ODR.
  @param  ODR value
  @retval Error code
*/
int Sensor_TIDS::set_continuous_mode(int _ODR)
{
   b4f8c:	b510      	push	{r4, lr}
  ODR = _ODR;
   b4f8e:	6001      	str	r1, [r0, #0]
{
   b4f90:	4604      	mov	r4, r0
  if(WE_FAIL == power_down())
   b4f92:	f7ff ffa4 	bl	b4ede <_ZN11Sensor_TIDS10power_downEv>
   b4f96:	3001      	adds	r0, #1
   b4f98:	d102      	bne.n	b4fa0 <_ZN11Sensor_TIDS19set_continuous_modeEi+0x14>
  {
      return WE_FAIL;
   b4f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      return WE_FAIL;
  }
  
  return WE_SUCCESS;
  
}
   b4f9e:	bd10      	pop	{r4, pc}
  if(WE_FAIL == SW_RESET())
   b4fa0:	4620      	mov	r0, r4
   b4fa2:	f7ff ffb3 	bl	b4f0c <_ZN11Sensor_TIDS8SW_RESETEv>
   b4fa6:	3001      	adds	r0, #1
   b4fa8:	d0f7      	beq.n	b4f9a <_ZN11Sensor_TIDS19set_continuous_modeEi+0xe>
  if(WE_FAIL == Select_ODR())  
   b4faa:	4620      	mov	r0, r4
   b4fac:	f7ff ff73 	bl	b4e96 <_ZN11Sensor_TIDS10Select_ODREv>
   b4fb0:	3001      	adds	r0, #1
   b4fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4fb6:	bf18      	it	ne
   b4fb8:	2000      	movne	r0, #0
   b4fba:	e7f0      	b.n	b4f9e <_ZN11Sensor_TIDS19set_continuous_modeEi+0x12>

000b4fbc <TIDS_setSwReset>:
* @brief  Set software reset [enabled,disabled]
* @param  state
* @retval Error code
*/
int8_t TIDS_setSwReset(TIDS_state_t mode)
{
   b4fbc:	b513      	push	{r0, r1, r4, lr}
   b4fbe:	4604      	mov	r4, r0
	TIDS_soft_reset_t swRstReg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_SOFT_RESET_REG, 1, (uint8_t *)&swRstReg))
   b4fc0:	aa01      	add	r2, sp, #4
   b4fc2:	2101      	movs	r1, #1
   b4fc4:	200c      	movs	r0, #12
   b4fc6:	f7ff ff09 	bl	b4ddc <ReadReg>
   b4fca:	1c43      	adds	r3, r0, #1
   b4fcc:	d00f      	beq.n	b4fee <TIDS_setSwReset+0x32>
	return WE_FAIL;

	swRstReg.reset = mode;
   b4fce:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_SOFT_RESET_REG, 1, (uint8_t *)&swRstReg))
   b4fd2:	aa01      	add	r2, sp, #4
	swRstReg.reset = mode;
   b4fd4:	f364 0341 	bfi	r3, r4, #1, #1
	if (WE_FAIL == WriteReg((uint8_t)TIDS_SOFT_RESET_REG, 1, (uint8_t *)&swRstReg))
   b4fd8:	2101      	movs	r1, #1
   b4fda:	200c      	movs	r0, #12
	swRstReg.reset = mode;
   b4fdc:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_SOFT_RESET_REG, 1, (uint8_t *)&swRstReg))
   b4fe0:	f7ff ff2c 	bl	b4e3c <WriteReg>
   b4fe4:	3001      	adds	r0, #1
   b4fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4fea:	bf18      	it	ne
   b4fec:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
   b4fee:	b002      	add	sp, #8
   b4ff0:	bd10      	pop	{r4, pc}

000b4ff2 <TIDS_setContinuousMode>:
* @brief  Set the free run mode[enabled,disabled]
* @param  mode
* @retval Error code
*/
int8_t TIDS_setContinuousMode(TIDS_state_t mode)
{
   b4ff2:	b513      	push	{r0, r1, r4, lr}
   b4ff4:	4604      	mov	r4, r0
	TIDS_ctrl_t ctrl_reg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b4ff6:	aa01      	add	r2, sp, #4
   b4ff8:	2101      	movs	r1, #1
   b4ffa:	2004      	movs	r0, #4
   b4ffc:	f7ff feee 	bl	b4ddc <ReadReg>
   b5000:	1c43      	adds	r3, r0, #1
   b5002:	d00f      	beq.n	b5024 <TIDS_setContinuousMode+0x32>
	return WE_FAIL;

	ctrl_reg.freeRunBit = mode;
   b5004:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b5008:	aa01      	add	r2, sp, #4
	ctrl_reg.freeRunBit = mode;
   b500a:	f364 0382 	bfi	r3, r4, #2, #1
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b500e:	2101      	movs	r1, #1
   b5010:	2004      	movs	r0, #4
	ctrl_reg.freeRunBit = mode;
   b5012:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b5016:	f7ff ff11 	bl	b4e3c <WriteReg>
   b501a:	3001      	adds	r0, #1
   b501c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5020:	bf18      	it	ne
   b5022:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
   b5024:	b002      	add	sp, #8
   b5026:	bd10      	pop	{r4, pc}

000b5028 <TIDS_setBlockDataUpdate>:
* @brief  Set the block data update feature
* @param  state
* @retval Error code
*/
int8_t TIDS_setBlockDataUpdate(TIDS_state_t bdu)
{
   b5028:	b513      	push	{r0, r1, r4, lr}
   b502a:	4604      	mov	r4, r0
	TIDS_ctrl_t ctrl_reg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b502c:	aa01      	add	r2, sp, #4
   b502e:	2101      	movs	r1, #1
   b5030:	2004      	movs	r0, #4
   b5032:	f7ff fed3 	bl	b4ddc <ReadReg>
   b5036:	1c43      	adds	r3, r0, #1
   b5038:	d00f      	beq.n	b505a <TIDS_setBlockDataUpdate+0x32>
	return WE_FAIL;

	ctrl_reg.blockDataUpdate = bdu;
   b503a:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b503e:	aa01      	add	r2, sp, #4
	ctrl_reg.blockDataUpdate = bdu;
   b5040:	f364 1386 	bfi	r3, r4, #6, #1
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b5044:	2101      	movs	r1, #1
   b5046:	2004      	movs	r0, #4
	ctrl_reg.blockDataUpdate = bdu;
   b5048:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b504c:	f7ff fef6 	bl	b4e3c <WriteReg>
   b5050:	3001      	adds	r0, #1
   b5052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5056:	bf18      	it	ne
   b5058:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
   b505a:	b002      	add	sp, #8
   b505c:	bd10      	pop	{r4, pc}

000b505e <TIDS_setOutputDataRate>:
* @brief  Set the output data rate of the sensor
* @param  output data rate
* @retval Error code
*/
int8_t TIDS_setOutputDataRate(TIDS_output_data_rate_t odr)
{
   b505e:	b513      	push	{r0, r1, r4, lr}
   b5060:	4604      	mov	r4, r0
	TIDS_ctrl_t ctrl_reg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b5062:	aa01      	add	r2, sp, #4
   b5064:	2101      	movs	r1, #1
   b5066:	2004      	movs	r0, #4
   b5068:	f7ff feb8 	bl	b4ddc <ReadReg>
   b506c:	1c43      	adds	r3, r0, #1
   b506e:	d00f      	beq.n	b5090 <TIDS_setOutputDataRate+0x32>
	return WE_FAIL;

	ctrl_reg.outputDataRate = odr;
   b5070:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b5074:	aa01      	add	r2, sp, #4
	ctrl_reg.outputDataRate = odr;
   b5076:	f364 1305 	bfi	r3, r4, #4, #2
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b507a:	2101      	movs	r1, #1
   b507c:	2004      	movs	r0, #4
	ctrl_reg.outputDataRate = odr;
   b507e:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b5082:	f7ff fedb 	bl	b4e3c <WriteReg>
   b5086:	3001      	adds	r0, #1
   b5088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b508c:	bf18      	it	ne
   b508e:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
   b5090:	b002      	add	sp, #8
   b5092:	bd10      	pop	{r4, pc}

000b5094 <TIDS_setAutoIncrement>:
* @brief  Set the Auto increment feature
* @param  state
* @retval Error code
*/
int8_t TIDS_setAutoIncrement(TIDS_state_t inc)
{
   b5094:	b513      	push	{r0, r1, r4, lr}
   b5096:	4604      	mov	r4, r0
	TIDS_ctrl_t ctrl_reg;

	if (WE_FAIL == ReadReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b5098:	aa01      	add	r2, sp, #4
   b509a:	2101      	movs	r1, #1
   b509c:	2004      	movs	r0, #4
   b509e:	f7ff fe9d 	bl	b4ddc <ReadReg>
   b50a2:	1c43      	adds	r3, r0, #1
   b50a4:	d00f      	beq.n	b50c6 <TIDS_setAutoIncrement+0x32>
	return WE_FAIL;

	ctrl_reg.autoAddIncr = inc;
   b50a6:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b50aa:	aa01      	add	r2, sp, #4
	ctrl_reg.autoAddIncr = inc;
   b50ac:	f364 03c3 	bfi	r3, r4, #3, #1
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b50b0:	2101      	movs	r1, #1
   b50b2:	2004      	movs	r0, #4
	ctrl_reg.autoAddIncr = inc;
   b50b4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (WE_FAIL == WriteReg((uint8_t)TIDS_CTRL_REG, 1, (uint8_t *)&ctrl_reg))
   b50b8:	f7ff fec0 	bl	b4e3c <WriteReg>
   b50bc:	3001      	adds	r0, #1
   b50be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b50c2:	bf18      	it	ne
   b50c4:	2000      	movne	r0, #0
	return WE_FAIL;

	return WE_SUCCESS;
}
   b50c6:	b002      	add	sp, #8
   b50c8:	bd10      	pop	{r4, pc}

000b50ca <TIDS_getRAWTemperature>:
* @brief  Read the raw measured temperature value
* @param  pointer to Temperature Measurement
* @retval Error code
*/
int8_t TIDS_getRAWTemperature(uint16_t *rawTemp)
{
   b50ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50cc:	4605      	mov	r5, r0
	uint8_t tmp[2] = { 0 };
   b50ce:	2400      	movs	r4, #0

	if (WE_FAIL == ReadReg((uint8_t)TIDS_DATA_T_L_REG, 1, &tmp[0]))
   b50d0:	aa01      	add	r2, sp, #4
   b50d2:	2101      	movs	r1, #1
   b50d4:	2006      	movs	r0, #6
	uint8_t tmp[2] = { 0 };
   b50d6:	f8ad 4004 	strh.w	r4, [sp, #4]
	if (WE_FAIL == ReadReg((uint8_t)TIDS_DATA_T_L_REG, 1, &tmp[0]))
   b50da:	f7ff fe7f 	bl	b4ddc <ReadReg>
   b50de:	3001      	adds	r0, #1
   b50e0:	d103      	bne.n	b50ea <TIDS_getRAWTemperature+0x20>
	return WE_FAIL;
   b50e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return WE_FAIL;

	*rawTemp = (uint16_t)(tmp[1] << 8);
	*rawTemp |= (uint16_t)tmp[0];
	return WE_SUCCESS;
}
   b50e6:	b003      	add	sp, #12
   b50e8:	bd30      	pop	{r4, r5, pc}
	if (WE_FAIL == ReadReg((uint8_t)TIDS_DATA_T_H_REG, 1, &tmp[1]))
   b50ea:	f10d 0205 	add.w	r2, sp, #5
   b50ee:	2101      	movs	r1, #1
   b50f0:	2007      	movs	r0, #7
   b50f2:	f7ff fe73 	bl	b4ddc <ReadReg>
   b50f6:	3001      	adds	r0, #1
   b50f8:	d0f3      	beq.n	b50e2 <TIDS_getRAWTemperature+0x18>
	*rawTemp |= (uint16_t)tmp[0];
   b50fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b50fe:	802b      	strh	r3, [r5, #0]
	return WE_SUCCESS;
   b5100:	4620      	mov	r0, r4
   b5102:	e7f0      	b.n	b50e6 <TIDS_getRAWTemperature+0x1c>

000b5104 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5108:	b085      	sub	sp, #20
   b510a:	461f      	mov	r7, r3
   b510c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5110:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5114:	eba8 0902 	sub.w	r9, r8, r2
   b5118:	eba7 0a01 	sub.w	sl, r7, r1
   b511c:	f1b9 0f00 	cmp.w	r9, #0
   b5120:	bfb8      	it	lt
   b5122:	f1c9 0900 	rsblt	r9, r9, #0
   b5126:	f1ba 0f00 	cmp.w	sl, #0
   b512a:	bfb8      	it	lt
   b512c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5130:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5132:	4683      	mov	fp, r0
   b5134:	460c      	mov	r4, r1
   b5136:	4615      	mov	r5, r2
    if (steep) {
   b5138:	dd04      	ble.n	b5144 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b513a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b513c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b513e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5140:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5142:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5144:	42bc      	cmp	r4, r7
   b5146:	dd05      	ble.n	b5154 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5148:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b514a:	4645      	mov	r5, r8
   b514c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b514e:	4622      	mov	r2, r4
   b5150:	463c      	mov	r4, r7
   b5152:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5154:	1b3e      	subs	r6, r7, r4
   b5156:	b2b2      	uxth	r2, r6
   b5158:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b515a:	eba8 0205 	sub.w	r2, r8, r5
   b515e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5162:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5166:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b516a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b516e:	4545      	cmp	r5, r8
   b5170:	bfb4      	ite	lt
   b5172:	2201      	movlt	r2, #1
   b5174:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5178:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b517a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b517c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b517e:	42bc      	cmp	r4, r7
   b5180:	dc1c      	bgt.n	b51bc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5182:	f8db 2000 	ldr.w	r2, [fp]
   b5186:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5188:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b518a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b518e:	bfc7      	ittee	gt
   b5190:	4629      	movgt	r1, r5
   b5192:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5194:	462a      	movle	r2, r5
   b5196:	4621      	movle	r1, r4
   b5198:	4658      	mov	r0, fp
   b519a:	47c0      	blx	r8
        }
        err -= dy;
   b519c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b519e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b51a0:	1ab6      	subs	r6, r6, r2
   b51a2:	b2b1      	uxth	r1, r6
   b51a4:	b236      	sxth	r6, r6
        if (err < 0) {
   b51a6:	2e00      	cmp	r6, #0
   b51a8:	da05      	bge.n	b51b6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b51aa:	9a02      	ldr	r2, [sp, #8]
   b51ac:	4415      	add	r5, r2
            err += dx;
   b51ae:	9a00      	ldr	r2, [sp, #0]
   b51b0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b51b2:	b22d      	sxth	r5, r5
            err += dx;
   b51b4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b51b6:	3401      	adds	r4, #1
   b51b8:	b224      	sxth	r4, r4
   b51ba:	e7e0      	b.n	b517e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b51bc:	b005      	add	sp, #20
   b51be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b51c2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b51c2:	4770      	bx	lr

000b51c4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b51c4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b51c6:	6804      	ldr	r4, [r0, #0]
   b51c8:	6924      	ldr	r4, [r4, #16]
   b51ca:	46a4      	mov	ip, r4
}
   b51cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b51d0:	4760      	bx	ip

000b51d2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b51d2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b51d4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b51d6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b51da:	9502      	str	r5, [sp, #8]
   b51dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b51de:	46a4      	mov	ip, r4
}
   b51e0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b51e2:	4760      	bx	ip

000b51e4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b51e4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b51e6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b51e8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b51ec:	9502      	str	r5, [sp, #8]
   b51ee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b51f0:	46a4      	mov	ip, r4
}
   b51f2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b51f4:	4760      	bx	ip

000b51f6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b51f6:	b470      	push	{r4, r5, r6}
   b51f8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b51fc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5200:	6804      	ldr	r4, [r0, #0]
   b5202:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5206:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5208:	46a4      	mov	ip, r4
}
   b520a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b520c:	4760      	bx	ip

000b520e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b520e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5212:	461c      	mov	r4, r3
    startWrite();
   b5214:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5216:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b521a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b521c:	4605      	mov	r5, r0
   b521e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5220:	3c01      	subs	r4, #1
   b5222:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5224:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5226:	b224      	sxth	r4, r4
    startWrite();
   b5228:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b522a:	682b      	ldr	r3, [r5, #0]
   b522c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5230:	9400      	str	r4, [sp, #0]
   b5232:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5234:	4628      	mov	r0, r5
   b5236:	463b      	mov	r3, r7
   b5238:	4632      	mov	r2, r6
   b523a:	4639      	mov	r1, r7
   b523c:	47a0      	blx	r4
    endWrite();
   b523e:	682b      	ldr	r3, [r5, #0]
   b5240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5242:	4628      	mov	r0, r5
}
   b5244:	b002      	add	sp, #8
   b5246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b524a:	4718      	bx	r3

000b524c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b524c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5250:	461d      	mov	r5, r3
    startWrite();
   b5252:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5254:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5258:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b525a:	4604      	mov	r4, r0
   b525c:	4617      	mov	r7, r2
   b525e:	460e      	mov	r6, r1
    startWrite();
   b5260:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5262:	e9cd 7800 	strd	r7, r8, [sp]
   b5266:	6822      	ldr	r2, [r4, #0]
   b5268:	1e6b      	subs	r3, r5, #1
   b526a:	4433      	add	r3, r6
   b526c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b526e:	4620      	mov	r0, r4
   b5270:	b21b      	sxth	r3, r3
   b5272:	463a      	mov	r2, r7
   b5274:	4631      	mov	r1, r6
   b5276:	47a8      	blx	r5
    endWrite();
   b5278:	6823      	ldr	r3, [r4, #0]
   b527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b527c:	4620      	mov	r0, r4
}
   b527e:	b002      	add	sp, #8
   b5280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5284:	4718      	bx	r3

000b5286 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5286:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b528a:	461e      	mov	r6, r3
    startWrite();
   b528c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b528e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5292:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5294:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5298:	460c      	mov	r4, r1
   b529a:	4605      	mov	r5, r0
   b529c:	4617      	mov	r7, r2
    startWrite();
   b529e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b52a0:	4426      	add	r6, r4
   b52a2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b52a4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b52a6:	da0b      	bge.n	b52c0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b52a8:	f8cd 8000 	str.w	r8, [sp]
   b52ac:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b52b0:	4621      	mov	r1, r4
   b52b2:	464b      	mov	r3, r9
   b52b4:	463a      	mov	r2, r7
   b52b6:	4628      	mov	r0, r5
   b52b8:	3401      	adds	r4, #1
   b52ba:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b52bc:	b224      	sxth	r4, r4
   b52be:	e7f0      	b.n	b52a2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b52c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52c2:	4628      	mov	r0, r5
}
   b52c4:	b002      	add	sp, #8
   b52c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b52ca:	4718      	bx	r3

000b52cc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b52cc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b52ce:	6802      	ldr	r2, [r0, #0]
   b52d0:	9101      	str	r1, [sp, #4]
   b52d2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b52d6:	9100      	str	r1, [sp, #0]
   b52d8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b52da:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b52de:	2200      	movs	r2, #0
   b52e0:	4611      	mov	r1, r2
   b52e2:	47a0      	blx	r4
}
   b52e4:	b002      	add	sp, #8
   b52e6:	bd10      	pop	{r4, pc}

000b52e8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b52e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b52ec:	4299      	cmp	r1, r3
        uint16_t color) {
   b52ee:	4616      	mov	r6, r2
   b52f0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b52f4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b52f8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b52fa:	4680      	mov	r8, r0
   b52fc:	460d      	mov	r5, r1
   b52fe:	461c      	mov	r4, r3
    if(x0 == x1){
   b5300:	d113      	bne.n	b532a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5302:	42be      	cmp	r6, r7
   b5304:	bfc8      	it	gt
   b5306:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5308:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b530c:	bfc4      	itt	gt
   b530e:	463e      	movgt	r6, r7
   b5310:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5312:	1c7b      	adds	r3, r7, #1
   b5314:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5316:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5318:	b21b      	sxth	r3, r3
   b531a:	4632      	mov	r2, r6
   b531c:	4629      	mov	r1, r5
   b531e:	4640      	mov	r0, r8
   b5320:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5322:	b003      	add	sp, #12
   b5324:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5328:	4760      	bx	ip
    } else if(y0 == y1){
   b532a:	42be      	cmp	r6, r7
   b532c:	d10a      	bne.n	b5344 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b532e:	4299      	cmp	r1, r3
   b5330:	bfc2      	ittt	gt
   b5332:	460b      	movgt	r3, r1
   b5334:	4625      	movgt	r5, r4
   b5336:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5338:	1c63      	adds	r3, r4, #1
   b533a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b533e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5340:	1b5b      	subs	r3, r3, r5
   b5342:	e7e9      	b.n	b5318 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5344:	6953      	ldr	r3, [r2, #20]
   b5346:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5348:	e9cd 7900 	strd	r7, r9, [sp]
   b534c:	f8d8 3000 	ldr.w	r3, [r8]
   b5350:	4640      	mov	r0, r8
   b5352:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5354:	4632      	mov	r2, r6
   b5356:	4623      	mov	r3, r4
   b5358:	4629      	mov	r1, r5
   b535a:	47b8      	blx	r7
        endWrite();
   b535c:	f8d8 3000 	ldr.w	r3, [r8]
   b5360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5362:	4640      	mov	r0, r8
}
   b5364:	b003      	add	sp, #12
   b5366:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b536a:	4718      	bx	r3

000b536c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b536c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5370:	461d      	mov	r5, r3
    startWrite();
   b5372:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5374:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5378:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b537a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b537e:	4604      	mov	r4, r0
   b5380:	460f      	mov	r7, r1
   b5382:	4616      	mov	r6, r2
    startWrite();
   b5384:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5386:	6823      	ldr	r3, [r4, #0]
   b5388:	f8cd 8000 	str.w	r8, [sp]
   b538c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5390:	4632      	mov	r2, r6
   b5392:	462b      	mov	r3, r5
   b5394:	4639      	mov	r1, r7
   b5396:	4620      	mov	r0, r4
   b5398:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b539a:	6823      	ldr	r3, [r4, #0]
   b539c:	f8cd 8000 	str.w	r8, [sp]
   b53a0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b53a4:	4432      	add	r2, r6
   b53a6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b53aa:	4639      	mov	r1, r7
   b53ac:	462b      	mov	r3, r5
   b53ae:	4620      	mov	r0, r4
   b53b0:	b212      	sxth	r2, r2
   b53b2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b53b4:	6823      	ldr	r3, [r4, #0]
   b53b6:	f8cd 8000 	str.w	r8, [sp]
   b53ba:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b53be:	4632      	mov	r2, r6
   b53c0:	464b      	mov	r3, r9
   b53c2:	4639      	mov	r1, r7
   b53c4:	4620      	mov	r0, r4
   b53c6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b53c8:	1e6b      	subs	r3, r5, #1
   b53ca:	19d9      	adds	r1, r3, r7
   b53cc:	6823      	ldr	r3, [r4, #0]
   b53ce:	f8cd 8000 	str.w	r8, [sp]
   b53d2:	6a1d      	ldr	r5, [r3, #32]
   b53d4:	4620      	mov	r0, r4
   b53d6:	464b      	mov	r3, r9
   b53d8:	4632      	mov	r2, r6
   b53da:	b209      	sxth	r1, r1
   b53dc:	47a8      	blx	r5
    endWrite();
   b53de:	6823      	ldr	r3, [r4, #0]
   b53e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53e2:	4620      	mov	r0, r4
}
   b53e4:	b002      	add	sp, #8
   b53e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b53ea:	4718      	bx	r3

000b53ec <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b53ec:	4770      	bx	lr

000b53ee <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b53ee:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b53f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b53f6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b53f8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b53fa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b53fe:	bf59      	ittee	pl
   b5400:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5402:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5404:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5406:	81c3      	strhmi	r3, [r0, #14]
}
   b5408:	4770      	bx	lr
	...

000b540c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b540c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b540e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5410:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5412:	4a07      	ldr	r2, [pc, #28]	; (b5430 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5414:	4d07      	ldr	r5, [pc, #28]	; (b5434 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5416:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5418:	2400      	movs	r4, #0
    _width    = WIDTH;
   b541a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b541c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5420:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5424:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5426:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5428:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b542a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b542c:	6204      	str	r4, [r0, #32]
}
   b542e:	bd30      	pop	{r4, r5, pc}
   b5430:	01000101 	.word	0x01000101
   b5434:	000b8b70 	.word	0x000b8b70

000b5438 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b543c:	ed2d 8b02 	vpush	{d8}
   b5440:	b091      	sub	sp, #68	; 0x44
   b5442:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5444:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5446:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b544a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b544e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5452:	9103      	str	r1, [sp, #12]
   b5454:	461f      	mov	r7, r3
   b5456:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b545a:	9304      	str	r3, [sp, #16]
   b545c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b545e:	2a00      	cmp	r2, #0
   b5460:	f040 80c5 	bne.w	b55ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5464:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5468:	428b      	cmp	r3, r1
   b546a:	f340 814c 	ble.w	b5706 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b546e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5472:	42b3      	cmp	r3, r6
   b5474:	f340 8147 	ble.w	b5706 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5478:	2306      	movs	r3, #6
   b547a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b547e:	2b00      	cmp	r3, #0
   b5480:	f340 8141 	ble.w	b5706 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5484:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5488:	2b00      	cmp	r3, #0
   b548a:	f340 813c 	ble.w	b5706 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b548e:	7f03      	ldrb	r3, [r0, #28]
   b5490:	b91b      	cbnz	r3, b549a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5492:	2faf      	cmp	r7, #175	; 0xaf
   b5494:	bf84      	itt	hi
   b5496:	3701      	addhi	r7, #1
   b5498:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b549a:	f8db 3000 	ldr.w	r3, [fp]
   b549e:	4658      	mov	r0, fp
   b54a0:	695b      	ldr	r3, [r3, #20]
   b54a2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b54a4:	2205      	movs	r2, #5
   b54a6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b54a8:	2200      	movs	r2, #0
   b54aa:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b54ac:	4a98      	ldr	r2, [pc, #608]	; (b5710 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b54ae:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b54b2:	18d3      	adds	r3, r2, r3
   b54b4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b54b6:	b2b3      	uxth	r3, r6
   b54b8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b54ba:	9a05      	ldr	r2, [sp, #20]
   b54bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b54be:	5c9b      	ldrb	r3, [r3, r2]
   b54c0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b54c2:	b2ab      	uxth	r3, r5
   b54c4:	930b      	str	r3, [sp, #44]	; 0x2c
   b54c6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b54ca:	9308      	str	r3, [sp, #32]
   b54cc:	9b03      	ldr	r3, [sp, #12]
   b54ce:	fb02 f905 	mul.w	r9, r2, r5
   b54d2:	fa19 f983 	uxtah	r9, r9, r3
   b54d6:	fa0f f389 	sxth.w	r3, r9
   b54da:	ee08 3a10 	vmov	s16, r3
   b54de:	2308      	movs	r3, #8
   b54e0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b54e2:	9b03      	ldr	r3, [sp, #12]
   b54e4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b54e8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b54ec:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b54f0:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b54f2:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b54f6:	07d2      	lsls	r2, r2, #31
   b54f8:	d552      	bpl.n	b55a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b54fa:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b54fc:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5500:	d13e      	bne.n	b5580 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5502:	2c01      	cmp	r4, #1
   b5504:	d13c      	bne.n	b5580 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5506:	699b      	ldr	r3, [r3, #24]
   b5508:	9906      	ldr	r1, [sp, #24]
   b550a:	461f      	mov	r7, r3
   b550c:	9b04      	ldr	r3, [sp, #16]
   b550e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5510:	b212      	sxth	r2, r2
   b5512:	4651      	mov	r1, sl
   b5514:	4658      	mov	r0, fp
   b5516:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5518:	f109 0301 	add.w	r3, r9, #1
   b551c:	fa4f f983 	sxtb.w	r9, r3
   b5520:	9b07      	ldr	r3, [sp, #28]
   b5522:	085b      	lsrs	r3, r3, #1
   b5524:	9307      	str	r3, [sp, #28]
   b5526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5528:	3b01      	subs	r3, #1
   b552a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b552e:	930a      	str	r3, [sp, #40]	; 0x28
   b5530:	d1de      	bne.n	b54f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5532:	9f05      	ldr	r7, [sp, #20]
   b5534:	3701      	adds	r7, #1
   b5536:	b27b      	sxtb	r3, r7
   b5538:	9305      	str	r3, [sp, #20]
   b553a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b553c:	3b01      	subs	r3, #1
   b553e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5542:	9309      	str	r3, [sp, #36]	; 0x24
   b5544:	d1b9      	bne.n	b54ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5546:	9b04      	ldr	r3, [sp, #16]
   b5548:	4543      	cmp	r3, r8
   b554a:	d00f      	beq.n	b556c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b554c:	2d01      	cmp	r5, #1
   b554e:	f8db 3000 	ldr.w	r3, [fp]
   b5552:	d13b      	bne.n	b55cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5554:	2c01      	cmp	r4, #1
   b5556:	d139      	bne.n	b55cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5558:	9908      	ldr	r1, [sp, #32]
   b555a:	f8cd 8000 	str.w	r8, [sp]
   b555e:	3105      	adds	r1, #5
   b5560:	6a1c      	ldr	r4, [r3, #32]
   b5562:	4632      	mov	r2, r6
   b5564:	2308      	movs	r3, #8
   b5566:	b209      	sxth	r1, r1
   b5568:	4658      	mov	r0, fp
   b556a:	47a0      	blx	r4
        endWrite();
   b556c:	f8db 3000 	ldr.w	r3, [fp]
   b5570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5572:	4658      	mov	r0, fp
}
   b5574:	b011      	add	sp, #68	; 0x44
   b5576:	ecbd 8b02 	vpop	{d8}
   b557a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b557e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5580:	9906      	ldr	r1, [sp, #24]
   b5582:	fb14 f202 	smulbb	r2, r4, r2
   b5586:	440a      	add	r2, r1
   b5588:	9904      	ldr	r1, [sp, #16]
   b558a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b558c:	9400      	str	r4, [sp, #0]
   b558e:	69db      	ldr	r3, [r3, #28]
   b5590:	ee18 1a10 	vmov	r1, s16
   b5594:	461f      	mov	r7, r3
   b5596:	b212      	sxth	r2, r2
   b5598:	462b      	mov	r3, r5
   b559a:	4658      	mov	r0, fp
   b559c:	47b8      	blx	r7
   b559e:	e7bb      	b.n	b5518 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b55a0:	9a04      	ldr	r2, [sp, #16]
   b55a2:	4542      	cmp	r2, r8
   b55a4:	d0b8      	beq.n	b5518 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b55a6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b55a8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b55ac:	d107      	bne.n	b55be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b55ae:	2c01      	cmp	r4, #1
   b55b0:	d105      	bne.n	b55be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b55b2:	699b      	ldr	r3, [r3, #24]
   b55b4:	9906      	ldr	r1, [sp, #24]
   b55b6:	461f      	mov	r7, r3
   b55b8:	440a      	add	r2, r1
   b55ba:	4643      	mov	r3, r8
   b55bc:	e7a8      	b.n	b5510 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b55be:	9906      	ldr	r1, [sp, #24]
   b55c0:	f8cd 8004 	str.w	r8, [sp, #4]
   b55c4:	fb14 f202 	smulbb	r2, r4, r2
   b55c8:	440a      	add	r2, r1
   b55ca:	e7df      	b.n	b558c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b55cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b55ce:	f8cd 8004 	str.w	r8, [sp, #4]
   b55d2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b55d6:	9a08      	ldr	r2, [sp, #32]
   b55d8:	00e4      	lsls	r4, r4, #3
   b55da:	440a      	add	r2, r1
   b55dc:	4611      	mov	r1, r2
   b55de:	9400      	str	r4, [sp, #0]
   b55e0:	69dc      	ldr	r4, [r3, #28]
   b55e2:	4632      	mov	r2, r6
   b55e4:	462b      	mov	r3, r5
   b55e6:	b209      	sxth	r1, r1
   b55e8:	4658      	mov	r0, fp
   b55ea:	47a0      	blx	r4
        endWrite();
   b55ec:	e7be      	b.n	b556c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b55ee:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b55f0:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b55f2:	6812      	ldr	r2, [r2, #0]
   b55f4:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b55f6:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b55f8:	b2ff      	uxtb	r7, r7
   b55fa:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b55fe:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5602:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5604:	789a      	ldrb	r2, [r3, #2]
   b5606:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5608:	78da      	ldrb	r2, [r3, #3]
   b560a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b560c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b560e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5612:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5616:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5618:	d801      	bhi.n	b561e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b561a:	2c01      	cmp	r4, #1
   b561c:	d957      	bls.n	b56ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b561e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5622:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5624:	fa0f f38a 	sxth.w	r3, sl
   b5628:	9307      	str	r3, [sp, #28]
        startWrite();
   b562a:	f8db 3000 	ldr.w	r3, [fp]
   b562e:	4658      	mov	r0, fp
   b5630:	695b      	ldr	r3, [r3, #20]
   b5632:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5634:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5636:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b563a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b563c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5640:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5642:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5644:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b5646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5648:	429f      	cmp	r7, r3
   b564a:	d28f      	bcs.n	b556c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b564c:	9b07      	ldr	r3, [sp, #28]
   b564e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5650:	443b      	add	r3, r7
   b5652:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5656:	2200      	movs	r2, #0
   b5658:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b565a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b565c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b565e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5662:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5666:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b566a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b566c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b566e:	9905      	ldr	r1, [sp, #20]
   b5670:	4291      	cmp	r1, r2
   b5672:	d241      	bcs.n	b56f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5674:	1c5a      	adds	r2, r3, #1
   b5676:	b2d2      	uxtb	r2, r2
   b5678:	075b      	lsls	r3, r3, #29
   b567a:	920d      	str	r2, [sp, #52]	; 0x34
   b567c:	d107      	bne.n	b568e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b567e:	9b06      	ldr	r3, [sp, #24]
   b5680:	9906      	ldr	r1, [sp, #24]
   b5682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5684:	3301      	adds	r3, #1
   b5686:	b29b      	uxth	r3, r3
   b5688:	f812 9001 	ldrb.w	r9, [r2, r1]
   b568c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b568e:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5692:	d012      	beq.n	b56ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5694:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5696:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b569a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b569e:	d11a      	bne.n	b56d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b56a0:	2c01      	cmp	r4, #1
   b56a2:	d118      	bne.n	b56d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b56a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b56a6:	699b      	ldr	r3, [r3, #24]
   b56a8:	4411      	add	r1, r2
   b56aa:	9a05      	ldr	r2, [sp, #20]
   b56ac:	4411      	add	r1, r2
   b56ae:	461e      	mov	r6, r3
   b56b0:	4652      	mov	r2, sl
   b56b2:	9b04      	ldr	r3, [sp, #16]
   b56b4:	b209      	sxth	r1, r1
   b56b6:	4658      	mov	r0, fp
   b56b8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b56ba:	9e05      	ldr	r6, [sp, #20]
   b56bc:	3601      	adds	r6, #1
   b56be:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b56c0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b56c4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b56c6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b56ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b56cc:	e7ce      	b.n	b566c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b56ce:	2300      	movs	r3, #0
   b56d0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b56d4:	e7a9      	b.n	b562a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b56d6:	9805      	ldr	r0, [sp, #20]
   b56d8:	9a08      	ldr	r2, [sp, #32]
   b56da:	4402      	add	r2, r0
   b56dc:	fb02 1105 	mla	r1, r2, r5, r1
   b56e0:	9a04      	ldr	r2, [sp, #16]
   b56e2:	e9cd 4200 	strd	r4, r2, [sp]
   b56e6:	69db      	ldr	r3, [r3, #28]
   b56e8:	ee18 2a10 	vmov	r2, s16
   b56ec:	461e      	mov	r6, r3
   b56ee:	b209      	sxth	r1, r1
   b56f0:	462b      	mov	r3, r5
   b56f2:	4658      	mov	r0, fp
   b56f4:	47b0      	blx	r6
   b56f6:	e7e0      	b.n	b56ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b56f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b56fa:	3701      	adds	r7, #1
   b56fc:	4498      	add	r8, r3
   b56fe:	fa5f f888 	uxtb.w	r8, r8
   b5702:	b2ff      	uxtb	r7, r7
   b5704:	e79f      	b.n	b5646 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5706:	b011      	add	sp, #68	; 0x44
   b5708:	ecbd 8b02 	vpop	{d8}
   b570c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5710:	000b8668 	.word	0x000b8668

000b5714 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5714:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5716:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5718:	b085      	sub	sp, #20
   b571a:	4604      	mov	r4, r0
   b571c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b571e:	2a00      	cmp	r2, #0
   b5720:	d134      	bne.n	b578c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5722:	290a      	cmp	r1, #10
   b5724:	d108      	bne.n	b5738 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5726:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5728:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b572a:	7e42      	ldrb	r2, [r0, #25]
   b572c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5730:	8263      	strh	r3, [r4, #18]
}
   b5732:	2001      	movs	r0, #1
   b5734:	b005      	add	sp, #20
   b5736:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5738:	290d      	cmp	r1, #13
   b573a:	d0fa      	beq.n	b5732 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b573c:	7ee1      	ldrb	r1, [r4, #27]
   b573e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5740:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5742:	b171      	cbz	r1, b5762 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5744:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5748:	2106      	movs	r1, #6
   b574a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b574e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5752:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5754:	bfc1      	itttt	gt
   b5756:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b575a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b575c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5760:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5762:	8ae2      	ldrh	r2, [r4, #22]
   b5764:	9201      	str	r2, [sp, #4]
   b5766:	8aa2      	ldrh	r2, [r4, #20]
   b5768:	9200      	str	r2, [sp, #0]
   b576a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b576e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5772:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5776:	4620      	mov	r0, r4
   b5778:	f7ff fe5e 	bl	b5438 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b577c:	7e23      	ldrb	r3, [r4, #24]
   b577e:	8a22      	ldrh	r2, [r4, #16]
   b5780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5784:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5788:	8223      	strh	r3, [r4, #16]
   b578a:	e7d2      	b.n	b5732 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b578c:	290a      	cmp	r1, #10
   b578e:	d107      	bne.n	b57a0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5790:	2300      	movs	r3, #0
   b5792:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b5794:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5796:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5798:	8a43      	ldrh	r3, [r0, #18]
   b579a:	fb01 3302 	mla	r3, r1, r2, r3
   b579e:	e7c7      	b.n	b5730 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b57a0:	290d      	cmp	r1, #13
   b57a2:	d0c6      	beq.n	b5732 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b57a4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b57a6:	42a9      	cmp	r1, r5
   b57a8:	d3c3      	bcc.n	b5732 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b57aa:	7a51      	ldrb	r1, [r2, #9]
   b57ac:	4299      	cmp	r1, r3
   b57ae:	d3c0      	bcc.n	b5732 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b57b0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b57b2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b57b4:	b2ed      	uxtb	r5, r5
   b57b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b57ba:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b57bc:	b328      	cbz	r0, b580a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b57be:	78e9      	ldrb	r1, [r5, #3]
   b57c0:	b319      	cbz	r1, b580a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b57c2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b57c4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b57c6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b57c8:	b191      	cbz	r1, b57f0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b57ca:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b57ce:	4408      	add	r0, r1
   b57d0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b57d4:	fb06 1100 	mla	r1, r6, r0, r1
   b57d8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b57dc:	4281      	cmp	r1, r0
   b57de:	dd07      	ble.n	b57f0 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b57e0:	2000      	movs	r0, #0
   b57e2:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b57e4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b57e8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b57ea:	fb02 1207 	mla	r2, r2, r7, r1
   b57ee:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b57f0:	8ae2      	ldrh	r2, [r4, #22]
   b57f2:	9201      	str	r2, [sp, #4]
   b57f4:	8aa2      	ldrh	r2, [r4, #20]
   b57f6:	9200      	str	r2, [sp, #0]
   b57f8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b57fc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5800:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5804:	4620      	mov	r0, r4
   b5806:	f7ff fe17 	bl	b5438 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b580a:	7929      	ldrb	r1, [r5, #4]
   b580c:	7e22      	ldrb	r2, [r4, #24]
   b580e:	8a23      	ldrh	r3, [r4, #16]
   b5810:	fb01 3302 	mla	r3, r1, r2, r3
   b5814:	e7b8      	b.n	b5788 <_ZN12Adafruit_GFX5writeEh+0x74>

000b5816 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5816:	2901      	cmp	r1, #1
   b5818:	bf38      	it	cc
   b581a:	2101      	movcc	r1, #1
   b581c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b581e:	7641      	strb	r1, [r0, #25]
}
   b5820:	4770      	bx	lr

000b5822 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
        if(!gfxFont) { // And no current font struct?
   b5822:	6a03      	ldr	r3, [r0, #32]
    if(f) {            // Font struct pointer passed in?
   b5824:	b129      	cbz	r1, b5832 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x10>
        if(!gfxFont) { // And no current font struct?
   b5826:	b913      	cbnz	r3, b582e <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
            cursor_y += 6;
   b5828:	8a43      	ldrh	r3, [r0, #18]
   b582a:	3306      	adds	r3, #6
        cursor_y -= 6;
   b582c:	8243      	strh	r3, [r0, #18]
    gfxFont = (GFXfont *)f;
   b582e:	6201      	str	r1, [r0, #32]
}
   b5830:	4770      	bx	lr
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
   b5832:	2b00      	cmp	r3, #0
   b5834:	d0fb      	beq.n	b582e <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
        cursor_y -= 6;
   b5836:	8a43      	ldrh	r3, [r0, #18]
   b5838:	3b06      	subs	r3, #6
   b583a:	e7f7      	b.n	b582c <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xa>

000b583c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
   b583c:	2100      	movs	r1, #0
   b583e:	b280      	uxth	r0, r0
   b5840:	f001 bd99 	b.w	b7376 <digitalWrite>

000b5844 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
   b5844:	2101      	movs	r1, #1
   b5846:	b280      	uxth	r0, r0
   b5848:	f001 bd95 	b.w	b7376 <digitalWrite>

000b584c <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
   b584c:	2100      	movs	r1, #0
   b584e:	b280      	uxth	r0, r0
   b5850:	f001 bd91 	b.w	b7376 <digitalWrite>

000b5854 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
   b5854:	2101      	movs	r1, #1
   b5856:	b280      	uxth	r0, r0
   b5858:	f001 bd8d 	b.w	b7376 <digitalWrite>

000b585c <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
   b585c:	2100      	movs	r1, #0
   b585e:	b280      	uxth	r0, r0
   b5860:	f001 bd89 	b.w	b7376 <digitalWrite>

000b5864 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
   b5864:	2101      	movs	r1, #1
   b5866:	b280      	uxth	r0, r0
   b5868:	f001 bd85 	b.w	b7376 <digitalWrite>

000b586c <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
   b586c:	b538      	push	{r3, r4, r5, lr}
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
   b586e:	b212      	sxth	r2, r2
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
   b5870:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
   b5872:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
   b5874:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
   b5876:	f7ff fdc9 	bl	b540c <_ZN12Adafruit_GFXC1Ess>
   b587a:	4b0c      	ldr	r3, [pc, #48]	; (b58ac <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
   b587c:	6023      	str	r3, [r4, #0]
   b587e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   b5882:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   b5886:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b588a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
   b588e:	2200      	movs	r2, #0
   b5890:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   b5894:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
   b5898:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   b589c:	6422      	str	r2, [r4, #64]	; 0x40
   b589e:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
   b58a2:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
   b58a4:	6265      	str	r5, [r4, #36]	; 0x24
}
   b58a6:	4620      	mov	r0, r4
   b58a8:	bd38      	pop	{r3, r4, r5, pc}
   b58aa:	bf00      	nop
   b58ac:	000b8bc8 	.word	0x000b8bc8

000b58b0 <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
   b58b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b58b4:	f8df 8058 	ldr.w	r8, [pc, #88]	; b5910 <_ZN15Adafruit_SPITFTC1Ettaaa+0x60>
   b58b8:	4604      	mov	r4, r0
   b58ba:	f898 0000 	ldrb.w	r0, [r8]
   b58be:	f3bf 8f5b 	dmb	ish
   b58c2:	460d      	mov	r5, r1
   b58c4:	f010 0101 	ands.w	r1, r0, #1
   b58c8:	b086      	sub	sp, #24
   b58ca:	4616      	mov	r6, r2
   b58cc:	461f      	mov	r7, r3
   b58ce:	d10b      	bne.n	b58e8 <_ZN15Adafruit_SPITFTC1Ettaaa+0x38>
   b58d0:	4640      	mov	r0, r8
   b58d2:	9105      	str	r1, [sp, #20]
   b58d4:	f7ff f8aa 	bl	b4a2c <__cxa_guard_acquire>
   b58d8:	9905      	ldr	r1, [sp, #20]
   b58da:	b128      	cbz	r0, b58e8 <_ZN15Adafruit_SPITFTC1Ettaaa+0x38>
   b58dc:	480b      	ldr	r0, [pc, #44]	; (b590c <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>)
   b58de:	f001 fa83 	bl	b6de8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b58e2:	4640      	mov	r0, r8
   b58e4:	f7ff f8a7 	bl	b4a36 <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
   b58e8:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
   b58ec:	9302      	str	r3, [sp, #8]
   b58ee:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   b58f2:	4632      	mov	r2, r6
   b58f4:	e9cd 7300 	strd	r7, r3, [sp]
   b58f8:	4629      	mov	r1, r5
   b58fa:	4b04      	ldr	r3, [pc, #16]	; (b590c <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>)
   b58fc:	4620      	mov	r0, r4
   b58fe:	f7ff ffb5 	bl	b586c <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
   b5902:	4620      	mov	r0, r4
   b5904:	b006      	add	sp, #24
   b5906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b590a:	bf00      	nop
   b590c:	2003e6bc 	.word	0x2003e6bc
   b5910:	2003e6b8 	.word	0x2003e6b8

000b5914 <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
   b5914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
   b5916:	4f49      	ldr	r7, [pc, #292]	; (b5a3c <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
   b5918:	4604      	mov	r4, r0
    if(_cs >= 0) {
   b591a:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
   b591e:	2900      	cmp	r1, #0
   b5920:	bf18      	it	ne
   b5922:	460f      	movne	r7, r1
    if(_cs >= 0) {
   b5924:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
   b5926:	4616      	mov	r6, r2
    if(_cs >= 0) {
   b5928:	db09      	blt.n	b593e <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
   b592a:	2101      	movs	r1, #1
   b592c:	b280      	uxth	r0, r0
   b592e:	f001 fd11 	bl	b7354 <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
   b5932:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
   b5936:	2101      	movs	r1, #1
   b5938:	b280      	uxth	r0, r0
   b593a:	f001 fd1c 	bl	b7376 <digitalWrite>
    pinMode(_dc, OUTPUT);
   b593e:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
   b5942:	2101      	movs	r1, #1
   b5944:	b280      	uxth	r0, r0
   b5946:	f001 fd05 	bl	b7354 <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
   b594a:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
   b594e:	2101      	movs	r1, #1
   b5950:	b280      	uxth	r0, r0
   b5952:	f001 fd10 	bl	b7376 <digitalWrite>
    if(connection == TFT_HARD_SPI) {
   b5956:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
   b595a:	bb85      	cbnz	r5, b59be <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
    SPI_CLK_SYSTEM = 0,         // represents the system clock speed
    SPI_CLK_ARDUINO = 16*MHZ,
};

namespace particle {
class SPISettings : public Printable {
   b595c:	2301      	movs	r3, #1
            hwspi._spi->begin();
   b595e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5960:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
   b5964:	6327      	str	r7, [r4, #48]	; 0x30
   b5966:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
   b596a:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
   b596e:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
   b5970:	f001 fa44 	bl	b6dfc <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
   b5974:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b5978:	2800      	cmp	r0, #0
   b597a:	db5e      	blt.n	b5a3a <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
   b597c:	2101      	movs	r1, #1
   b597e:	b280      	uxth	r0, r0
   b5980:	f001 fce8 	bl	b7354 <pinMode>
        digitalWrite(_rst, HIGH);
   b5984:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b5988:	2101      	movs	r1, #1
   b598a:	b280      	uxth	r0, r0
   b598c:	f001 fcf3 	bl	b7376 <digitalWrite>
        delay(100);
   b5990:	2064      	movs	r0, #100	; 0x64
   b5992:	f000 fedb 	bl	b674c <delay>
        digitalWrite(_rst, LOW);
   b5996:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b599a:	2100      	movs	r1, #0
   b599c:	b280      	uxth	r0, r0
   b599e:	f001 fcea 	bl	b7376 <digitalWrite>
        delay(100);
   b59a2:	2064      	movs	r0, #100	; 0x64
   b59a4:	f000 fed2 	bl	b674c <delay>
        digitalWrite(_rst, HIGH);
   b59a8:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
   b59ac:	2101      	movs	r1, #1
   b59ae:	b280      	uxth	r0, r0
   b59b0:	f001 fce1 	bl	b7376 <digitalWrite>
}
   b59b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
   b59b8:	20c8      	movs	r0, #200	; 0xc8
   b59ba:	f000 bec7 	b.w	b674c <delay>
    } else if(connection == TFT_SOFT_SPI) {
   b59be:	2d01      	cmp	r5, #1
   b59c0:	d120      	bne.n	b5a04 <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
   b59c2:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b59c6:	4629      	mov	r1, r5
   b59c8:	b280      	uxth	r0, r0
   b59ca:	f001 fcc3 	bl	b7354 <pinMode>
        digitalWrite(swspi._mosi, LOW);
   b59ce:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b59d2:	2100      	movs	r1, #0
   b59d4:	b280      	uxth	r0, r0
   b59d6:	f001 fcce 	bl	b7376 <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
   b59da:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b59de:	4629      	mov	r1, r5
   b59e0:	b280      	uxth	r0, r0
   b59e2:	f001 fcb7 	bl	b7354 <pinMode>
        digitalWrite(swspi._sck, LOW);
   b59e6:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b59ea:	2100      	movs	r1, #0
   b59ec:	b280      	uxth	r0, r0
   b59ee:	f001 fcc2 	bl	b7376 <digitalWrite>
        if(swspi._miso >= 0) {
   b59f2:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b59f6:	2800      	cmp	r0, #0
   b59f8:	dbbc      	blt.n	b5974 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
   b59fa:	2100      	movs	r1, #0
   b59fc:	b280      	uxth	r0, r0
   b59fe:	f001 fca9 	bl	b7354 <pinMode>
   b5a02:	e7b7      	b.n	b5974 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
   b5a04:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b5a08:	2101      	movs	r1, #1
   b5a0a:	b280      	uxth	r0, r0
   b5a0c:	f001 fca2 	bl	b7354 <pinMode>
        digitalWrite(tft8._wr, HIGH);
   b5a10:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b5a14:	2101      	movs	r1, #1
   b5a16:	b280      	uxth	r0, r0
   b5a18:	f001 fcad 	bl	b7376 <digitalWrite>
        if(tft8._rd >= 0) {
   b5a1c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5a20:	2800      	cmp	r0, #0
   b5a22:	dba7      	blt.n	b5974 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
   b5a24:	2101      	movs	r1, #1
   b5a26:	b280      	uxth	r0, r0
   b5a28:	f001 fc94 	bl	b7354 <pinMode>
            digitalWrite(tft8._rd, HIGH);
   b5a2c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5a30:	2101      	movs	r1, #1
   b5a32:	b280      	uxth	r0, r0
   b5a34:	f001 fc9f 	bl	b7376 <digitalWrite>
   b5a38:	e79c      	b.n	b5974 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
   b5a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5a3c:	00f42400 	.word	0x00f42400

000b5a40 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
   b5a40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   b5a44:	b923      	cbnz	r3, b5a50 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
   b5a46:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5a4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5a4c:	f001 ba04 	b.w	b6e58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
   b5a50:	4770      	bx	lr

000b5a52 <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
   b5a52:	b510      	push	{r4, lr}
   b5a54:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
   b5a56:	f7ff fff3 	bl	b5a40 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
   b5a5a:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
   b5a5e:	2800      	cmp	r0, #0
   b5a60:	db05      	blt.n	b5a6e <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
   b5a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
   b5a66:	2100      	movs	r1, #0
   b5a68:	b280      	uxth	r0, r0
   b5a6a:	f001 bc84 	b.w	b7376 <digitalWrite>
   b5a6e:	bd10      	pop	{r4, pc}

000b5a70 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
   b5a70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   b5a74:	b913      	cbnz	r3, b5a7c <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
   b5a76:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5a78:	f001 b9d4 	b.w	b6e24 <_ZN8SPIClass14endTransactionEv>
}
   b5a7c:	4770      	bx	lr

000b5a7e <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
   b5a7e:	b510      	push	{r4, lr}
   b5a80:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
   b5a82:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
   b5a86:	2800      	cmp	r0, #0
   b5a88:	db03      	blt.n	b5a92 <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
   b5a8a:	2101      	movs	r1, #1
   b5a8c:	b280      	uxth	r0, r0
   b5a8e:	f001 fc72 	bl	b7376 <digitalWrite>
    SPI_END_TRANSACTION();
   b5a92:	4620      	mov	r0, r4
   b5a94:	f7ff ffec 	bl	b5a70 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
   b5a98:	bd10      	pop	{r4, pc}

000b5a9a <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
   b5a9a:	b510      	push	{r4, lr}
   b5a9c:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
   b5a9e:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
   b5aa2:	2100      	movs	r1, #0
   b5aa4:	b280      	uxth	r0, r0
   b5aa6:	f001 fc66 	bl	b7376 <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
   b5aaa:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b5aae:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
   b5ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
   b5ab4:	b280      	uxth	r0, r0
   b5ab6:	f001 bc5e 	b.w	b7376 <digitalWrite>

000b5aba <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
   b5aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5abe:	4605      	mov	r5, r0
   b5ac0:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
   b5ac2:	4614      	mov	r4, r2
   b5ac4:	b17a      	cbz	r2, b5ae6 <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
   b5ac6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
   b5aca:	ea4f 2811 	mov.w	r8, r1, lsr #8
   b5ace:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
   b5ad0:	b95b      	cbnz	r3, b5aea <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
   b5ad2:	4641      	mov	r1, r8
   b5ad4:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b5ad6:	f001 fa2d 	bl	b6f34 <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
   b5ada:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b5adc:	4639      	mov	r1, r7
   b5ade:	f001 fa29 	bl	b6f34 <_ZN8SPIClass8transferEh>
        while(len--) {
   b5ae2:	3c01      	subs	r4, #1
   b5ae4:	d1f5      	bne.n	b5ad2 <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
   b5ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
   b5aea:	2b01      	cmp	r3, #1
   b5aec:	d11e      	bne.n	b5b2c <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b5aee:	46b0      	mov	r8, r6
   b5af0:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
   b5af2:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   b5af6:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
   b5afa:	d014      	beq.n	b5b26 <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
   b5afc:	f7ff feaa 	bl	b5854 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
   b5b00:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b5b04:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
   b5b06:	f7ff fe9d 	bl	b5844 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
   b5b0a:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
   b5b0e:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b5b12:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
   b5b14:	f7ff fe92 	bl	b583c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
   b5b18:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
   b5b1c:	2f00      	cmp	r7, #0
   b5b1e:	d1e8      	bne.n	b5af2 <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
   b5b20:	3c01      	subs	r4, #1
   b5b22:	d1e4      	bne.n	b5aee <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
   b5b24:	e7df      	b.n	b5ae6 <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
   b5b26:	f7ff fe91 	bl	b584c <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b5b2a:	e7e9      	b.n	b5b00 <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
   b5b2c:	45b8      	cmp	r8, r7
   b5b2e:	d0da      	beq.n	b5ae6 <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
   b5b30:	4628      	mov	r0, r5
   b5b32:	f7ff ffb2 	bl	b5a9a <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
   b5b36:	3c01      	subs	r4, #1
   b5b38:	d1fa      	bne.n	b5b30 <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
   b5b3a:	e7d4      	b.n	b5ae6 <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

000b5b3c <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
   b5b3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b40:	461d      	mov	r5, r3
    setAddrWindow(x, y, w, h);
   b5b42:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   b5b46:	9300      	str	r3, [sp, #0]
   b5b48:	6803      	ldr	r3, [r0, #0]
  int16_t w, int16_t h, uint16_t color) {
   b5b4a:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
   b5b4e:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
  int16_t w, int16_t h, uint16_t color) {
   b5b52:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
   b5b56:	b2ab      	uxth	r3, r5
   b5b58:	b292      	uxth	r2, r2
   b5b5a:	b289      	uxth	r1, r1
  int16_t w, int16_t h, uint16_t color) {
   b5b5c:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
   b5b5e:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
   b5b60:	fb05 f207 	mul.w	r2, r5, r7
   b5b64:	4631      	mov	r1, r6
   b5b66:	4620      	mov	r0, r4
}
   b5b68:	b002      	add	sp, #8
   b5b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
   b5b6e:	f7ff bfa4 	b.w	b5aba <_ZN15Adafruit_SPITFT10writeColorEtm>

000b5b72 <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
   b5b72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b76:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
   b5b7a:	2b00      	cmp	r3, #0
   b5b7c:	d046      	beq.n	b5c0c <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
   b5b7e:	2c00      	cmp	r4, #0
   b5b80:	d044      	beq.n	b5c0c <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
   b5b82:	2b00      	cmp	r3, #0
   b5b84:	da05      	bge.n	b5b92 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
   b5b86:	3101      	adds	r1, #1
   b5b88:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
   b5b8c:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
   b5b8e:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
   b5b90:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
   b5b92:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
   b5b96:	428e      	cmp	r6, r1
   b5b98:	dd38      	ble.n	b5c0c <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
   b5b9a:	2c00      	cmp	r4, #0
   b5b9c:	da05      	bge.n	b5baa <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
   b5b9e:	3201      	adds	r2, #1
   b5ba0:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
   b5ba4:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
   b5ba6:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
   b5ba8:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
   b5baa:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
   b5bae:	4295      	cmp	r5, r2
   b5bb0:	dd2c      	ble.n	b5c0c <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
   b5bb2:	eb01 0803 	add.w	r8, r1, r3
   b5bb6:	fa1f f888 	uxth.w	r8, r8
   b5bba:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
   b5bbe:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
   b5bc2:	f1bc 0f00 	cmp.w	ip, #0
   b5bc6:	db21      	blt.n	b5c0c <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
   b5bc8:	eb02 0e04 	add.w	lr, r2, r4
   b5bcc:	fa1f fe8e 	uxth.w	lr, lr
   b5bd0:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
   b5bd4:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
   b5bd6:	2f00      	cmp	r7, #0
   b5bd8:	db18      	blt.n	b5c0c <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b5bda:	2900      	cmp	r1, #0
   b5bdc:	bfbc      	itt	lt
   b5bde:	fa0f f388 	sxthlt.w	r3, r8
   b5be2:	2100      	movlt	r1, #0
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b5be4:	2a00      	cmp	r2, #0
   b5be6:	bfbc      	itt	lt
   b5be8:	fa0f f48e 	sxthlt.w	r4, lr
   b5bec:	2200      	movlt	r2, #0
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5bee:	4566      	cmp	r6, ip
   b5bf0:	bfdc      	itt	le
   b5bf2:	1a73      	suble	r3, r6, r1
   b5bf4:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5bf6:	42bd      	cmp	r5, r7
   b5bf8:	bfd8      	it	le
   b5bfa:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
   b5bfc:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5c00:	bfd8      	it	le
   b5c02:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
   b5c04:	e9cd 4500 	strd	r4, r5, [sp]
   b5c08:	f7ff ff98 	bl	b5b3c <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
   b5c0c:	b002      	add	sp, #8
   b5c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5c12 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
   b5c12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5c16:	4680      	mov	r8, r0
   b5c18:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5c1c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   b5c20:	460c      	mov	r4, r1
   b5c22:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
   b5c24:	461e      	mov	r6, r3
   b5c26:	2b00      	cmp	r3, #0
   b5c28:	d052      	beq.n	b5cd0 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
   b5c2a:	2f00      	cmp	r7, #0
   b5c2c:	d050      	beq.n	b5cd0 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
   b5c2e:	2b00      	cmp	r3, #0
   b5c30:	da05      	bge.n	b5c3e <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
   b5c32:	3401      	adds	r4, #1
   b5c34:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
   b5c38:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
   b5c3a:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
   b5c3c:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
   b5c3e:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
   b5c42:	42a3      	cmp	r3, r4
   b5c44:	dd44      	ble.n	b5cd0 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
   b5c46:	2f00      	cmp	r7, #0
   b5c48:	da05      	bge.n	b5c56 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
   b5c4a:	3501      	adds	r5, #1
   b5c4c:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
   b5c50:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
   b5c52:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
   b5c54:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
   b5c56:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
   b5c5a:	42aa      	cmp	r2, r5
   b5c5c:	dd38      	ble.n	b5cd0 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
   b5c5e:	eb04 0e06 	add.w	lr, r4, r6
   b5c62:	fa1f fe8e 	uxth.w	lr, lr
   b5c66:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
   b5c6a:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
   b5c6c:	2800      	cmp	r0, #0
   b5c6e:	db2f      	blt.n	b5cd0 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
   b5c70:	eb05 0c07 	add.w	ip, r5, r7
   b5c74:	fa1f fc8c 	uxth.w	ip, ip
   b5c78:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   b5c7c:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
   b5c7e:	2900      	cmp	r1, #0
   b5c80:	db26      	blt.n	b5cd0 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b5c82:	2c00      	cmp	r4, #0
   b5c84:	bfbc      	itt	lt
   b5c86:	fa0f f68e 	sxthlt.w	r6, lr
   b5c8a:	2400      	movlt	r4, #0
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b5c8c:	2d00      	cmp	r5, #0
   b5c8e:	bfbc      	itt	lt
   b5c90:	fa0f f78c 	sxthlt.w	r7, ip
   b5c94:	2500      	movlt	r5, #0
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5c96:	4283      	cmp	r3, r0
   b5c98:	bfdc      	itt	le
   b5c9a:	1b1b      	suble	r3, r3, r4
   b5c9c:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5c9e:	428a      	cmp	r2, r1
                        startWrite();
   b5ca0:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5ca4:	bfdc      	itt	le
   b5ca6:	1b52      	suble	r2, r2, r5
   b5ca8:	b217      	sxthle	r7, r2
                        startWrite();
   b5caa:	4640      	mov	r0, r8
   b5cac:	695b      	ldr	r3, [r3, #20]
   b5cae:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
   b5cb0:	4633      	mov	r3, r6
   b5cb2:	4640      	mov	r0, r8
   b5cb4:	e9cd 7900 	strd	r7, r9, [sp]
   b5cb8:	462a      	mov	r2, r5
   b5cba:	4621      	mov	r1, r4
   b5cbc:	f7ff ff3e 	bl	b5b3c <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
   b5cc0:	f8d8 3000 	ldr.w	r3, [r8]
   b5cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cc6:	4640      	mov	r0, r8
}
   b5cc8:	b003      	add	sp, #12
   b5cca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
   b5cce:	4718      	bx	r3
}
   b5cd0:	b003      	add	sp, #12
   b5cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5cd6 <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
   b5cd6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b5cda:	1e17      	subs	r7, r2, #0
  uint16_t color) {
   b5cdc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   b5ce0:	4606      	mov	r6, r0
   b5ce2:	460c      	mov	r4, r1
   b5ce4:	461d      	mov	r5, r3
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b5ce6:	db33      	blt.n	b5d50 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
   b5ce8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5cec:	42bb      	cmp	r3, r7
   b5cee:	dd2f      	ble.n	b5d50 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
   b5cf0:	2d00      	cmp	r5, #0
   b5cf2:	d02d      	beq.n	b5d50 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
   b5cf4:	da05      	bge.n	b5d02 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
   b5cf6:	3401      	adds	r4, #1
   b5cf8:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
   b5cfc:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
   b5cfe:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
   b5d00:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
   b5d02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   b5d06:	42a3      	cmp	r3, r4
   b5d08:	dd22      	ble.n	b5d50 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
   b5d0a:	1961      	adds	r1, r4, r5
   b5d0c:	b289      	uxth	r1, r1
   b5d0e:	1e4a      	subs	r2, r1, #1
   b5d10:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
   b5d12:	2a00      	cmp	r2, #0
   b5d14:	db1c      	blt.n	b5d50 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b5d16:	2c00      	cmp	r4, #0
   b5d18:	bfbc      	itt	lt
   b5d1a:	b20d      	sxthlt	r5, r1
   b5d1c:	2400      	movlt	r4, #0
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5d1e:	4293      	cmp	r3, r2
   b5d20:	bfdc      	itt	le
   b5d22:	1b1b      	suble	r3, r3, r4
   b5d24:	b21d      	sxthle	r5, r3
                startWrite();
   b5d26:	6833      	ldr	r3, [r6, #0]
   b5d28:	4630      	mov	r0, r6
   b5d2a:	695b      	ldr	r3, [r3, #20]
   b5d2c:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
   b5d2e:	2301      	movs	r3, #1
   b5d30:	9300      	str	r3, [sp, #0]
   b5d32:	4630      	mov	r0, r6
   b5d34:	462b      	mov	r3, r5
   b5d36:	f8cd 8004 	str.w	r8, [sp, #4]
   b5d3a:	463a      	mov	r2, r7
   b5d3c:	4621      	mov	r1, r4
   b5d3e:	f7ff fefd 	bl	b5b3c <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
   b5d42:	6833      	ldr	r3, [r6, #0]
   b5d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d46:	4630      	mov	r0, r6
}
   b5d48:	b002      	add	sp, #8
   b5d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
   b5d4e:	4718      	bx	r3
}
   b5d50:	b002      	add	sp, #8
   b5d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5d56 <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
   b5d56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
   b5d5a:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
   b5d5c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   b5d60:	4606      	mov	r6, r0
   b5d62:	4614      	mov	r4, r2
   b5d64:	461d      	mov	r5, r3
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
   b5d66:	db31      	blt.n	b5dcc <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
   b5d68:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5d6c:	42bb      	cmp	r3, r7
   b5d6e:	dd2d      	ble.n	b5dcc <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
   b5d70:	2d00      	cmp	r5, #0
   b5d72:	d02b      	beq.n	b5dcc <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
   b5d74:	da05      	bge.n	b5d82 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
   b5d76:	3401      	adds	r4, #1
   b5d78:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
   b5d7c:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
   b5d7e:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
   b5d80:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
   b5d82:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
   b5d86:	42a3      	cmp	r3, r4
   b5d88:	dd20      	ble.n	b5dcc <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
   b5d8a:	1961      	adds	r1, r4, r5
   b5d8c:	b289      	uxth	r1, r1
   b5d8e:	1e4a      	subs	r2, r1, #1
   b5d90:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
   b5d92:	2a00      	cmp	r2, #0
   b5d94:	db1a      	blt.n	b5dcc <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b5d96:	2c00      	cmp	r4, #0
   b5d98:	bfbc      	itt	lt
   b5d9a:	b20d      	sxthlt	r5, r1
   b5d9c:	2400      	movlt	r4, #0
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5d9e:	4293      	cmp	r3, r2
   b5da0:	bfdc      	itt	le
   b5da2:	1b1b      	suble	r3, r3, r4
   b5da4:	b21d      	sxthle	r5, r3
                startWrite();
   b5da6:	6833      	ldr	r3, [r6, #0]
   b5da8:	4630      	mov	r0, r6
   b5daa:	695b      	ldr	r3, [r3, #20]
   b5dac:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
   b5dae:	4630      	mov	r0, r6
   b5db0:	e9cd 5800 	strd	r5, r8, [sp]
   b5db4:	2301      	movs	r3, #1
   b5db6:	4622      	mov	r2, r4
   b5db8:	4639      	mov	r1, r7
   b5dba:	f7ff febf 	bl	b5b3c <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
   b5dbe:	6833      	ldr	r3, [r6, #0]
   b5dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5dc2:	4630      	mov	r0, r6
}
   b5dc4:	b002      	add	sp, #8
   b5dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
   b5dca:	4718      	bx	r3
}
   b5dcc:	b002      	add	sp, #8
   b5dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5dd2 <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b5dd2:	2a00      	cmp	r2, #0
  uint16_t color) {
   b5dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
   b5dd6:	db27      	blt.n	b5e28 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
   b5dd8:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5ddc:	4294      	cmp	r4, r2
   b5dde:	dd23      	ble.n	b5e28 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
   b5de0:	2b00      	cmp	r3, #0
   b5de2:	d021      	beq.n	b5e28 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
        if(w < 0) {                      // If negative width...
   b5de4:	da05      	bge.n	b5df2 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
   b5de6:	3101      	adds	r1, #1
   b5de8:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
   b5dec:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
   b5dee:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
   b5df0:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
   b5df2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5df6:	428c      	cmp	r4, r1
   b5df8:	dd16      	ble.n	b5e28 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
            int16_t x2 = x + w - 1;
   b5dfa:	18ce      	adds	r6, r1, r3
   b5dfc:	b2b6      	uxth	r6, r6
   b5dfe:	1e75      	subs	r5, r6, #1
   b5e00:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
   b5e02:	2d00      	cmp	r5, #0
   b5e04:	db10      	blt.n	b5e28 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
   b5e06:	2900      	cmp	r1, #0
   b5e08:	bfbc      	itt	lt
   b5e0a:	b233      	sxthlt	r3, r6
   b5e0c:	2100      	movlt	r1, #0
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5e0e:	42ac      	cmp	r4, r5
   b5e10:	bfd8      	it	le
   b5e12:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
   b5e14:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   b5e18:	9401      	str	r4, [sp, #4]
   b5e1a:	f04f 0401 	mov.w	r4, #1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
   b5e1e:	bfd8      	it	le
   b5e20:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
   b5e22:	9400      	str	r4, [sp, #0]
   b5e24:	f7ff fe8a 	bl	b5b3c <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
   b5e28:	b002      	add	sp, #8
   b5e2a:	bd70      	pop	{r4, r5, r6, pc}

000b5e2c <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
   b5e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
   b5e2e:	2900      	cmp	r1, #0
   b5e30:	db26      	blt.n	b5e80 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
   b5e32:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5e36:	428c      	cmp	r4, r1
   b5e38:	dd22      	ble.n	b5e80 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
   b5e3a:	2b00      	cmp	r3, #0
   b5e3c:	d020      	beq.n	b5e80 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
   b5e3e:	da05      	bge.n	b5e4c <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
   b5e40:	3201      	adds	r2, #1
   b5e42:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
   b5e46:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
   b5e48:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
   b5e4a:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
   b5e4c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5e50:	4294      	cmp	r4, r2
   b5e52:	dd15      	ble.n	b5e80 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
   b5e54:	18d6      	adds	r6, r2, r3
   b5e56:	b2b6      	uxth	r6, r6
   b5e58:	1e75      	subs	r5, r6, #1
   b5e5a:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
   b5e5c:	2d00      	cmp	r5, #0
   b5e5e:	db0f      	blt.n	b5e80 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
   b5e60:	2a00      	cmp	r2, #0
   b5e62:	bfbc      	itt	lt
   b5e64:	b233      	sxthlt	r3, r6
   b5e66:	2200      	movlt	r2, #0
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5e68:	42ac      	cmp	r4, r5
   b5e6a:	bfd8      	it	le
   b5e6c:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
   b5e6e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
   b5e72:	bfd8      	it	le
   b5e74:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
   b5e76:	e9cd 3400 	strd	r3, r4, [sp]
   b5e7a:	2301      	movs	r3, #1
   b5e7c:	f7ff fe5e 	bl	b5b3c <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
   b5e80:	b002      	add	sp, #8
   b5e82:	bd70      	pop	{r4, r5, r6, pc}

000b5e84 <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
   b5e84:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
   b5e86:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
   b5e8a:	4604      	mov	r4, r0
   b5e8c:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
   b5e8e:	b923      	cbnz	r3, b5e9a <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
   b5e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
   b5e94:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5e96:	f001 b84d 	b.w	b6f34 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
   b5e9a:	2b01      	cmp	r3, #1
   b5e9c:	d118      	bne.n	b5ed0 <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
   b5e9e:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
   b5ea0:	062b      	lsls	r3, r5, #24
   b5ea2:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b5ea6:	d510      	bpl.n	b5eca <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
   b5ea8:	f7ff fcd4 	bl	b5854 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
   b5eac:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5eb0:	f7ff fcc8 	bl	b5844 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
   b5eb4:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
   b5eb6:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5eba:	f7ff fcbf 	bl	b583c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
   b5ebe:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
   b5ec0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
   b5ec4:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
   b5ec6:	d1eb      	bne.n	b5ea0 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
   b5ec8:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
   b5eca:	f7ff fcbf 	bl	b584c <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b5ece:	e7ed      	b.n	b5eac <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
   b5ed0:	f7ff fde3 	bl	b5a9a <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
   b5ed4:	e7f8      	b.n	b5ec8 <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

000b5ed6 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
   b5ed6:	b513      	push	{r0, r1, r4, lr}
   b5ed8:	4604      	mov	r4, r0
    SPI_DC_LOW();
   b5eda:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
   b5ede:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
   b5ee0:	f7ff fcbc 	bl	b585c <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
   b5ee4:	4620      	mov	r0, r4
   b5ee6:	9901      	ldr	r1, [sp, #4]
   b5ee8:	f7ff ffcc 	bl	b5e84 <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
   b5eec:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
   b5ef0:	b002      	add	sp, #8
   b5ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
   b5ef6:	f7ff bcb5 	b.w	b5864 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

000b5efa <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
   b5efa:	b570      	push	{r4, r5, r6, lr}
    startWrite();
   b5efc:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
   b5efe:	460d      	mov	r5, r1
    startWrite();
   b5f00:	695b      	ldr	r3, [r3, #20]
void Adafruit_SPITFT::invertDisplay(bool i) {
   b5f02:	4604      	mov	r4, r0
    startWrite();
   b5f04:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
   b5f06:	b155      	cbz	r5, b5f1e <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
   b5f08:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   b5f0c:	4620      	mov	r0, r4
   b5f0e:	f7ff ffe2 	bl	b5ed6 <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
   b5f12:	6823      	ldr	r3, [r4, #0]
   b5f14:	4620      	mov	r0, r4
   b5f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b5f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
   b5f1c:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
   b5f1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   b5f22:	e7f3      	b.n	b5f0c <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

000b5f24 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
   b5f24:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
   b5f26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
   b5f2a:	4605      	mov	r5, r0
   b5f2c:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
   b5f2e:	b94b      	cbnz	r3, b5f44 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
   b5f30:	0a09      	lsrs	r1, r1, #8
   b5f32:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5f34:	f000 fffe 	bl	b6f34 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
   b5f38:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b5f3a:	b2e1      	uxtb	r1, r4
}
   b5f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
   b5f40:	f000 bff8 	b.w	b6f34 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
   b5f44:	2b01      	cmp	r3, #1
   b5f46:	d118      	bne.n	b5f7a <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
   b5f48:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
   b5f4a:	0423      	lsls	r3, r4, #16
   b5f4c:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
   b5f50:	d510      	bpl.n	b5f74 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
   b5f52:	f7ff fc7f 	bl	b5854 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
   b5f56:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
   b5f5a:	f7ff fc73 	bl	b5844 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
   b5f5e:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
   b5f60:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
   b5f64:	f7ff fc6a 	bl	b583c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
   b5f68:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
   b5f6a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
   b5f6e:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
   b5f70:	d1eb      	bne.n	b5f4a <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
   b5f72:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
   b5f74:	f7ff fc6a 	bl	b584c <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b5f78:	e7ed      	b.n	b5f56 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
   b5f7a:	f7ff fd8e 	bl	b5a9a <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
   b5f7e:	e7f8      	b.n	b5f72 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

000b5f80 <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
   b5f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b5f82:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
   b5f84:	4604      	mov	r4, r0
   b5f86:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b5f88:	db17      	blt.n	b5fba <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
   b5f8a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5f8e:	428b      	cmp	r3, r1
   b5f90:	dd13      	ble.n	b5fba <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
   b5f92:	2a00      	cmp	r2, #0
   b5f94:	db11      	blt.n	b5fba <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
   b5f96:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5f9a:	4293      	cmp	r3, r2
   b5f9c:	dd0d      	ble.n	b5fba <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
   b5f9e:	6805      	ldr	r5, [r0, #0]
   b5fa0:	2301      	movs	r3, #1
   b5fa2:	9300      	str	r3, [sp, #0]
   b5fa4:	6d6f      	ldr	r7, [r5, #84]	; 0x54
   b5fa6:	b292      	uxth	r2, r2
   b5fa8:	b289      	uxth	r1, r1
   b5faa:	47b8      	blx	r7
        SPI_WRITE16(color);
   b5fac:	4631      	mov	r1, r6
   b5fae:	4620      	mov	r0, r4
}
   b5fb0:	b003      	add	sp, #12
   b5fb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
   b5fb6:	f7ff bfb5 	b.w	b5f24 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
   b5fba:	b003      	add	sp, #12
   b5fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5fbe <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5fbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b5fc2:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5fc4:	4604      	mov	r4, r0
   b5fc6:	4616      	mov	r6, r2
   b5fc8:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
   b5fca:	db20      	blt.n	b600e <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
   b5fcc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5fd0:	42ab      	cmp	r3, r5
   b5fd2:	dd1c      	ble.n	b600e <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
   b5fd4:	2a00      	cmp	r2, #0
   b5fd6:	db1a      	blt.n	b600e <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
   b5fd8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5fdc:	4293      	cmp	r3, r2
   b5fde:	dd16      	ble.n	b600e <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
   b5fe0:	6803      	ldr	r3, [r0, #0]
   b5fe2:	695b      	ldr	r3, [r3, #20]
   b5fe4:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
   b5fe6:	6822      	ldr	r2, [r4, #0]
   b5fe8:	2301      	movs	r3, #1
   b5fea:	9300      	str	r3, [sp, #0]
   b5fec:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
   b5ff0:	b2a9      	uxth	r1, r5
   b5ff2:	b2b2      	uxth	r2, r6
   b5ff4:	4620      	mov	r0, r4
   b5ff6:	47c0      	blx	r8
        SPI_WRITE16(color);
   b5ff8:	4620      	mov	r0, r4
   b5ffa:	4639      	mov	r1, r7
   b5ffc:	f7ff ff92 	bl	b5f24 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
   b6000:	6823      	ldr	r3, [r4, #0]
   b6002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6004:	4620      	mov	r0, r4
}
   b6006:	b002      	add	sp, #8
   b6008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
   b600c:	4718      	bx	r3
}
   b600e:	b002      	add	sp, #8
   b6010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6014 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
   b6014:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
   b6016:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
   b601a:	4604      	mov	r4, r0
   b601c:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
   b601e:	b99b      	cbnz	r3, b6048 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
   b6020:	0e09      	lsrs	r1, r1, #24
   b6022:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6024:	f000 ff86 	bl	b6f34 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
   b6028:	f3c5 4107 	ubfx	r1, r5, #16, #8
   b602c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b602e:	f000 ff81 	bl	b6f34 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
   b6032:	f3c5 2107 	ubfx	r1, r5, #8, #8
   b6036:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6038:	f000 ff7c 	bl	b6f34 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
   b603c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b603e:	b2e9      	uxtb	r1, r5
}
   b6040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
   b6044:	f000 bf76 	b.w	b6f34 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
   b6048:	2b01      	cmp	r3, #1
   b604a:	d118      	bne.n	b607e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
   b604c:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
   b604e:	2d00      	cmp	r5, #0
   b6050:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b6054:	da10      	bge.n	b6078 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
   b6056:	f7ff fbfd 	bl	b5854 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
   b605a:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b605e:	f7ff fbf1 	bl	b5844 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
   b6062:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
   b6064:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b6068:	f7ff fbe8 	bl	b583c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
   b606c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
   b6070:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
   b6074:	d1eb      	bne.n	b604e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
   b6076:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
   b6078:	f7ff fbe8 	bl	b584c <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
   b607c:	e7ed      	b.n	b605a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
   b607e:	f7ff fd0c 	bl	b5a9a <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
   b6082:	e7f8      	b.n	b6076 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

000b6084 <_ZN15Adafruit_ST7789D1Ev>:
#define _ADAFRUIT_ST7789H_

#include "../lib/Adafruit_ST7735_RK/src/Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
   b6084:	4770      	bx	lr

000b6086 <_ZN15Adafruit_ST778911setRotationEh>:
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
   b6086:	f001 0103 	and.w	r1, r1, #3

  switch (rotation) {
   b608a:	2902      	cmp	r1, #2
void Adafruit_ST7789::setRotation(uint8_t m) {
   b608c:	b570      	push	{r4, r5, r6, lr}
   b608e:	4604      	mov	r4, r0
  rotation = m & 3; // can't be higher than 3
   b6090:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
   b6092:	d024      	beq.n	b60de <_ZN15Adafruit_ST778911setRotationEh+0x58>
   b6094:	2903      	cmp	r1, #3
   b6096:	d025      	beq.n	b60e4 <_ZN15Adafruit_ST778911setRotationEh+0x5e>
   b6098:	2901      	cmp	r1, #1
   b609a:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   b609e:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
   b60a2:	bf1d      	ittte	ne
   b60a4:	f8a0 3040 	strhne.w	r3, [r0, #64]	; 0x40
     _ystart = _rowstart;
   b60a8:	f8a0 2042 	strhne.w	r2, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
   b60ac:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = _rowstart;
   b60ae:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
     _ystart = _colstart;
   b60b2:	bf04      	itt	eq
   b60b4:	f8a0 3042 	strheq.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b60b8:	25a0      	moveq	r5, #160	; 0xa0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = 0;
     _ystart = 0;
     break;
  }
  startWrite();
   b60ba:	6823      	ldr	r3, [r4, #0]
   b60bc:	4620      	mov	r0, r4
   b60be:	695b      	ldr	r3, [r3, #20]
   b60c0:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
   b60c2:	4620      	mov	r0, r4
   b60c4:	2136      	movs	r1, #54	; 0x36
   b60c6:	f7ff ff06 	bl	b5ed6 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
   b60ca:	4620      	mov	r0, r4
   b60cc:	4629      	mov	r1, r5
   b60ce:	f7ff fed9 	bl	b5e84 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
   b60d2:	6823      	ldr	r3, [r4, #0]
   b60d4:	4620      	mov	r0, r4
   b60d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b60d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
   b60dc:	4718      	bx	r3
     _xstart = 0;
   b60de:	2500      	movs	r5, #0
   b60e0:	6405      	str	r5, [r0, #64]	; 0x40
     break;
   b60e2:	e7ea      	b.n	b60ba <_ZN15Adafruit_ST778911setRotationEh+0x34>
     _xstart = 0;
   b60e4:	2300      	movs	r3, #0
   b60e6:	6403      	str	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b60e8:	2560      	movs	r5, #96	; 0x60
     break;
   b60ea:	e7e6      	b.n	b60ba <_ZN15Adafruit_ST778911setRotationEh+0x34>

000b60ec <_ZN15Adafruit_ST7789D0Ev>:
   b60ec:	b510      	push	{r4, lr}
   b60ee:	2150      	movs	r1, #80	; 0x50
   b60f0:	4604      	mov	r4, r0
   b60f2:	f7fe fc8c 	bl	b4a0e <_ZdlPvj>
   b60f6:	4620      	mov	r0, r4
   b60f8:	bd10      	pop	{r4, pc}
	...

000b60fc <_ZN15Adafruit_ST7789C1Eaaa>:
Adafruit_ST7789::Adafruit_ST7789(int8_t cs, int8_t dc, int8_t rst) :
   b60fc:	b510      	push	{r4, lr}
   b60fe:	4604      	mov	r4, r0
  Adafruit_ST77xx(cs, dc, rst) {
   b6100:	f000 f89a 	bl	b6238 <_ZN15Adafruit_ST77xxC1Eaaa>
   b6104:	4b01      	ldr	r3, [pc, #4]	; (b610c <_ZN15Adafruit_ST7789C1Eaaa+0x10>)
   b6106:	6023      	str	r3, [r4, #0]
}
   b6108:	4620      	mov	r0, r4
   b610a:	bd10      	pop	{r4, pc}
   b610c:	000b8c4c 	.word	0x000b8c4c

000b6110 <_ZN15Adafruit_ST77894initEtt>:
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
   b6110:	b510      	push	{r4, lr}
  commonInit(NULL);
   b6112:	2100      	movs	r1, #0
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
   b6114:	4604      	mov	r4, r0
  commonInit(NULL);
   b6116:	f000 f8e6 	bl	b62e6 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  _colstart = ST7789_240x240_XSTART;
   b611a:	2300      	movs	r3, #0
   b611c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  _width    = 320;
   b6120:	4b06      	ldr	r3, [pc, #24]	; (b613c <_ZN15Adafruit_ST77894initEtt+0x2c>)
   b6122:	60e3      	str	r3, [r4, #12]
  displayInit(cmd_240x240);
   b6124:	4620      	mov	r0, r4
   b6126:	4906      	ldr	r1, [pc, #24]	; (b6140 <_ZN15Adafruit_ST77894initEtt+0x30>)
   b6128:	f000 f89a 	bl	b6260 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(1);
   b612c:	6823      	ldr	r3, [r4, #0]
   b612e:	4620      	mov	r0, r4
   b6130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   b6132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setRotation(1);
   b6136:	2101      	movs	r1, #1
   b6138:	4718      	bx	r3
   b613a:	bf00      	nop
   b613c:	00f00140 	.word	0x00f00140
   b6140:	000b8c20 	.word	0x000b8c20

000b6144 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA    0xF81F
#define ST77XX_YELLOW     0xFFE0
#define	ST77XX_ORANGE     0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
   b6144:	4770      	bx	lr

000b6146 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
   b6146:	b570      	push	{r4, r5, r6, lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
   b6148:	f001 0103 	and.w	r1, r1, #3

  switch(rotation) {
   b614c:	2902      	cmp	r1, #2
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
   b614e:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
     _ystart = _rowstart;
   b6152:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  rotation = m % 4; // can't be higher than 3
   b6156:	7681      	strb	r1, [r0, #26]
void Adafruit_ST77xx::setRotation(uint8_t m) {
   b6158:	4604      	mov	r4, r0
  switch(rotation) {
   b615a:	d020      	beq.n	b619e <_ZN15Adafruit_ST77xx11setRotationEh+0x58>
   b615c:	2903      	cmp	r1, #3
   b615e:	d024      	beq.n	b61aa <_ZN15Adafruit_ST77xx11setRotationEh+0x64>
   b6160:	2901      	cmp	r1, #1
     _xstart = _colstart;
   b6162:	bf1d      	ittte	ne
   b6164:	f8a0 2040 	strhne.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
   b6168:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
   b616c:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
   b616e:	f8a0 2042 	strheq.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
   b6172:	bf04      	itt	eq
   b6174:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b6178:	25a0      	moveq	r5, #160	; 0xa0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
     _xstart = _rowstart;
     break;
  }
  startWrite();
   b617a:	6823      	ldr	r3, [r4, #0]
   b617c:	4620      	mov	r0, r4
   b617e:	695b      	ldr	r3, [r3, #20]
   b6180:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
   b6182:	4620      	mov	r0, r4
   b6184:	2136      	movs	r1, #54	; 0x36
   b6186:	f7ff fea6 	bl	b5ed6 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
   b618a:	4620      	mov	r0, r4
   b618c:	4629      	mov	r1, r5
   b618e:	f7ff fe79 	bl	b5e84 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
   b6192:	6823      	ldr	r3, [r4, #0]
   b6194:	4620      	mov	r0, r4
   b6196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b6198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
   b619c:	4718      	bx	r3
     _xstart = _colstart;
   b619e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
   b61a2:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_RGB;
   b61a6:	2500      	movs	r5, #0
     break;
   b61a8:	e7e7      	b.n	b617a <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
     _ystart = _colstart;
   b61aa:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
   b61ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
   b61b2:	2560      	movs	r5, #96	; 0x60
     break;
   b61b4:	e7e1      	b.n	b617a <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
	...

000b61b8 <_ZN15Adafruit_ST77xx5beginEm>:
    freq = SPI_DEFAULT_FREQ;
   b61b8:	4b06      	ldr	r3, [pc, #24]	; (b61d4 <_ZN15Adafruit_ST77xx5beginEm+0x1c>)
   b61ba:	2900      	cmp	r1, #0
   b61bc:	bf18      	it	ne
   b61be:	460b      	movne	r3, r1
  invertOnCommand  = ST77XX_INVON;
   b61c0:	f242 0121 	movw	r1, #8225	; 0x2021
   b61c4:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
  _freq = freq;
   b61c8:	6483      	str	r3, [r0, #72]	; 0x48
  initSPI(freq);
   b61ca:	2200      	movs	r2, #0
   b61cc:	4619      	mov	r1, r3
   b61ce:	f7ff bba1 	b.w	b5914 <_ZN15Adafruit_SPITFT7initSPIEmh>
   b61d2:	bf00      	nop
   b61d4:	00f42400 	.word	0x00f42400

000b61d8 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  uint16_t h) {
   b61d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  x += _xstart;
   b61da:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
  y += _ystart;
   b61de:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  uint16_t h) {
   b61e2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  x += _xstart;
   b61e6:	4439      	add	r1, r7
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
   b61e8:	fa13 f781 	uxtah	r7, r3, r1
  y += _ystart;
   b61ec:	442a      	add	r2, r5
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
   b61ee:	fa16 f582 	uxtah	r5, r6, r2
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
   b61f2:	3f01      	subs	r7, #1
  uint16_t h) {
   b61f4:	4604      	mov	r4, r0
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
   b61f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
   b61fa:	3d01      	subs	r5, #1
  writeCommand(ST77XX_CASET); // Column addr set
   b61fc:	212a      	movs	r1, #42	; 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
   b61fe:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
   b6202:	f7ff fe68 	bl	b5ed6 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
   b6206:	4639      	mov	r1, r7
   b6208:	4620      	mov	r0, r4
   b620a:	f7ff ff03 	bl	b6014 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RASET); // Row addr set
   b620e:	4620      	mov	r0, r4
   b6210:	212b      	movs	r1, #43	; 0x2b
   b6212:	f7ff fe60 	bl	b5ed6 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
   b6216:	4629      	mov	r1, r5
   b6218:	4620      	mov	r0, r4
   b621a:	f7ff fefb 	bl	b6014 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RAMWR); // write to RAM
   b621e:	4620      	mov	r0, r4
   b6220:	212c      	movs	r1, #44	; 0x2c
}
   b6222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
   b6226:	f7ff be56 	b.w	b5ed6 <_ZN15Adafruit_SPITFT12writeCommandEh>

000b622a <_ZN15Adafruit_ST77xxD0Ev>:
   b622a:	b510      	push	{r4, lr}
   b622c:	2150      	movs	r1, #80	; 0x50
   b622e:	4604      	mov	r4, r0
   b6230:	f7fe fbed 	bl	b4a0e <_ZdlPvj>
   b6234:	4620      	mov	r0, r4
   b6236:	bd10      	pop	{r4, pc}

000b6238 <_ZN15Adafruit_ST77xxC1Eaaa>:
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
   b6238:	b513      	push	{r0, r1, r4, lr}
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
   b623a:	e9cd 2300 	strd	r2, r3, [sp]
   b623e:	460b      	mov	r3, r1
   b6240:	22a0      	movs	r2, #160	; 0xa0
   b6242:	2180      	movs	r1, #128	; 0x80
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
   b6244:	4604      	mov	r4, r0
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
   b6246:	f7ff fb33 	bl	b58b0 <_ZN15Adafruit_SPITFTC1Ettaaa>
   b624a:	4b04      	ldr	r3, [pc, #16]	; (b625c <_ZN15Adafruit_ST77xxC1Eaaa+0x24>)
   b624c:	6023      	str	r3, [r4, #0]
}
   b624e:	4620      	mov	r0, r4
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
   b6250:	2300      	movs	r3, #0
   b6252:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
}
   b6256:	b002      	add	sp, #8
   b6258:	bd10      	pop	{r4, pc}
   b625a:	bf00      	nop
   b625c:	000b8cac 	.word	0x000b8cac

000b6260 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
   b6260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  startWrite();
   b6264:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
   b6266:	460c      	mov	r4, r1
  startWrite();
   b6268:	695b      	ldr	r3, [r3, #20]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
   b626a:	4605      	mov	r5, r0
  startWrite();
   b626c:	4798      	blx	r3
  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
   b626e:	f814 7b01 	ldrb.w	r7, [r4], #1
  while(numCommands--) {                 // For each command...
   b6272:	b397      	cbz	r7, b62da <_ZN15Adafruit_ST77xx11displayInitEPKh+0x7a>
    writeCommand(pgm_read_byte(addr++)); // Read, issue command
   b6274:	4626      	mov	r6, r4
   b6276:	4628      	mov	r0, r5
   b6278:	f816 1b02 	ldrb.w	r1, [r6], #2
   b627c:	f7ff fe2b 	bl	b5ed6 <_ZN15Adafruit_SPITFT12writeCommandEh>
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
   b6280:	f894 9001 	ldrb.w	r9, [r4, #1]
    numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
   b6284:	f009 087f 	and.w	r8, r9, #127	; 0x7f
   b6288:	4644      	mov	r4, r8
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
   b628a:	46b2      	mov	sl, r6
    while(numArgs--) {                   // For each argument...
   b628c:	3c01      	subs	r4, #1
   b628e:	b2e4      	uxtb	r4, r4
   b6290:	2cff      	cmp	r4, #255	; 0xff
   b6292:	d005      	beq.n	b62a0 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x40>
      spiWrite(pgm_read_byte(addr++));   // Read, issue argument
   b6294:	f81a 1b01 	ldrb.w	r1, [sl], #1
   b6298:	4628      	mov	r0, r5
   b629a:	f7ff fdf3 	bl	b5e84 <_ZN15Adafruit_SPITFT8spiWriteEh>
    while(numArgs--) {                   // For each argument...
   b629e:	e7f5      	b.n	b628c <_ZN15Adafruit_ST77xx11displayInitEPKh+0x2c>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   |= csPinMaskSet;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, HIGH);
   b62a0:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
   b62a4:	2101      	movs	r1, #1
   b62a6:	b280      	uxth	r0, r0
   b62a8:	f001 f865 	bl	b7376 <digitalWrite>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   &= csPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, LOW);
   b62ac:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
   b62b0:	2100      	movs	r1, #0
   b62b2:	b280      	uxth	r0, r0
   b62b4:	f001 f85f 	bl	b7376 <digitalWrite>
    if(ms) {
   b62b8:	f019 0f80 	tst.w	r9, #128	; 0x80
   b62bc:	eb06 0408 	add.w	r4, r6, r8
   b62c0:	d008      	beq.n	b62d4 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x74>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
   b62c2:	f816 0008 	ldrb.w	r0, [r6, r8]
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
   b62c6:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
   b62c8:	bf08      	it	eq
   b62ca:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
   b62ce:	3401      	adds	r4, #1
      delay(ms);
   b62d0:	f000 fa3c 	bl	b674c <delay>
   b62d4:	3f01      	subs	r7, #1
   b62d6:	b2ff      	uxtb	r7, r7
   b62d8:	e7cb      	b.n	b6272 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x12>
  endWrite();
   b62da:	682b      	ldr	r3, [r5, #0]
   b62dc:	4628      	mov	r0, r5
   b62de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   b62e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   b62e4:	4718      	bx	r3

000b62e6 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
   b62e6:	b538      	push	{r3, r4, r5, lr}
  begin();
   b62e8:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
   b62ea:	460d      	mov	r5, r1
  begin();
   b62ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b62ee:	2100      	movs	r1, #0
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
   b62f0:	4604      	mov	r4, r0
  begin();
   b62f2:	4798      	blx	r3
  if(cmdList) {
   b62f4:	b12d      	cbz	r5, b6302 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
    displayInit(cmdList);
   b62f6:	4629      	mov	r1, r5
   b62f8:	4620      	mov	r0, r4
}
   b62fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    displayInit(cmdList);
   b62fe:	f7ff bfaf 	b.w	b6260 <_ZN15Adafruit_ST77xx11displayInitEPKh>
}
   b6302:	bd38      	pop	{r3, r4, r5, pc}

000b6304 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <os_mutex_recursive_create+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	00030248 	.word	0x00030248

000b6314 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <HAL_RNG_GetRandomNumber+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	685b      	ldr	r3, [r3, #4]
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	00030218 	.word	0x00030218

000b6324 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <HAL_Delay_Microseconds+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	68db      	ldr	r3, [r3, #12]
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	00030218 	.word	0x00030218

000b6334 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	695b      	ldr	r3, [r3, #20]
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	00030218 	.word	0x00030218

000b6344 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <hal_pin_validate_function+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	685b      	ldr	r3, [r3, #4]
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	0003022c 	.word	0x0003022c

000b6354 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6354:	b508      	push	{r3, lr}
   b6356:	4b02      	ldr	r3, [pc, #8]	; (b6360 <hal_gpio_mode+0xc>)
   b6358:	681b      	ldr	r3, [r3, #0]
   b635a:	689b      	ldr	r3, [r3, #8]
   b635c:	9301      	str	r3, [sp, #4]
   b635e:	bd08      	pop	{r3, pc}
   b6360:	0003022c 	.word	0x0003022c

000b6364 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <hal_gpio_get_mode+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	68db      	ldr	r3, [r3, #12]
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	0003022c 	.word	0x0003022c

000b6374 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <hal_gpio_write+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	691b      	ldr	r3, [r3, #16]
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	0003022c 	.word	0x0003022c

000b6384 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <hal_adc_read+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	0003022c 	.word	0x0003022c

000b6394 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <hal_i2c_begin+0xc>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	68db      	ldr	r3, [r3, #12]
   b639c:	9301      	str	r3, [sp, #4]
   b639e:	bd08      	pop	{r3, pc}
   b63a0:	00030228 	.word	0x00030228

000b63a4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <hal_i2c_begin_transmission+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	699b      	ldr	r3, [r3, #24]
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	00030228 	.word	0x00030228

000b63b4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b02      	ldr	r3, [pc, #8]	; (b63c0 <hal_i2c_end_transmission+0xc>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	69db      	ldr	r3, [r3, #28]
   b63bc:	9301      	str	r3, [sp, #4]
   b63be:	bd08      	pop	{r3, pc}
   b63c0:	00030228 	.word	0x00030228

000b63c4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <hal_i2c_write+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	6a1b      	ldr	r3, [r3, #32]
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	00030228 	.word	0x00030228

000b63d4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <hal_i2c_available+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	00030228 	.word	0x00030228

000b63e4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <hal_i2c_read+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	00030228 	.word	0x00030228

000b63f4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <hal_i2c_peek+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	00030228 	.word	0x00030228

000b6404 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b02      	ldr	r3, [pc, #8]	; (b6410 <hal_i2c_flush+0xc>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b640c:	9301      	str	r3, [sp, #4]
   b640e:	bd08      	pop	{r3, pc}
   b6410:	00030228 	.word	0x00030228

000b6414 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6414:	b508      	push	{r3, lr}
   b6416:	4b02      	ldr	r3, [pc, #8]	; (b6420 <hal_i2c_is_enabled+0xc>)
   b6418:	681b      	ldr	r3, [r3, #0]
   b641a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b641c:	9301      	str	r3, [sp, #4]
   b641e:	bd08      	pop	{r3, pc}
   b6420:	00030228 	.word	0x00030228

000b6424 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <hal_i2c_init+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	00030228 	.word	0x00030228

000b6434 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <hal_i2c_request_ex+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	00030228 	.word	0x00030228

000b6444 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <inet_inet_ntop+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	695b      	ldr	r3, [r3, #20]
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	00030264 	.word	0x00030264

000b6454 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <netdb_freeaddrinfo+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	689b      	ldr	r3, [r3, #8]
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	00030268 	.word	0x00030268

000b6464 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b02      	ldr	r3, [pc, #8]	; (b6470 <netdb_getaddrinfo+0xc>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	68db      	ldr	r3, [r3, #12]
   b646c:	9301      	str	r3, [sp, #4]
   b646e:	bd08      	pop	{r3, pc}
   b6470:	00030268 	.word	0x00030268

000b6474 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6474:	b508      	push	{r3, lr}
   b6476:	4b02      	ldr	r3, [pc, #8]	; (b6480 <hal_spi_begin+0xc>)
   b6478:	681b      	ldr	r3, [r3, #0]
   b647a:	681b      	ldr	r3, [r3, #0]
   b647c:	9301      	str	r3, [sp, #4]
   b647e:	bd08      	pop	{r3, pc}
   b6480:	00030230 	.word	0x00030230

000b6484 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <hal_spi_transfer+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	695b      	ldr	r3, [r3, #20]
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	00030230 	.word	0x00030230

000b6494 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b02      	ldr	r3, [pc, #8]	; (b64a0 <hal_spi_init+0xc>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	69db      	ldr	r3, [r3, #28]
   b649c:	9301      	str	r3, [sp, #4]
   b649e:	bd08      	pop	{r3, pc}
   b64a0:	00030230 	.word	0x00030230

000b64a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <hal_spi_is_enabled+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	6a1b      	ldr	r3, [r3, #32]
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	00030230 	.word	0x00030230

000b64b4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <hal_spi_info+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030230 	.word	0x00030230

000b64c4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <hal_spi_set_settings+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030230 	.word	0x00030230

000b64d4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <hal_spi_acquire+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030230 	.word	0x00030230

000b64e4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <hal_spi_release+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	00030230 	.word	0x00030230

000b64f4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <hal_usart_write+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	68db      	ldr	r3, [r3, #12]
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	0003023c 	.word	0x0003023c

000b6504 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <hal_usart_available+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	691b      	ldr	r3, [r3, #16]
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	0003023c 	.word	0x0003023c

000b6514 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <hal_usart_read+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	695b      	ldr	r3, [r3, #20]
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	0003023c 	.word	0x0003023c

000b6524 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <hal_usart_peek+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	699b      	ldr	r3, [r3, #24]
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	0003023c 	.word	0x0003023c

000b6534 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <hal_usart_flush+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	69db      	ldr	r3, [r3, #28]
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	0003023c 	.word	0x0003023c

000b6544 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <hal_usart_is_enabled+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	6a1b      	ldr	r3, [r3, #32]
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	0003023c 	.word	0x0003023c

000b6554 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <hal_usart_available_data_for_write+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	0003023c 	.word	0x0003023c

000b6564 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <hal_usart_init_ex+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	0003023c 	.word	0x0003023c

000b6574 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <HAL_USB_USART_Init+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	681b      	ldr	r3, [r3, #0]
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	0003024c 	.word	0x0003024c

000b6584 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <HAL_USB_USART_Begin+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	685b      	ldr	r3, [r3, #4]
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	0003024c 	.word	0x0003024c

000b6594 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <HAL_USB_USART_Available_Data+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	691b      	ldr	r3, [r3, #16]
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	0003024c 	.word	0x0003024c

000b65a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	695b      	ldr	r3, [r3, #20]
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	0003024c 	.word	0x0003024c

000b65b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <HAL_USB_USART_Receive_Data+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	699b      	ldr	r3, [r3, #24]
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	0003024c 	.word	0x0003024c

000b65c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <HAL_USB_USART_Send_Data+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	69db      	ldr	r3, [r3, #28]
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	0003024c 	.word	0x0003024c

000b65d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <HAL_USB_USART_Flush_Data+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	6a1b      	ldr	r3, [r3, #32]
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	0003024c 	.word	0x0003024c

000b65e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <panic_+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	00030260 	.word	0x00030260

000b65f4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b02      	ldr	r3, [pc, #8]	; (b6600 <set_system_mode+0xc>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	685b      	ldr	r3, [r3, #4]
   b65fc:	9301      	str	r3, [sp, #4]
   b65fe:	bd08      	pop	{r3, pc}
   b6600:	00030220 	.word	0x00030220

000b6604 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6604:	b508      	push	{r3, lr}
   b6606:	4b02      	ldr	r3, [pc, #8]	; (b6610 <system_delay_ms+0xc>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	695b      	ldr	r3, [r3, #20]
   b660c:	9301      	str	r3, [sp, #4]
   b660e:	bd08      	pop	{r3, pc}
   b6610:	00030220 	.word	0x00030220

000b6614 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6614:	b508      	push	{r3, lr}
   b6616:	4b03      	ldr	r3, [pc, #12]	; (b6624 <system_ctrl_set_app_request_handler+0x10>)
   b6618:	681b      	ldr	r3, [r3, #0]
   b661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b661e:	9301      	str	r3, [sp, #4]
   b6620:	bd08      	pop	{r3, pc}
   b6622:	0000      	.short	0x0000
   b6624:	00030220 	.word	0x00030220

000b6628 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6628:	b508      	push	{r3, lr}
   b662a:	4b03      	ldr	r3, [pc, #12]	; (b6638 <system_ctrl_set_result+0x10>)
   b662c:	681b      	ldr	r3, [r3, #0]
   b662e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6632:	9301      	str	r3, [sp, #4]
   b6634:	bd08      	pop	{r3, pc}
   b6636:	0000      	.short	0x0000
   b6638:	00030220 	.word	0x00030220

000b663c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b663c:	b508      	push	{r3, lr}
   b663e:	4b02      	ldr	r3, [pc, #8]	; (b6648 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6640:	681b      	ldr	r3, [r3, #0]
   b6642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6644:	9301      	str	r3, [sp, #4]
   b6646:	bd08      	pop	{r3, pc}
   b6648:	00030244 	.word	0x00030244

000b664c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b664c:	b508      	push	{r3, lr}
   b664e:	4b02      	ldr	r3, [pc, #8]	; (b6658 <network_connect+0xc>)
   b6650:	681b      	ldr	r3, [r3, #0]
   b6652:	685b      	ldr	r3, [r3, #4]
   b6654:	9301      	str	r3, [sp, #4]
   b6656:	bd08      	pop	{r3, pc}
   b6658:	00030240 	.word	0x00030240

000b665c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b665c:	b508      	push	{r3, lr}
   b665e:	4b02      	ldr	r3, [pc, #8]	; (b6668 <network_connecting+0xc>)
   b6660:	681b      	ldr	r3, [r3, #0]
   b6662:	689b      	ldr	r3, [r3, #8]
   b6664:	9301      	str	r3, [sp, #4]
   b6666:	bd08      	pop	{r3, pc}
   b6668:	00030240 	.word	0x00030240

000b666c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b666c:	b508      	push	{r3, lr}
   b666e:	4b02      	ldr	r3, [pc, #8]	; (b6678 <network_disconnect+0xc>)
   b6670:	681b      	ldr	r3, [r3, #0]
   b6672:	68db      	ldr	r3, [r3, #12]
   b6674:	9301      	str	r3, [sp, #4]
   b6676:	bd08      	pop	{r3, pc}
   b6678:	00030240 	.word	0x00030240

000b667c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b667c:	b508      	push	{r3, lr}
   b667e:	4b02      	ldr	r3, [pc, #8]	; (b6688 <network_ready+0xc>)
   b6680:	681b      	ldr	r3, [r3, #0]
   b6682:	691b      	ldr	r3, [r3, #16]
   b6684:	9301      	str	r3, [sp, #4]
   b6686:	bd08      	pop	{r3, pc}
   b6688:	00030240 	.word	0x00030240

000b668c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b668c:	b508      	push	{r3, lr}
   b668e:	4b02      	ldr	r3, [pc, #8]	; (b6698 <network_on+0xc>)
   b6690:	681b      	ldr	r3, [r3, #0]
   b6692:	695b      	ldr	r3, [r3, #20]
   b6694:	9301      	str	r3, [sp, #4]
   b6696:	bd08      	pop	{r3, pc}
   b6698:	00030240 	.word	0x00030240

000b669c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b669c:	b508      	push	{r3, lr}
   b669e:	4b02      	ldr	r3, [pc, #8]	; (b66a8 <network_off+0xc>)
   b66a0:	681b      	ldr	r3, [r3, #0]
   b66a2:	699b      	ldr	r3, [r3, #24]
   b66a4:	9301      	str	r3, [sp, #4]
   b66a6:	bd08      	pop	{r3, pc}
   b66a8:	00030240 	.word	0x00030240

000b66ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b66ac:	b508      	push	{r3, lr}
   b66ae:	4b02      	ldr	r3, [pc, #8]	; (b66b8 <network_listen+0xc>)
   b66b0:	681b      	ldr	r3, [r3, #0]
   b66b2:	69db      	ldr	r3, [r3, #28]
   b66b4:	9301      	str	r3, [sp, #4]
   b66b6:	bd08      	pop	{r3, pc}
   b66b8:	00030240 	.word	0x00030240

000b66bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b66bc:	b508      	push	{r3, lr}
   b66be:	4b02      	ldr	r3, [pc, #8]	; (b66c8 <network_listening+0xc>)
   b66c0:	681b      	ldr	r3, [r3, #0]
   b66c2:	6a1b      	ldr	r3, [r3, #32]
   b66c4:	9301      	str	r3, [sp, #4]
   b66c6:	bd08      	pop	{r3, pc}
   b66c8:	00030240 	.word	0x00030240

000b66cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b66cc:	b508      	push	{r3, lr}
   b66ce:	4b02      	ldr	r3, [pc, #8]	; (b66d8 <network_set_listen_timeout+0xc>)
   b66d0:	681b      	ldr	r3, [r3, #0]
   b66d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b66d4:	9301      	str	r3, [sp, #4]
   b66d6:	bd08      	pop	{r3, pc}
   b66d8:	00030240 	.word	0x00030240

000b66dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b66dc:	b508      	push	{r3, lr}
   b66de:	4b02      	ldr	r3, [pc, #8]	; (b66e8 <network_get_listen_timeout+0xc>)
   b66e0:	681b      	ldr	r3, [r3, #0]
   b66e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b66e4:	9301      	str	r3, [sp, #4]
   b66e6:	bd08      	pop	{r3, pc}
   b66e8:	00030240 	.word	0x00030240

000b66ec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b66ec:	b508      	push	{r3, lr}
   b66ee:	4b02      	ldr	r3, [pc, #8]	; (b66f8 <network_is_on+0xc>)
   b66f0:	681b      	ldr	r3, [r3, #0]
   b66f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b66f4:	9301      	str	r3, [sp, #4]
   b66f6:	bd08      	pop	{r3, pc}
   b66f8:	00030240 	.word	0x00030240

000b66fc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b66fc:	b508      	push	{r3, lr}
   b66fe:	4b02      	ldr	r3, [pc, #8]	; (b6708 <network_is_off+0xc>)
   b6700:	681b      	ldr	r3, [r3, #0]
   b6702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6704:	9301      	str	r3, [sp, #4]
   b6706:	bd08      	pop	{r3, pc}
   b6708:	00030240 	.word	0x00030240

000b670c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b670c:	b508      	push	{r3, lr}
   b670e:	4b02      	ldr	r3, [pc, #8]	; (b6718 <malloc+0xc>)
   b6710:	681b      	ldr	r3, [r3, #0]
   b6712:	681b      	ldr	r3, [r3, #0]
   b6714:	9301      	str	r3, [sp, #4]
   b6716:	bd08      	pop	{r3, pc}
   b6718:	0003021c 	.word	0x0003021c

000b671c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b671c:	b508      	push	{r3, lr}
   b671e:	4b02      	ldr	r3, [pc, #8]	; (b6728 <free+0xc>)
   b6720:	681b      	ldr	r3, [r3, #0]
   b6722:	685b      	ldr	r3, [r3, #4]
   b6724:	9301      	str	r3, [sp, #4]
   b6726:	bd08      	pop	{r3, pc}
   b6728:	0003021c 	.word	0x0003021c

000b672c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b672c:	b508      	push	{r3, lr}
   b672e:	4b02      	ldr	r3, [pc, #8]	; (b6738 <__assert_func+0xc>)
   b6730:	681b      	ldr	r3, [r3, #0]
   b6732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6734:	9301      	str	r3, [sp, #4]
   b6736:	bd08      	pop	{r3, pc}
   b6738:	0003021c 	.word	0x0003021c

000b673c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b673c:	b508      	push	{r3, lr}
   b673e:	4b02      	ldr	r3, [pc, #8]	; (b6748 <newlib_impure_ptr_callback+0xc>)
   b6740:	681b      	ldr	r3, [r3, #0]
   b6742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6744:	9301      	str	r3, [sp, #4]
   b6746:	bd08      	pop	{r3, pc}
   b6748:	0003021c 	.word	0x0003021c

000b674c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b674c:	2100      	movs	r1, #0
   b674e:	f7ff bf59 	b.w	b6604 <system_delay_ms>
	...

000b6754 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6754:	4802      	ldr	r0, [pc, #8]	; (b6760 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6756:	2300      	movs	r3, #0
   b6758:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b675a:	f7ff bdd3 	b.w	b6304 <os_mutex_recursive_create>
   b675e:	bf00      	nop
   b6760:	2003e6c4 	.word	0x2003e6c4

000b6764 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6764:	2200      	movs	r2, #0
   b6766:	6840      	ldr	r0, [r0, #4]
   b6768:	4611      	mov	r1, r2
   b676a:	f7ff bfa7 	b.w	b66bc <network_listening>

000b676e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b676e:	2200      	movs	r2, #0
   b6770:	6840      	ldr	r0, [r0, #4]
   b6772:	4611      	mov	r1, r2
   b6774:	f7ff bfb2 	b.w	b66dc <network_get_listen_timeout>

000b6778 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6778:	6840      	ldr	r0, [r0, #4]
   b677a:	2200      	movs	r2, #0
   b677c:	f7ff bfa6 	b.w	b66cc <network_set_listen_timeout>

000b6780 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6780:	6840      	ldr	r0, [r0, #4]
   b6782:	2200      	movs	r2, #0
   b6784:	f081 0101 	eor.w	r1, r1, #1
   b6788:	f7ff bf90 	b.w	b66ac <network_listen>

000b678c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b678c:	2300      	movs	r3, #0
   b678e:	6840      	ldr	r0, [r0, #4]
   b6790:	461a      	mov	r2, r3
   b6792:	4619      	mov	r1, r3
   b6794:	f7ff bf82 	b.w	b669c <network_off>

000b6798 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6798:	2300      	movs	r3, #0
   b679a:	6840      	ldr	r0, [r0, #4]
   b679c:	461a      	mov	r2, r3
   b679e:	4619      	mov	r1, r3
   b67a0:	f7ff bf74 	b.w	b668c <network_on>

000b67a4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b67a4:	2200      	movs	r2, #0
   b67a6:	6840      	ldr	r0, [r0, #4]
   b67a8:	4611      	mov	r1, r2
   b67aa:	f7ff bf67 	b.w	b667c <network_ready>

000b67ae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b67ae:	2200      	movs	r2, #0
   b67b0:	6840      	ldr	r0, [r0, #4]
   b67b2:	4611      	mov	r1, r2
   b67b4:	f7ff bf52 	b.w	b665c <network_connecting>

000b67b8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b67b8:	6840      	ldr	r0, [r0, #4]
   b67ba:	2200      	movs	r2, #0
   b67bc:	2102      	movs	r1, #2
   b67be:	f7ff bf55 	b.w	b666c <network_disconnect>

000b67c2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b67c2:	2300      	movs	r3, #0
   b67c4:	6840      	ldr	r0, [r0, #4]
   b67c6:	461a      	mov	r2, r3
   b67c8:	f7ff bf40 	b.w	b664c <network_connect>

000b67cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b67cc:	4b02      	ldr	r3, [pc, #8]	; (b67d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b67ce:	2203      	movs	r2, #3
   b67d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b67d2:	4a02      	ldr	r2, [pc, #8]	; (b67dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b67d4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b67d6:	4770      	bx	lr
   b67d8:	2003e6c8 	.word	0x2003e6c8
   b67dc:	000b8d0c 	.word	0x000b8d0c

000b67e0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b67e0:	4770      	bx	lr

000b67e2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b67e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67e4:	4606      	mov	r6, r0
   b67e6:	4615      	mov	r5, r2
   b67e8:	460c      	mov	r4, r1
   b67ea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b67ec:	42bc      	cmp	r4, r7
   b67ee:	d006      	beq.n	b67fe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b67f0:	6833      	ldr	r3, [r6, #0]
   b67f2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b67f6:	689b      	ldr	r3, [r3, #8]
   b67f8:	4630      	mov	r0, r6
   b67fa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b67fc:	e7f6      	b.n	b67ec <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b67fe:	4628      	mov	r0, r5
   b6800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6802 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6802:	7c00      	ldrb	r0, [r0, #16]
   b6804:	2200      	movs	r2, #0
   b6806:	f7ff bddd 	b.w	b63c4 <hal_i2c_write>

000b680a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b680a:	7c00      	ldrb	r0, [r0, #16]
   b680c:	2100      	movs	r1, #0
   b680e:	f7ff bde1 	b.w	b63d4 <hal_i2c_available>

000b6812 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6812:	7c00      	ldrb	r0, [r0, #16]
   b6814:	2100      	movs	r1, #0
   b6816:	f7ff bde5 	b.w	b63e4 <hal_i2c_read>

000b681a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b681a:	7c00      	ldrb	r0, [r0, #16]
   b681c:	2100      	movs	r1, #0
   b681e:	f7ff bde9 	b.w	b63f4 <hal_i2c_peek>

000b6822 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6822:	7c00      	ldrb	r0, [r0, #16]
   b6824:	2100      	movs	r1, #0
   b6826:	f7ff bded 	b.w	b6404 <hal_i2c_flush>

000b682a <_ZN7TwoWireD0Ev>:
   b682a:	b510      	push	{r4, lr}
   b682c:	2114      	movs	r1, #20
   b682e:	4604      	mov	r4, r0
   b6830:	f7fe f8ed 	bl	b4a0e <_ZdlPvj>
   b6834:	4620      	mov	r0, r4
   b6836:	bd10      	pop	{r4, pc}

000b6838 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6838:	b538      	push	{r3, r4, r5, lr}
   b683a:	4604      	mov	r4, r0
   b683c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b683e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6842:	2200      	movs	r2, #0
   b6844:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6848:	4b09      	ldr	r3, [pc, #36]	; (b6870 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b684a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b684c:	4608      	mov	r0, r1
   b684e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6850:	4629      	mov	r1, r5
   b6852:	f7ff fde7 	bl	b6424 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6856:	30bf      	adds	r0, #191	; 0xbf
   b6858:	d108      	bne.n	b686c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b685a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b685c:	07db      	lsls	r3, r3, #31
   b685e:	d505      	bpl.n	b686c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6860:	6868      	ldr	r0, [r5, #4]
   b6862:	f7ff ff5b 	bl	b671c <free>
    free(conf.tx_buffer);
   b6866:	68e8      	ldr	r0, [r5, #12]
   b6868:	f7ff ff58 	bl	b671c <free>
}
   b686c:	4620      	mov	r0, r4
   b686e:	bd38      	pop	{r3, r4, r5, pc}
   b6870:	000b8d48 	.word	0x000b8d48

000b6874 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6874:	2300      	movs	r3, #0
   b6876:	7c00      	ldrb	r0, [r0, #16]
   b6878:	461a      	mov	r2, r3
   b687a:	4619      	mov	r1, r3
   b687c:	f7ff bd8a 	b.w	b6394 <hal_i2c_begin>

000b6880 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6882:	2200      	movs	r2, #0
   b6884:	2314      	movs	r3, #20
   b6886:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b688a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b688e:	780b      	ldrb	r3, [r1, #0]
   b6890:	f88d 3008 	strb.w	r3, [sp, #8]
   b6894:	684b      	ldr	r3, [r1, #4]
   b6896:	9303      	str	r3, [sp, #12]
   b6898:	68cb      	ldr	r3, [r1, #12]
   b689a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b689c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b689e:	7a0b      	ldrb	r3, [r1, #8]
   b68a0:	9305      	str	r3, [sp, #20]
   b68a2:	a901      	add	r1, sp, #4
   b68a4:	f7ff fdc6 	bl	b6434 <hal_i2c_request_ex>
}
   b68a8:	b007      	add	sp, #28
   b68aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b68ae <_ZN7TwoWire11requestFromEhjh>:
{
   b68ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b68b0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b68b2:	f88d 1000 	strb.w	r1, [sp]
   b68b6:	f04f 0164 	mov.w	r1, #100	; 0x64
   b68ba:	9103      	str	r1, [sp, #12]
   b68bc:	bf18      	it	ne
   b68be:	2301      	movne	r3, #1
   b68c0:	4669      	mov	r1, sp
    size_ = size;
   b68c2:	9201      	str	r2, [sp, #4]
   b68c4:	f88d 3008 	strb.w	r3, [sp, #8]
   b68c8:	f7ff ffda 	bl	b6880 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b68cc:	b005      	add	sp, #20
   b68ce:	f85d fb04 	ldr.w	pc, [sp], #4

000b68d2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b68d2:	2301      	movs	r3, #1
   b68d4:	f7ff bfeb 	b.w	b68ae <_ZN7TwoWire11requestFromEhjh>

000b68d8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b68d8:	7c00      	ldrb	r0, [r0, #16]
   b68da:	2200      	movs	r2, #0
   b68dc:	f7ff bd62 	b.w	b63a4 <hal_i2c_begin_transmission>

000b68e0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b68e0:	b2c9      	uxtb	r1, r1
   b68e2:	f7ff bff9 	b.w	b68d8 <_ZN7TwoWire17beginTransmissionEh>

000b68e6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b68e6:	7c00      	ldrb	r0, [r0, #16]
   b68e8:	2200      	movs	r2, #0
   b68ea:	f7ff bd63 	b.w	b63b4 <hal_i2c_end_transmission>

000b68ee <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b68ee:	2101      	movs	r1, #1
   b68f0:	f7ff bff9 	b.w	b68e6 <_ZN7TwoWire15endTransmissionEh>

000b68f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b68f4:	4770      	bx	lr

000b68f6 <_ZN9IPAddressD0Ev>:
   b68f6:	b510      	push	{r4, lr}
   b68f8:	2118      	movs	r1, #24
   b68fa:	4604      	mov	r4, r0
   b68fc:	f7fe f887 	bl	b4a0e <_ZdlPvj>
   b6900:	4620      	mov	r0, r4
   b6902:	bd10      	pop	{r4, pc}

000b6904 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6904:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6906:	7d03      	ldrb	r3, [r0, #20]
   b6908:	2b06      	cmp	r3, #6
{
   b690a:	b08d      	sub	sp, #52	; 0x34
   b690c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b690e:	f100 0704 	add.w	r7, r0, #4
   b6912:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6916:	d012      	beq.n	b693e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6918:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b691c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6920:	220a      	movs	r2, #10
   b6922:	4630      	mov	r0, r6
   b6924:	f000 f95d 	bl	b6be2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6928:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b692a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b692c:	d019      	beq.n	b6962 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b692e:	2c00      	cmp	r4, #0
   b6930:	d0f4      	beq.n	b691c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6932:	212e      	movs	r1, #46	; 0x2e
   b6934:	4630      	mov	r0, r6
   b6936:	f000 f93b 	bl	b6bb0 <_ZN5Print5printEc>
   b693a:	4404      	add	r4, r0
   b693c:	e7ee      	b.n	b691c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b693e:	232f      	movs	r3, #47	; 0x2f
   b6940:	466a      	mov	r2, sp
   b6942:	4639      	mov	r1, r7
   b6944:	200a      	movs	r0, #10
		buf[0] = 0;
   b6946:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b694a:	f7ff fd7b 	bl	b6444 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b694e:	4668      	mov	r0, sp
   b6950:	f7fe f818 	bl	b4984 <strlen>
   b6954:	6833      	ldr	r3, [r6, #0]
   b6956:	4602      	mov	r2, r0
   b6958:	68db      	ldr	r3, [r3, #12]
   b695a:	4669      	mov	r1, sp
   b695c:	4630      	mov	r0, r6
   b695e:	4798      	blx	r3
   b6960:	4604      	mov	r4, r0
    }
    return n;
}
   b6962:	4620      	mov	r0, r4
   b6964:	b00d      	add	sp, #52	; 0x34
   b6966:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6968 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6968:	b510      	push	{r4, lr}
   b696a:	4b05      	ldr	r3, [pc, #20]	; (b6980 <_ZN9IPAddressC1Ev+0x18>)
   b696c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b696e:	2211      	movs	r2, #17
   b6970:	f840 3b04 	str.w	r3, [r0], #4
   b6974:	2100      	movs	r1, #0
   b6976:	f000 fdc3 	bl	b7500 <memset>
}
   b697a:	4620      	mov	r0, r4
   b697c:	bd10      	pop	{r4, pc}
   b697e:	bf00      	nop
   b6980:	000b8d70 	.word	0x000b8d70

000b6984 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6984:	4603      	mov	r3, r0
   b6986:	4a07      	ldr	r2, [pc, #28]	; (b69a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6988:	b510      	push	{r4, lr}
   b698a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b698e:	f101 0210 	add.w	r2, r1, #16
   b6992:	f851 4b04 	ldr.w	r4, [r1], #4
   b6996:	f843 4b04 	str.w	r4, [r3], #4
   b699a:	4291      	cmp	r1, r2
   b699c:	d1f9      	bne.n	b6992 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b699e:	780a      	ldrb	r2, [r1, #0]
   b69a0:	701a      	strb	r2, [r3, #0]
}
   b69a2:	bd10      	pop	{r4, pc}
   b69a4:	000b8d70 	.word	0x000b8d70

000b69a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b69a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b69aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b69ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b69b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b69b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b69ba:	2304      	movs	r3, #4
   b69bc:	6041      	str	r1, [r0, #4]
   b69be:	7503      	strb	r3, [r0, #20]
}
   b69c0:	bd10      	pop	{r4, pc}
	...

000b69c4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b69c4:	b507      	push	{r0, r1, r2, lr}
   b69c6:	4b06      	ldr	r3, [pc, #24]	; (b69e0 <_ZN9IPAddressC1EPKh+0x1c>)
   b69c8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b69ca:	78cb      	ldrb	r3, [r1, #3]
   b69cc:	9300      	str	r3, [sp, #0]
   b69ce:	788b      	ldrb	r3, [r1, #2]
   b69d0:	784a      	ldrb	r2, [r1, #1]
   b69d2:	7809      	ldrb	r1, [r1, #0]
   b69d4:	f7ff ffe8 	bl	b69a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b69d8:	b003      	add	sp, #12
   b69da:	f85d fb04 	ldr.w	pc, [sp], #4
   b69de:	bf00      	nop
   b69e0:	000b8d70 	.word	0x000b8d70

000b69e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b69e4:	4b01      	ldr	r3, [pc, #4]	; (b69ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b69e6:	4a02      	ldr	r2, [pc, #8]	; (b69f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b69e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b69ea:	4770      	bx	lr
   b69ec:	2003e6d0 	.word	0x2003e6d0
   b69f0:	000b8d7c 	.word	0x000b8d7c

000b69f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b69f4:	2300      	movs	r3, #0
   b69f6:	6840      	ldr	r0, [r0, #4]
   b69f8:	461a      	mov	r2, r3
   b69fa:	f7ff be27 	b.w	b664c <network_connect>

000b69fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b69fe:	6840      	ldr	r0, [r0, #4]
   b6a00:	2200      	movs	r2, #0
   b6a02:	2102      	movs	r1, #2
   b6a04:	f7ff be32 	b.w	b666c <network_disconnect>

000b6a08 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6a08:	2200      	movs	r2, #0
   b6a0a:	6840      	ldr	r0, [r0, #4]
   b6a0c:	4611      	mov	r1, r2
   b6a0e:	f7ff be25 	b.w	b665c <network_connecting>

000b6a12 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6a12:	2200      	movs	r2, #0
   b6a14:	6840      	ldr	r0, [r0, #4]
   b6a16:	4611      	mov	r1, r2
   b6a18:	f7ff be30 	b.w	b667c <network_ready>

000b6a1c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6a1c:	2300      	movs	r3, #0
   b6a1e:	6840      	ldr	r0, [r0, #4]
   b6a20:	461a      	mov	r2, r3
   b6a22:	4619      	mov	r1, r3
   b6a24:	f7ff be32 	b.w	b668c <network_on>

000b6a28 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6a28:	2300      	movs	r3, #0
   b6a2a:	6840      	ldr	r0, [r0, #4]
   b6a2c:	461a      	mov	r2, r3
   b6a2e:	4619      	mov	r1, r3
   b6a30:	f7ff be34 	b.w	b669c <network_off>

000b6a34 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6a34:	6840      	ldr	r0, [r0, #4]
   b6a36:	2100      	movs	r1, #0
   b6a38:	f7ff be58 	b.w	b66ec <network_is_on>

000b6a3c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6a3c:	6840      	ldr	r0, [r0, #4]
   b6a3e:	2100      	movs	r1, #0
   b6a40:	f7ff be5c 	b.w	b66fc <network_is_off>

000b6a44 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6a44:	6840      	ldr	r0, [r0, #4]
   b6a46:	2200      	movs	r2, #0
   b6a48:	f081 0101 	eor.w	r1, r1, #1
   b6a4c:	f7ff be2e 	b.w	b66ac <network_listen>

000b6a50 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6a50:	6840      	ldr	r0, [r0, #4]
   b6a52:	2200      	movs	r2, #0
   b6a54:	f7ff be3a 	b.w	b66cc <network_set_listen_timeout>

000b6a58 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6a58:	2200      	movs	r2, #0
   b6a5a:	6840      	ldr	r0, [r0, #4]
   b6a5c:	4611      	mov	r1, r2
   b6a5e:	f7ff be3d 	b.w	b66dc <network_get_listen_timeout>

000b6a62 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6a62:	2200      	movs	r2, #0
   b6a64:	6840      	ldr	r0, [r0, #4]
   b6a66:	4611      	mov	r1, r2
   b6a68:	f7ff be28 	b.w	b66bc <network_listening>

000b6a6c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a70:	b095      	sub	sp, #84	; 0x54
   b6a72:	4614      	mov	r4, r2
   b6a74:	460d      	mov	r5, r1
   b6a76:	4607      	mov	r7, r0
    IPAddress addr;
   b6a78:	f7ff ff76 	bl	b6968 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6a7c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6a7e:	221c      	movs	r2, #28
   b6a80:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6a82:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6a84:	f000 fd3c 	bl	b7500 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6a88:	2340      	movs	r3, #64	; 0x40
   b6a8a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6a8c:	4620      	mov	r0, r4
   b6a8e:	466b      	mov	r3, sp
   b6a90:	aa0c      	add	r2, sp, #48	; 0x30
   b6a92:	2100      	movs	r1, #0
   b6a94:	f7ff fce6 	bl	b6464 <netdb_getaddrinfo>
    if (!r) {
   b6a98:	4604      	mov	r4, r0
   b6a9a:	2800      	cmp	r0, #0
   b6a9c:	d14b      	bne.n	b6b36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6a9e:	4602      	mov	r2, r0
   b6aa0:	2101      	movs	r1, #1
   b6aa2:	6868      	ldr	r0, [r5, #4]
   b6aa4:	f7ff fdea 	bl	b667c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6aa8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6aaa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6aac:	4622      	mov	r2, r4
   b6aae:	6868      	ldr	r0, [r5, #4]
   b6ab0:	f7ff fde4 	bl	b667c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ab4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ab6:	4681      	mov	r9, r0
        bool ok = false;
   b6ab8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6aba:	2e00      	cmp	r6, #0
   b6abc:	d03b      	beq.n	b6b36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6abe:	2900      	cmp	r1, #0
   b6ac0:	d139      	bne.n	b6b36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6ac2:	6873      	ldr	r3, [r6, #4]
   b6ac4:	2b02      	cmp	r3, #2
   b6ac6:	d003      	beq.n	b6ad0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ac8:	2b0a      	cmp	r3, #10
   b6aca:	d011      	beq.n	b6af0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6acc:	69f6      	ldr	r6, [r6, #28]
   b6ace:	e7f4      	b.n	b6aba <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6ad0:	f1b8 0f00 	cmp.w	r8, #0
   b6ad4:	d0fa      	beq.n	b6acc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6ad6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6ad8:	a806      	add	r0, sp, #24
   b6ada:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6adc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6ade:	f7ff ff71 	bl	b69c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ae4:	1d3c      	adds	r4, r7, #4
   b6ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ae8:	682b      	ldr	r3, [r5, #0]
   b6aea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6aec:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6aee:	e7ed      	b.n	b6acc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6af0:	f1b9 0f00 	cmp.w	r9, #0
   b6af4:	d0ea      	beq.n	b6acc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6af6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6af8:	2210      	movs	r2, #16
   b6afa:	a801      	add	r0, sp, #4
   b6afc:	f000 fd00 	bl	b7500 <memset>
                    a.v = 6;
   b6b00:	2306      	movs	r3, #6
   b6b02:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6b06:	ad01      	add	r5, sp, #4
   b6b08:	f104 0308 	add.w	r3, r4, #8
   b6b0c:	3418      	adds	r4, #24
   b6b0e:	6818      	ldr	r0, [r3, #0]
   b6b10:	6859      	ldr	r1, [r3, #4]
   b6b12:	462a      	mov	r2, r5
   b6b14:	c203      	stmia	r2!, {r0, r1}
   b6b16:	3308      	adds	r3, #8
   b6b18:	42a3      	cmp	r3, r4
   b6b1a:	4615      	mov	r5, r2
   b6b1c:	d1f7      	bne.n	b6b0e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6b1e:	a901      	add	r1, sp, #4
   b6b20:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6b22:	ad07      	add	r5, sp, #28
   b6b24:	f7ff ff2e 	bl	b6984 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b2a:	1d3c      	adds	r4, r7, #4
   b6b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b2e:	682b      	ldr	r3, [r5, #0]
   b6b30:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6b32:	4649      	mov	r1, r9
   b6b34:	e7ca      	b.n	b6acc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6b36:	9800      	ldr	r0, [sp, #0]
   b6b38:	f7ff fc8c 	bl	b6454 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6b3c:	4638      	mov	r0, r7
   b6b3e:	b015      	add	sp, #84	; 0x54
   b6b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6b44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6b44:	4b02      	ldr	r3, [pc, #8]	; (b6b50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6b46:	4a03      	ldr	r2, [pc, #12]	; (b6b54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6b48:	601a      	str	r2, [r3, #0]
   b6b4a:	2200      	movs	r2, #0
   b6b4c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b6b4e:	4770      	bx	lr
   b6b50:	2003e6d4 	.word	0x2003e6d4
   b6b54:	000b8d88 	.word	0x000b8d88

000b6b58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b5a:	4606      	mov	r6, r0
   b6b5c:	460d      	mov	r5, r1
  size_t n = 0;
   b6b5e:	188f      	adds	r7, r1, r2
   b6b60:	2400      	movs	r4, #0
  while (size--) {
   b6b62:	42bd      	cmp	r5, r7
   b6b64:	d00c      	beq.n	b6b80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6b66:	6833      	ldr	r3, [r6, #0]
   b6b68:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6b6c:	689b      	ldr	r3, [r3, #8]
   b6b6e:	4630      	mov	r0, r6
   b6b70:	4798      	blx	r3
     if (chunk>=0)
   b6b72:	1e03      	subs	r3, r0, #0
   b6b74:	db01      	blt.n	b6b7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6b76:	441c      	add	r4, r3
  while (size--) {
   b6b78:	e7f3      	b.n	b6b62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6b7a:	2c00      	cmp	r4, #0
   b6b7c:	bf08      	it	eq
   b6b7e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6b80:	4620      	mov	r0, r4
   b6b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6b84 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6b84:	b513      	push	{r0, r1, r4, lr}
   b6b86:	4604      	mov	r4, r0
    }
   b6b88:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6b8a:	b159      	cbz	r1, b6ba4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6b8c:	9101      	str	r1, [sp, #4]
   b6b8e:	f7fd fef9 	bl	b4984 <strlen>
   b6b92:	6823      	ldr	r3, [r4, #0]
   b6b94:	9901      	ldr	r1, [sp, #4]
   b6b96:	68db      	ldr	r3, [r3, #12]
   b6b98:	4602      	mov	r2, r0
   b6b9a:	4620      	mov	r0, r4
    }
   b6b9c:	b002      	add	sp, #8
   b6b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6ba2:	4718      	bx	r3
    }
   b6ba4:	b002      	add	sp, #8
   b6ba6:	bd10      	pop	{r4, pc}

000b6ba8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6ba8:	b508      	push	{r3, lr}
  return write(str);
   b6baa:	f7ff ffeb 	bl	b6b84 <_ZN5Print5writeEPKc>
}
   b6bae:	bd08      	pop	{r3, pc}

000b6bb0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6bb0:	6803      	ldr	r3, [r0, #0]
   b6bb2:	689b      	ldr	r3, [r3, #8]
   b6bb4:	4718      	bx	r3

000b6bb6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6bb6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6bb8:	210d      	movs	r1, #13
{
   b6bba:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6bbc:	f7ff fff8 	bl	b6bb0 <_ZN5Print5printEc>
  n += print('\n');
   b6bc0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6bc2:	4604      	mov	r4, r0
  n += print('\n');
   b6bc4:	4628      	mov	r0, r5
   b6bc6:	f7ff fff3 	bl	b6bb0 <_ZN5Print5printEc>
  return n;
}
   b6bca:	4420      	add	r0, r4
   b6bcc:	bd38      	pop	{r3, r4, r5, pc}

000b6bce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6bce:	b538      	push	{r3, r4, r5, lr}
   b6bd0:	4605      	mov	r5, r0
  return write(str);
   b6bd2:	f7ff ffd7 	bl	b6b84 <_ZN5Print5writeEPKc>
   b6bd6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6bd8:	4628      	mov	r0, r5
   b6bda:	f7ff ffec 	bl	b6bb6 <_ZN5Print7printlnEv>
  return n;
}
   b6bde:	4420      	add	r0, r4
   b6be0:	bd38      	pop	{r3, r4, r5, pc}

000b6be2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6be2:	b530      	push	{r4, r5, lr}
   b6be4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6be6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6be8:	2a01      	cmp	r2, #1
  *str = '\0';
   b6bea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6bee:	bf98      	it	ls
   b6bf0:	220a      	movls	r2, #10
   b6bf2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6bf4:	460d      	mov	r5, r1
   b6bf6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6bfa:	fb01 5312 	mls	r3, r1, r2, r5
   b6bfe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6c02:	2b09      	cmp	r3, #9
   b6c04:	bf94      	ite	ls
   b6c06:	3330      	addls	r3, #48	; 0x30
   b6c08:	3337      	addhi	r3, #55	; 0x37
   b6c0a:	b2db      	uxtb	r3, r3
  } while(n);
   b6c0c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6c0e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6c12:	d9ef      	bls.n	b6bf4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6c14:	4621      	mov	r1, r4
   b6c16:	f7ff ffb5 	bl	b6b84 <_ZN5Print5writeEPKc>
}
   b6c1a:	b00b      	add	sp, #44	; 0x2c
   b6c1c:	bd30      	pop	{r4, r5, pc}
	...

000b6c20 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c24:	ec55 4b10 	vmov	r4, r5, d0
   b6c28:	4606      	mov	r6, r0
   b6c2a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b6c2c:	ee10 2a10 	vmov	r2, s0
   b6c30:	ee10 0a10 	vmov	r0, s0
   b6c34:	462b      	mov	r3, r5
   b6c36:	4629      	mov	r1, r5
   b6c38:	f7fd fe46 	bl	b48c8 <__aeabi_dcmpun>
   b6c3c:	b140      	cbz	r0, b6c50 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b6c3e:	4953      	ldr	r1, [pc, #332]	; (b6d8c <_ZN5Print10printFloatEdh+0x16c>)
   b6c40:	4630      	mov	r0, r6
   b6c42:	f7ff ff9f 	bl	b6b84 <_ZN5Print5writeEPKc>
   b6c46:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b6c48:	4650      	mov	r0, sl
   b6c4a:	b003      	add	sp, #12
   b6c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6c50:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6c54:	4b4e      	ldr	r3, [pc, #312]	; (b6d90 <_ZN5Print10printFloatEdh+0x170>)
   b6c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6c5a:	4620      	mov	r0, r4
   b6c5c:	4649      	mov	r1, r9
   b6c5e:	f7fd fe33 	bl	b48c8 <__aeabi_dcmpun>
   b6c62:	b948      	cbnz	r0, b6c78 <_ZN5Print10printFloatEdh+0x58>
   b6c64:	4b4a      	ldr	r3, [pc, #296]	; (b6d90 <_ZN5Print10printFloatEdh+0x170>)
   b6c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6c6a:	4620      	mov	r0, r4
   b6c6c:	4649      	mov	r1, r9
   b6c6e:	f7fd fe0d 	bl	b488c <__aeabi_dcmple>
   b6c72:	b908      	cbnz	r0, b6c78 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6c74:	4947      	ldr	r1, [pc, #284]	; (b6d94 <_ZN5Print10printFloatEdh+0x174>)
   b6c76:	e7e3      	b.n	b6c40 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b6c78:	4b47      	ldr	r3, [pc, #284]	; (b6d98 <_ZN5Print10printFloatEdh+0x178>)
   b6c7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6c7e:	4620      	mov	r0, r4
   b6c80:	4629      	mov	r1, r5
   b6c82:	f7fd fe17 	bl	b48b4 <__aeabi_dcmpgt>
   b6c86:	b108      	cbz	r0, b6c8c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b6c88:	4944      	ldr	r1, [pc, #272]	; (b6d9c <_ZN5Print10printFloatEdh+0x17c>)
   b6c8a:	e7d9      	b.n	b6c40 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b6c8c:	4b44      	ldr	r3, [pc, #272]	; (b6da0 <_ZN5Print10printFloatEdh+0x180>)
   b6c8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6c92:	4620      	mov	r0, r4
   b6c94:	4629      	mov	r1, r5
   b6c96:	f7fd fdef 	bl	b4878 <__aeabi_dcmplt>
   b6c9a:	2800      	cmp	r0, #0
   b6c9c:	d1f4      	bne.n	b6c88 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b6c9e:	2200      	movs	r2, #0
   b6ca0:	2300      	movs	r3, #0
   b6ca2:	4620      	mov	r0, r4
   b6ca4:	4629      	mov	r1, r5
   b6ca6:	f7fd fde7 	bl	b4878 <__aeabi_dcmplt>
   b6caa:	b1d0      	cbz	r0, b6ce2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b6cac:	212d      	movs	r1, #45	; 0x2d
   b6cae:	4630      	mov	r0, r6
   b6cb0:	f7ff ff7e 	bl	b6bb0 <_ZN5Print5printEc>
     number = -number;
   b6cb4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b6cb8:	4682      	mov	sl, r0
     number = -number;
   b6cba:	461d      	mov	r5, r3
  double rounding = 0.5;
   b6cbc:	4939      	ldr	r1, [pc, #228]	; (b6da4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b6cbe:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b6dac <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b6cc2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b6cc6:	2000      	movs	r0, #0
    rounding /= 10.0;
   b6cc8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b6ccc:	fa5f f38b 	uxtb.w	r3, fp
   b6cd0:	429f      	cmp	r7, r3
   b6cd2:	d908      	bls.n	b6ce6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b6cd4:	4642      	mov	r2, r8
   b6cd6:	464b      	mov	r3, r9
   b6cd8:	f7fd fc86 	bl	b45e8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b6cdc:	f10b 0b01 	add.w	fp, fp, #1
   b6ce0:	e7f4      	b.n	b6ccc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b6ce2:	4682      	mov	sl, r0
   b6ce4:	e7ea      	b.n	b6cbc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b6ce6:	4622      	mov	r2, r4
   b6ce8:	462b      	mov	r3, r5
   b6cea:	f7fd f99d 	bl	b4028 <__adddf3>
   b6cee:	460d      	mov	r5, r1
   b6cf0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b6cf2:	f7fd fe27 	bl	b4944 <__aeabi_d2uiz>
   b6cf6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b6cf8:	f7fd fad2 	bl	b42a0 <__aeabi_ui2d>
   b6cfc:	4602      	mov	r2, r0
   b6cfe:	460b      	mov	r3, r1
   b6d00:	4620      	mov	r0, r4
   b6d02:	4629      	mov	r1, r5
   b6d04:	f7fd f98e 	bl	b4024 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b6d08:	220a      	movs	r2, #10
   b6d0a:	4604      	mov	r4, r0
   b6d0c:	460d      	mov	r5, r1
   b6d0e:	4630      	mov	r0, r6
   b6d10:	4641      	mov	r1, r8
   b6d12:	f7ff ff66 	bl	b6be2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b6d16:	4482      	add	sl, r0
  if (digits > 0) {
   b6d18:	2f00      	cmp	r7, #0
   b6d1a:	d095      	beq.n	b6c48 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6d1c:	4922      	ldr	r1, [pc, #136]	; (b6da8 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6d1e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b6dac <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b6d22:	4630      	mov	r0, r6
   b6d24:	f7ff ff2e 	bl	b6b84 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b6d28:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b6d2c:	4482      	add	sl, r0
  while (digits-- > 0)
   b6d2e:	2f00      	cmp	r7, #0
   b6d30:	d08a      	beq.n	b6c48 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b6d32:	4642      	mov	r2, r8
   b6d34:	464b      	mov	r3, r9
   b6d36:	4620      	mov	r0, r4
   b6d38:	4629      	mov	r1, r5
   b6d3a:	f7fd fb2b 	bl	b4394 <__aeabi_dmul>
   b6d3e:	4604      	mov	r4, r0
   b6d40:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b6d42:	f7fd fdd7 	bl	b48f4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b6d46:	f1b0 0b00 	subs.w	fp, r0, #0
   b6d4a:	da1c      	bge.n	b6d86 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6d4c:	212d      	movs	r1, #45	; 0x2d
   b6d4e:	4630      	mov	r0, r6
   b6d50:	f7ff ff2e 	bl	b6bb0 <_ZN5Print5printEc>
            val = -n;
   b6d54:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b6d58:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b6d5a:	220a      	movs	r2, #10
   b6d5c:	4630      	mov	r0, r6
   b6d5e:	9301      	str	r3, [sp, #4]
   b6d60:	f7ff ff3f 	bl	b6be2 <_ZN5Print11printNumberEmh>
   b6d64:	9b01      	ldr	r3, [sp, #4]
   b6d66:	4418      	add	r0, r3
    n += print(toPrint);
   b6d68:	4482      	add	sl, r0
    remainder -= toPrint;
   b6d6a:	4658      	mov	r0, fp
   b6d6c:	f7fd faa8 	bl	b42c0 <__aeabi_i2d>
   b6d70:	4602      	mov	r2, r0
   b6d72:	460b      	mov	r3, r1
   b6d74:	4620      	mov	r0, r4
   b6d76:	4629      	mov	r1, r5
   b6d78:	f7fd f954 	bl	b4024 <__aeabi_dsub>
   b6d7c:	3f01      	subs	r7, #1
   b6d7e:	4604      	mov	r4, r0
   b6d80:	460d      	mov	r5, r1
   b6d82:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6d84:	e7d3      	b.n	b6d2e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b6d86:	4659      	mov	r1, fp
        size_t t = 0;
   b6d88:	2300      	movs	r3, #0
   b6d8a:	e7e6      	b.n	b6d5a <_ZN5Print10printFloatEdh+0x13a>
   b6d8c:	000b8dbc 	.word	0x000b8dbc
   b6d90:	7fefffff 	.word	0x7fefffff
   b6d94:	000b8dc0 	.word	0x000b8dc0
   b6d98:	41efffff 	.word	0x41efffff
   b6d9c:	000b8dc4 	.word	0x000b8dc4
   b6da0:	c1efffff 	.word	0xc1efffff
   b6da4:	3fe00000 	.word	0x3fe00000
   b6da8:	000b8dc8 	.word	0x000b8dc8
   b6dac:	40240000 	.word	0x40240000

000b6db0 <_ZN5Print5printEfi>:
{
   b6db0:	b538      	push	{r3, r4, r5, lr}
   b6db2:	4604      	mov	r4, r0
   b6db4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b6db8:	b2cd      	uxtb	r5, r1
   b6dba:	f7fd fa93 	bl	b42e4 <__aeabi_f2d>
   b6dbe:	ec41 0b10 	vmov	d0, r0, r1
   b6dc2:	4629      	mov	r1, r5
   b6dc4:	4620      	mov	r0, r4
}
   b6dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b6dca:	f7ff bf29 	b.w	b6c20 <_ZN5Print10printFloatEdh>
	...

000b6dd0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6dd0:	4b01      	ldr	r3, [pc, #4]	; (b6dd8 <_GLOBAL__sub_I_RGB+0x8>)
   b6dd2:	2200      	movs	r2, #0
   b6dd4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6dd6:	4770      	bx	lr
   b6dd8:	2003e6dc 	.word	0x2003e6dc

000b6ddc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6ddc:	2100      	movs	r1, #0
   b6dde:	f7ff bb81 	b.w	b64e4 <hal_spi_release>

000b6de2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6de2:	2100      	movs	r1, #0
   b6de4:	f7ff bb76 	b.w	b64d4 <hal_spi_acquire>

000b6de8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6de8:	b510      	push	{r4, lr}
   b6dea:	4604      	mov	r4, r0
   b6dec:	4608      	mov	r0, r1
{
    _spi = spi;
   b6dee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6df0:	f7ff fb50 	bl	b6494 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6df4:	2300      	movs	r3, #0
   b6df6:	6063      	str	r3, [r4, #4]
}
   b6df8:	4620      	mov	r0, r4
   b6dfa:	bd10      	pop	{r4, pc}

000b6dfc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6dfc:	b513      	push	{r0, r1, r4, lr}
   b6dfe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6e00:	7800      	ldrb	r0, [r0, #0]
   b6e02:	f7ff ffee 	bl	b6de2 <_ZN8SPIClass4lockEv.isra.0>
   b6e06:	b958      	cbnz	r0, b6e20 <_ZN8SPIClass5beginEv+0x24>
   b6e08:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6e0a:	9001      	str	r0, [sp, #4]
   b6e0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6e10:	f7ff fb30 	bl	b6474 <hal_spi_begin>
        unlock();
   b6e14:	9801      	ldr	r0, [sp, #4]
    }
}
   b6e16:	b002      	add	sp, #8
   b6e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6e1c:	f7ff bfde 	b.w	b6ddc <_ZN8SPIClass6unlockEv.isra.0>
   b6e20:	b002      	add	sp, #8
   b6e22:	bd10      	pop	{r4, pc}

000b6e24 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6e24:	7800      	ldrb	r0, [r0, #0]
   b6e26:	f7ff bfd9 	b.w	b6ddc <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6e2c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6e2c:	0840      	lsrs	r0, r0, #1
{
   b6e2e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6e30:	6018      	str	r0, [r3, #0]
   b6e32:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6e34:	6818      	ldr	r0, [r3, #0]
   b6e36:	4288      	cmp	r0, r1
   b6e38:	b2e5      	uxtb	r5, r4
   b6e3a:	d906      	bls.n	b6e4a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6e3c:	3401      	adds	r4, #1
   b6e3e:	2c08      	cmp	r4, #8
   b6e40:	d002      	beq.n	b6e48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6e42:	0840      	lsrs	r0, r0, #1
   b6e44:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6e46:	e7f5      	b.n	b6e34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6e48:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6e4c:	5d5b      	ldrb	r3, [r3, r5]
   b6e4e:	7013      	strb	r3, [r2, #0]
}
   b6e50:	bd30      	pop	{r4, r5, pc}
   b6e52:	bf00      	nop
   b6e54:	000b8dca 	.word	0x000b8dca

000b6e58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e5c:	4606      	mov	r6, r0
   b6e5e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6e60:	7800      	ldrb	r0, [r0, #0]
{
   b6e62:	460c      	mov	r4, r1
    CHECK(lock());
   b6e64:	f7ff ffbd 	bl	b6de2 <_ZN8SPIClass4lockEv.isra.0>
   b6e68:	2800      	cmp	r0, #0
   b6e6a:	db1b      	blt.n	b6ea4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6e6c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6e6e:	2214      	movs	r2, #20
   b6e70:	2100      	movs	r1, #0
   b6e72:	a809      	add	r0, sp, #36	; 0x24
   b6e74:	f000 fb44 	bl	b7500 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6e78:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6e7a:	2200      	movs	r2, #0
   b6e7c:	a909      	add	r1, sp, #36	; 0x24
   b6e7e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6e80:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6e84:	f7ff fb16 	bl	b64b4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6e88:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6e8c:	b113      	cbz	r3, b6e94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6e8e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6e92:	b155      	cbz	r5, b6eaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6e94:	2700      	movs	r7, #0
   b6e96:	46b9      	mov	r9, r7
   b6e98:	46b8      	mov	r8, r7
   b6e9a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6e9c:	7923      	ldrb	r3, [r4, #4]
   b6e9e:	b15d      	cbz	r5, b6eb8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6ea0:	b1c3      	cbz	r3, b6ed4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6ea2:	2000      	movs	r0, #0
}
   b6ea4:	b00f      	add	sp, #60	; 0x3c
   b6ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6eaa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6eae:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6eb2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6eb6:	e7f1      	b.n	b6e9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6eb8:	2b00      	cmp	r3, #0
   b6eba:	d135      	bne.n	b6f28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6ebc:	68a3      	ldr	r3, [r4, #8]
   b6ebe:	4543      	cmp	r3, r8
   b6ec0:	d108      	bne.n	b6ed4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6ec2:	f88d 9020 	strb.w	r9, [sp, #32]
   b6ec6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6eca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6ece:	89a3      	ldrh	r3, [r4, #12]
   b6ed0:	429a      	cmp	r2, r3
   b6ed2:	d0e6      	beq.n	b6ea2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6ed4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6ed6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6ed8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6edc:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6ede:	ab04      	add	r3, sp, #16
   b6ee0:	f10d 020f 	add.w	r2, sp, #15
   b6ee4:	f7ff ffa2 	bl	b6e2c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6ee8:	7921      	ldrb	r1, [r4, #4]
   b6eea:	b985      	cbnz	r5, b6f0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6eec:	b989      	cbnz	r1, b6f12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6eee:	68a3      	ldr	r3, [r4, #8]
   b6ef0:	4543      	cmp	r3, r8
   b6ef2:	d30e      	bcc.n	b6f12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6ef4:	f88d 9020 	strb.w	r9, [sp, #32]
   b6ef8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6efc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6f00:	89a3      	ldrh	r3, [r4, #12]
   b6f02:	429a      	cmp	r2, r3
   b6f04:	d105      	bne.n	b6f12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6f06:	9b04      	ldr	r3, [sp, #16]
   b6f08:	4543      	cmp	r3, r8
   b6f0a:	d102      	bne.n	b6f12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6f0c:	e7c9      	b.n	b6ea2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6f0e:	2900      	cmp	r1, #0
   b6f10:	d1f9      	bne.n	b6f06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6f12:	2300      	movs	r3, #0
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	7b63      	ldrb	r3, [r4, #13]
   b6f18:	9300      	str	r3, [sp, #0]
   b6f1a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6f1e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6f20:	7830      	ldrb	r0, [r6, #0]
   b6f22:	f7ff facf 	bl	b64c4 <hal_spi_set_settings>
   b6f26:	e7bc      	b.n	b6ea2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6f28:	e9cd 5500 	strd	r5, r5, [sp]
   b6f2c:	462b      	mov	r3, r5
   b6f2e:	462a      	mov	r2, r5
   b6f30:	2101      	movs	r1, #1
   b6f32:	e7f5      	b.n	b6f20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6f34 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6f34:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6f36:	7800      	ldrb	r0, [r0, #0]
   b6f38:	f7ff faa4 	bl	b6484 <hal_spi_transfer>
}
   b6f3c:	b2c0      	uxtb	r0, r0
   b6f3e:	bd08      	pop	{r3, pc}

000b6f40 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6f40:	4b05      	ldr	r3, [pc, #20]	; (b6f58 <_GLOBAL__sub_I_System+0x18>)
   b6f42:	2202      	movs	r2, #2
   b6f44:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6f46:	4b05      	ldr	r3, [pc, #20]	; (b6f5c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6f48:	4a05      	ldr	r2, [pc, #20]	; (b6f60 <_GLOBAL__sub_I_System+0x20>)
   b6f4a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6f4c:	2000      	movs	r0, #0
   b6f4e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6f52:	f7ff bb4f 	b.w	b65f4 <set_system_mode>
   b6f56:	bf00      	nop
   b6f58:	2003e6f8 	.word	0x2003e6f8
   b6f5c:	2003e6ec 	.word	0x2003e6ec
   b6f60:	ffff0000 	.word	0xffff0000

000b6f64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6f64:	4b02      	ldr	r3, [pc, #8]	; (b6f70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6f66:	681a      	ldr	r2, [r3, #0]
   b6f68:	4b02      	ldr	r3, [pc, #8]	; (b6f74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6f6a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6f6c:	4770      	bx	lr
   b6f6e:	bf00      	nop
   b6f70:	2003e5cc 	.word	0x2003e5cc
   b6f74:	2003e6fc 	.word	0x2003e6fc

000b6f78 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6f78:	4770      	bx	lr

000b6f7a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6f7a:	7441      	strb	r1, [r0, #17]
}
   b6f7c:	4770      	bx	lr

000b6f7e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6f7e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6f80:	7c00      	ldrb	r0, [r0, #16]
   b6f82:	f7ff fae7 	bl	b6554 <hal_usart_available_data_for_write>
}
   b6f86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6f8a:	bd08      	pop	{r3, pc}

000b6f8c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6f8c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6f8e:	7c00      	ldrb	r0, [r0, #16]
   b6f90:	f7ff fab8 	bl	b6504 <hal_usart_available>
}
   b6f94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6f98:	bd08      	pop	{r3, pc}

000b6f9a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6f9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6f9c:	7c00      	ldrb	r0, [r0, #16]
   b6f9e:	f7ff fac1 	bl	b6524 <hal_usart_peek>
}
   b6fa2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fa6:	bd08      	pop	{r3, pc}

000b6fa8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6fa8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6faa:	7c00      	ldrb	r0, [r0, #16]
   b6fac:	f7ff fab2 	bl	b6514 <hal_usart_read>
}
   b6fb0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fb4:	bd08      	pop	{r3, pc}

000b6fb6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6fb6:	7c00      	ldrb	r0, [r0, #16]
   b6fb8:	f7ff babc 	b.w	b6534 <hal_usart_flush>

000b6fbc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fbe:	7c45      	ldrb	r5, [r0, #17]
{
   b6fc0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fc2:	b12d      	cbz	r5, b6fd0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6fc4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6fc6:	b003      	add	sp, #12
   b6fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6fcc:	f7ff ba92 	b.w	b64f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fd0:	7c00      	ldrb	r0, [r0, #16]
   b6fd2:	9101      	str	r1, [sp, #4]
   b6fd4:	f7ff fabe 	bl	b6554 <hal_usart_available_data_for_write>
   b6fd8:	2800      	cmp	r0, #0
   b6fda:	9901      	ldr	r1, [sp, #4]
   b6fdc:	dcf2      	bgt.n	b6fc4 <_ZN11USARTSerial5writeEh+0x8>
}
   b6fde:	4628      	mov	r0, r5
   b6fe0:	b003      	add	sp, #12
   b6fe2:	bd30      	pop	{r4, r5, pc}

000b6fe4 <_ZN11USARTSerialD0Ev>:
   b6fe4:	b510      	push	{r4, lr}
   b6fe6:	2114      	movs	r1, #20
   b6fe8:	4604      	mov	r4, r0
   b6fea:	f7fd fd10 	bl	b4a0e <_ZdlPvj>
   b6fee:	4620      	mov	r0, r4
   b6ff0:	bd10      	pop	{r4, pc}
	...

000b6ff4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6ff4:	b510      	push	{r4, lr}
   b6ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6ffa:	4604      	mov	r4, r0
   b6ffc:	4608      	mov	r0, r1
   b6ffe:	4611      	mov	r1, r2
   b7000:	2200      	movs	r2, #0
   b7002:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7006:	4b04      	ldr	r3, [pc, #16]	; (b7018 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7008:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b700a:	2301      	movs	r3, #1
  _serial = serial;
   b700c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b700e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7010:	f7ff faa8 	bl	b6564 <hal_usart_init_ex>
}
   b7014:	4620      	mov	r0, r4
   b7016:	bd10      	pop	{r4, pc}
   b7018:	000b8df8 	.word	0x000b8df8

000b701c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b701c:	7441      	strb	r1, [r0, #17]
}
   b701e:	4770      	bx	lr

000b7020 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7020:	4770      	bx	lr

000b7022 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7022:	4770      	bx	lr

000b7024 <_ZN9USBSerial4readEv>:
{
   b7024:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7026:	2100      	movs	r1, #0
   b7028:	7c00      	ldrb	r0, [r0, #16]
   b702a:	f7ff fac3 	bl	b65b4 <HAL_USB_USART_Receive_Data>
}
   b702e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7032:	bd08      	pop	{r3, pc}

000b7034 <_ZN9USBSerial4peekEv>:
{
   b7034:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7036:	2101      	movs	r1, #1
   b7038:	7c00      	ldrb	r0, [r0, #16]
   b703a:	f7ff fabb 	bl	b65b4 <HAL_USB_USART_Receive_Data>
}
   b703e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7042:	bd08      	pop	{r3, pc}

000b7044 <_ZN9USBSerial17availableForWriteEv>:
{
   b7044:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7046:	7c00      	ldrb	r0, [r0, #16]
   b7048:	f7ff faac 	bl	b65a4 <HAL_USB_USART_Available_Data_For_Write>
}
   b704c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7050:	bd08      	pop	{r3, pc}

000b7052 <_ZN9USBSerial9availableEv>:
{
   b7052:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7054:	7c00      	ldrb	r0, [r0, #16]
   b7056:	f7ff fa9d 	bl	b6594 <HAL_USB_USART_Available_Data>
}
   b705a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b705e:	bd08      	pop	{r3, pc}

000b7060 <_ZN9USBSerial5writeEh>:
{
   b7060:	b513      	push	{r0, r1, r4, lr}
   b7062:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7064:	7c00      	ldrb	r0, [r0, #16]
{
   b7066:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7068:	f7ff fa9c 	bl	b65a4 <HAL_USB_USART_Available_Data_For_Write>
   b706c:	2800      	cmp	r0, #0
   b706e:	9901      	ldr	r1, [sp, #4]
   b7070:	dc01      	bgt.n	b7076 <_ZN9USBSerial5writeEh+0x16>
   b7072:	7c60      	ldrb	r0, [r4, #17]
   b7074:	b120      	cbz	r0, b7080 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7076:	7c20      	ldrb	r0, [r4, #16]
   b7078:	f7ff faa4 	bl	b65c4 <HAL_USB_USART_Send_Data>
   b707c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7080:	b002      	add	sp, #8
   b7082:	bd10      	pop	{r4, pc}

000b7084 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7084:	7c00      	ldrb	r0, [r0, #16]
   b7086:	f7ff baa5 	b.w	b65d4 <HAL_USB_USART_Flush_Data>

000b708a <_ZN9USBSerialD0Ev>:
   b708a:	b510      	push	{r4, lr}
   b708c:	2114      	movs	r1, #20
   b708e:	4604      	mov	r4, r0
   b7090:	f7fd fcbd 	bl	b4a0e <_ZdlPvj>
   b7094:	4620      	mov	r0, r4
   b7096:	bd10      	pop	{r4, pc}

000b7098 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7098:	b510      	push	{r4, lr}
   b709a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b709e:	4604      	mov	r4, r0
   b70a0:	4608      	mov	r0, r1
   b70a2:	2100      	movs	r1, #0
   b70a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b70a8:	4b04      	ldr	r3, [pc, #16]	; (b70bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b70aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b70ac:	2301      	movs	r3, #1
  _serial = serial;
   b70ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b70b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b70b2:	4611      	mov	r1, r2
   b70b4:	f7ff fa5e 	bl	b6574 <HAL_USB_USART_Init>
}
   b70b8:	4620      	mov	r0, r4
   b70ba:	bd10      	pop	{r4, pc}
   b70bc:	000b8e28 	.word	0x000b8e28

000b70c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b70c0:	7c00      	ldrb	r0, [r0, #16]
   b70c2:	2200      	movs	r2, #0
   b70c4:	f7ff ba5e 	b.w	b6584 <HAL_USB_USART_Begin>

000b70c8 <_Z19acquireSerialBufferv>:
{
   b70c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b70ca:	2214      	movs	r2, #20
{
   b70cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b70ce:	2100      	movs	r1, #0
   b70d0:	f000 fa16 	bl	b7500 <memset>
}
   b70d4:	4620      	mov	r0, r4
   b70d6:	bd10      	pop	{r4, pc}

000b70d8 <_Z16_fetch_usbserialv>:
{
   b70d8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b70da:	4c0f      	ldr	r4, [pc, #60]	; (b7118 <_Z16_fetch_usbserialv+0x40>)
{
   b70dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b70de:	a803      	add	r0, sp, #12
   b70e0:	f7ff fff2 	bl	b70c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b70e4:	7821      	ldrb	r1, [r4, #0]
   b70e6:	f3bf 8f5b 	dmb	ish
   b70ea:	f011 0101 	ands.w	r1, r1, #1
   b70ee:	d10f      	bne.n	b7110 <_Z16_fetch_usbserialv+0x38>
   b70f0:	4620      	mov	r0, r4
   b70f2:	9101      	str	r1, [sp, #4]
   b70f4:	f7fd fc9a 	bl	b4a2c <__cxa_guard_acquire>
   b70f8:	9901      	ldr	r1, [sp, #4]
   b70fa:	b148      	cbz	r0, b7110 <_Z16_fetch_usbserialv+0x38>
   b70fc:	aa03      	add	r2, sp, #12
   b70fe:	4807      	ldr	r0, [pc, #28]	; (b711c <_Z16_fetch_usbserialv+0x44>)
   b7100:	f7ff ffca 	bl	b7098 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7104:	4620      	mov	r0, r4
   b7106:	f7fd fc96 	bl	b4a36 <__cxa_guard_release>
   b710a:	4805      	ldr	r0, [pc, #20]	; (b7120 <_Z16_fetch_usbserialv+0x48>)
   b710c:	f000 f9e4 	bl	b74d8 <atexit>
	return _usbserial;
}
   b7110:	4802      	ldr	r0, [pc, #8]	; (b711c <_Z16_fetch_usbserialv+0x44>)
   b7112:	b008      	add	sp, #32
   b7114:	bd10      	pop	{r4, pc}
   b7116:	bf00      	nop
   b7118:	2003e700 	.word	0x2003e700
   b711c:	2003e704 	.word	0x2003e704
   b7120:	000b7021 	.word	0x000b7021

000b7124 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7124:	2200      	movs	r2, #0
   b7126:	6840      	ldr	r0, [r0, #4]
   b7128:	4611      	mov	r1, r2
   b712a:	f7ff baa7 	b.w	b667c <network_ready>

000b712e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b712e:	2200      	movs	r2, #0
   b7130:	6840      	ldr	r0, [r0, #4]
   b7132:	4611      	mov	r1, r2
   b7134:	f7ff bac2 	b.w	b66bc <network_listening>

000b7138 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7138:	2200      	movs	r2, #0
   b713a:	6840      	ldr	r0, [r0, #4]
   b713c:	4611      	mov	r1, r2
   b713e:	f7ff bacd 	b.w	b66dc <network_get_listen_timeout>

000b7142 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7142:	6840      	ldr	r0, [r0, #4]
   b7144:	2200      	movs	r2, #0
   b7146:	f7ff bac1 	b.w	b66cc <network_set_listen_timeout>

000b714a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b714a:	6840      	ldr	r0, [r0, #4]
   b714c:	2200      	movs	r2, #0
   b714e:	f081 0101 	eor.w	r1, r1, #1
   b7152:	f7ff baab 	b.w	b66ac <network_listen>

000b7156 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7156:	2300      	movs	r3, #0
   b7158:	6840      	ldr	r0, [r0, #4]
   b715a:	461a      	mov	r2, r3
   b715c:	4619      	mov	r1, r3
   b715e:	f7ff ba9d 	b.w	b669c <network_off>

000b7162 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7162:	2300      	movs	r3, #0
   b7164:	6840      	ldr	r0, [r0, #4]
   b7166:	461a      	mov	r2, r3
   b7168:	4619      	mov	r1, r3
   b716a:	f7ff ba8f 	b.w	b668c <network_on>

000b716e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b716e:	2200      	movs	r2, #0
   b7170:	6840      	ldr	r0, [r0, #4]
   b7172:	4611      	mov	r1, r2
   b7174:	f7ff ba72 	b.w	b665c <network_connecting>

000b7178 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7178:	6840      	ldr	r0, [r0, #4]
   b717a:	2200      	movs	r2, #0
   b717c:	2102      	movs	r1, #2
   b717e:	f7ff ba75 	b.w	b666c <network_disconnect>

000b7182 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7182:	2300      	movs	r3, #0
   b7184:	6840      	ldr	r0, [r0, #4]
   b7186:	461a      	mov	r2, r3
   b7188:	f7ff ba60 	b.w	b664c <network_connect>

000b718c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b718c:	4b02      	ldr	r3, [pc, #8]	; (b7198 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b718e:	2204      	movs	r2, #4
   b7190:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7192:	4a02      	ldr	r2, [pc, #8]	; (b719c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7194:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7196:	4770      	bx	lr
   b7198:	2003e718 	.word	0x2003e718
   b719c:	000b8e58 	.word	0x000b8e58

000b71a0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b71a0:	4b01      	ldr	r3, [pc, #4]	; (b71a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b71a2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b71a4:	4770      	bx	lr
   b71a6:	bf00      	nop
   b71a8:	2003e5d0 	.word	0x2003e5d0

000b71ac <serialEventRun>:
{
   b71ac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b71ae:	4b0b      	ldr	r3, [pc, #44]	; (b71dc <serialEventRun+0x30>)
   b71b0:	b143      	cbz	r3, b71c4 <serialEventRun+0x18>
   b71b2:	f7ff ff91 	bl	b70d8 <_Z16_fetch_usbserialv>
   b71b6:	6803      	ldr	r3, [r0, #0]
   b71b8:	691b      	ldr	r3, [r3, #16]
   b71ba:	4798      	blx	r3
   b71bc:	2800      	cmp	r0, #0
   b71be:	dd01      	ble.n	b71c4 <serialEventRun+0x18>
        serialEvent();
   b71c0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b71c4:	4b06      	ldr	r3, [pc, #24]	; (b71e0 <serialEventRun+0x34>)
   b71c6:	b143      	cbz	r3, b71da <serialEventRun+0x2e>
   b71c8:	f000 f960 	bl	b748c <_Z22__fetch_global_Serial1v>
   b71cc:	6803      	ldr	r3, [r0, #0]
   b71ce:	691b      	ldr	r3, [r3, #16]
   b71d0:	4798      	blx	r3
   b71d2:	2800      	cmp	r0, #0
   b71d4:	dd01      	ble.n	b71da <serialEventRun+0x2e>
        serialEvent1();
   b71d6:	f3af 8000 	nop.w
}
   b71da:	bd08      	pop	{r3, pc}
	...

000b71e4 <_post_loop>:
{
   b71e4:	b508      	push	{r3, lr}
	serialEventRun();
   b71e6:	f7ff ffe1 	bl	b71ac <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b71ea:	f7ff f8a3 	bl	b6334 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b71ee:	4b01      	ldr	r3, [pc, #4]	; (b71f4 <_post_loop+0x10>)
   b71f0:	6018      	str	r0, [r3, #0]
}
   b71f2:	bd08      	pop	{r3, pc}
   b71f4:	2003e728 	.word	0x2003e728

000b71f8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b71f8:	4805      	ldr	r0, [pc, #20]	; (b7210 <_Z33system_initialize_user_backup_ramv+0x18>)
   b71fa:	4a06      	ldr	r2, [pc, #24]	; (b7214 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b71fc:	4906      	ldr	r1, [pc, #24]	; (b7218 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b71fe:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7200:	1a12      	subs	r2, r2, r0
   b7202:	f000 f96f 	bl	b74e4 <memcpy>
    __backup_sram_signature = signature;
   b7206:	4b05      	ldr	r3, [pc, #20]	; (b721c <_Z33system_initialize_user_backup_ramv+0x24>)
   b7208:	4a05      	ldr	r2, [pc, #20]	; (b7220 <_Z33system_initialize_user_backup_ramv+0x28>)
   b720a:	601a      	str	r2, [r3, #0]
}
   b720c:	bd08      	pop	{r3, pc}
   b720e:	bf00      	nop
   b7210:	2003f400 	.word	0x2003f400
   b7214:	2003f404 	.word	0x2003f404
   b7218:	000b8fc4 	.word	0x000b8fc4
   b721c:	2003f400 	.word	0x2003f400
   b7220:	9a271c1e 	.word	0x9a271c1e

000b7224 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7224:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7226:	2300      	movs	r3, #0
   b7228:	9300      	str	r3, [sp, #0]
   b722a:	461a      	mov	r2, r3
   b722c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7230:	f7ff f9fa 	bl	b6628 <system_ctrl_set_result>
}
   b7234:	b003      	add	sp, #12
   b7236:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b723c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b723c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b723e:	8843      	ldrh	r3, [r0, #2]
   b7240:	2b0a      	cmp	r3, #10
   b7242:	d008      	beq.n	b7256 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7244:	2b50      	cmp	r3, #80	; 0x50
   b7246:	d10b      	bne.n	b7260 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7248:	4b09      	ldr	r3, [pc, #36]	; (b7270 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b724a:	681b      	ldr	r3, [r3, #0]
   b724c:	b14b      	cbz	r3, b7262 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b724e:	b003      	add	sp, #12
   b7250:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7254:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7256:	f7ff ffe5 	bl	b7224 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b725a:	b003      	add	sp, #12
   b725c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7260:	2300      	movs	r3, #0
   b7262:	9300      	str	r3, [sp, #0]
   b7264:	461a      	mov	r2, r3
   b7266:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b726a:	f7ff f9dd 	bl	b6628 <system_ctrl_set_result>
}
   b726e:	e7f4      	b.n	b725a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7270:	2003e724 	.word	0x2003e724

000b7274 <module_user_init_hook>:
{
   b7274:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7276:	4812      	ldr	r0, [pc, #72]	; (b72c0 <module_user_init_hook+0x4c>)
   b7278:	2100      	movs	r1, #0
   b727a:	f7ff fa5f 	bl	b673c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b727e:	4b11      	ldr	r3, [pc, #68]	; (b72c4 <module_user_init_hook+0x50>)
   b7280:	681a      	ldr	r2, [r3, #0]
   b7282:	4b11      	ldr	r3, [pc, #68]	; (b72c8 <module_user_init_hook+0x54>)
   b7284:	429a      	cmp	r2, r3
   b7286:	4b11      	ldr	r3, [pc, #68]	; (b72cc <module_user_init_hook+0x58>)
   b7288:	bf0c      	ite	eq
   b728a:	2201      	moveq	r2, #1
   b728c:	2200      	movne	r2, #0
   b728e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7290:	d001      	beq.n	b7296 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7292:	f7ff ffb1 	bl	b71f8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7296:	f7ff f83d 	bl	b6314 <HAL_RNG_GetRandomNumber>
   b729a:	4604      	mov	r4, r0
    srand(seed);
   b729c:	f000 f938 	bl	b7510 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b72a0:	4b0b      	ldr	r3, [pc, #44]	; (b72d0 <module_user_init_hook+0x5c>)
   b72a2:	b113      	cbz	r3, b72aa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b72a4:	4620      	mov	r0, r4
   b72a6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b72aa:	2100      	movs	r1, #0
   b72ac:	4808      	ldr	r0, [pc, #32]	; (b72d0 <module_user_init_hook+0x5c>)
   b72ae:	f7ff f9c5 	bl	b663c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b72b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b72b6:	4807      	ldr	r0, [pc, #28]	; (b72d4 <module_user_init_hook+0x60>)
   b72b8:	2100      	movs	r1, #0
   b72ba:	f7ff b9ab 	b.w	b6614 <system_ctrl_set_app_request_handler>
   b72be:	bf00      	nop
   b72c0:	000b71a1 	.word	0x000b71a1
   b72c4:	2003f400 	.word	0x2003f400
   b72c8:	9a271c1e 	.word	0x9a271c1e
   b72cc:	2003e720 	.word	0x2003e720
   b72d0:	00000000 	.word	0x00000000
   b72d4:	000b723d 	.word	0x000b723d

000b72d8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b72d8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b72da:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b72dc:	d902      	bls.n	b72e4 <pinAvailable+0xc>
    return false;
   b72de:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b72e0:	b002      	add	sp, #8
   b72e2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b72e4:	f1a0 030b 	sub.w	r3, r0, #11
   b72e8:	2b02      	cmp	r3, #2
   b72ea:	d81a      	bhi.n	b7322 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b72ec:	4c17      	ldr	r4, [pc, #92]	; (b734c <pinAvailable+0x74>)
   b72ee:	7821      	ldrb	r1, [r4, #0]
   b72f0:	f3bf 8f5b 	dmb	ish
   b72f4:	f011 0101 	ands.w	r1, r1, #1
   b72f8:	d10b      	bne.n	b7312 <pinAvailable+0x3a>
   b72fa:	4620      	mov	r0, r4
   b72fc:	9101      	str	r1, [sp, #4]
   b72fe:	f7fd fb95 	bl	b4a2c <__cxa_guard_acquire>
   b7302:	9901      	ldr	r1, [sp, #4]
   b7304:	b128      	cbz	r0, b7312 <pinAvailable+0x3a>
   b7306:	4812      	ldr	r0, [pc, #72]	; (b7350 <pinAvailable+0x78>)
   b7308:	f7ff fd6e 	bl	b6de8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b730c:	4620      	mov	r0, r4
   b730e:	f7fd fb92 	bl	b4a36 <__cxa_guard_release>
   b7312:	4b0f      	ldr	r3, [pc, #60]	; (b7350 <pinAvailable+0x78>)
   b7314:	7818      	ldrb	r0, [r3, #0]
   b7316:	f7ff f8c5 	bl	b64a4 <hal_spi_is_enabled>
   b731a:	2800      	cmp	r0, #0
   b731c:	d1df      	bne.n	b72de <pinAvailable+0x6>
  return true; // 'pin' is available
   b731e:	2001      	movs	r0, #1
   b7320:	e7de      	b.n	b72e0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7322:	2801      	cmp	r0, #1
   b7324:	d809      	bhi.n	b733a <pinAvailable+0x62>
   b7326:	f000 f871 	bl	b740c <_Z19__fetch_global_Wirev>
   b732a:	2100      	movs	r1, #0
   b732c:	7c00      	ldrb	r0, [r0, #16]
   b732e:	f7ff f871 	bl	b6414 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7332:	f080 0001 	eor.w	r0, r0, #1
   b7336:	b2c0      	uxtb	r0, r0
   b7338:	e7d2      	b.n	b72e0 <pinAvailable+0x8>
   b733a:	3809      	subs	r0, #9
   b733c:	2801      	cmp	r0, #1
   b733e:	d8ee      	bhi.n	b731e <pinAvailable+0x46>
   b7340:	f000 f8a4 	bl	b748c <_Z22__fetch_global_Serial1v>
   b7344:	7c00      	ldrb	r0, [r0, #16]
   b7346:	f7ff f8fd 	bl	b6544 <hal_usart_is_enabled>
   b734a:	e7f2      	b.n	b7332 <pinAvailable+0x5a>
   b734c:	2003e6b8 	.word	0x2003e6b8
   b7350:	2003e6bc 	.word	0x2003e6bc

000b7354 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7354:	2823      	cmp	r0, #35	; 0x23
{
   b7356:	b538      	push	{r3, r4, r5, lr}
   b7358:	4604      	mov	r4, r0
   b735a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b735c:	d80a      	bhi.n	b7374 <pinMode+0x20>
   b735e:	29ff      	cmp	r1, #255	; 0xff
   b7360:	d008      	beq.n	b7374 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7362:	f7ff ffb9 	bl	b72d8 <pinAvailable>
   b7366:	b128      	cbz	r0, b7374 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7368:	4629      	mov	r1, r5
   b736a:	4620      	mov	r0, r4
}
   b736c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7370:	f7fe bff0 	b.w	b6354 <hal_gpio_mode>
}
   b7374:	bd38      	pop	{r3, r4, r5, pc}

000b7376 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7376:	b538      	push	{r3, r4, r5, lr}
   b7378:	4604      	mov	r4, r0
   b737a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b737c:	f7fe fff2 	bl	b6364 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7380:	28ff      	cmp	r0, #255	; 0xff
   b7382:	d010      	beq.n	b73a6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7384:	2806      	cmp	r0, #6
   b7386:	d804      	bhi.n	b7392 <digitalWrite+0x1c>
   b7388:	234d      	movs	r3, #77	; 0x4d
   b738a:	fa23 f000 	lsr.w	r0, r3, r0
   b738e:	07c3      	lsls	r3, r0, #31
   b7390:	d409      	bmi.n	b73a6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7392:	4620      	mov	r0, r4
   b7394:	f7ff ffa0 	bl	b72d8 <pinAvailable>
   b7398:	b128      	cbz	r0, b73a6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b739a:	4629      	mov	r1, r5
   b739c:	4620      	mov	r0, r4
}
   b739e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b73a2:	f7fe bfe7 	b.w	b6374 <hal_gpio_write>
}
   b73a6:	bd38      	pop	{r3, r4, r5, pc}

000b73a8 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b73a8:	280d      	cmp	r0, #13
{
   b73aa:	b510      	push	{r4, lr}
   b73ac:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b73ae:	bf9c      	itt	ls
   b73b0:	340e      	addls	r4, #14
   b73b2:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b73b4:	4620      	mov	r0, r4
   b73b6:	f7ff ff8f 	bl	b72d8 <pinAvailable>
   b73ba:	b150      	cbz	r0, b73d2 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b73bc:	2103      	movs	r1, #3
   b73be:	4620      	mov	r0, r4
   b73c0:	f7fe ffc0 	bl	b6344 <hal_pin_validate_function>
   b73c4:	2803      	cmp	r0, #3
   b73c6:	d104      	bne.n	b73d2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b73c8:	4620      	mov	r0, r4
}
   b73ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b73ce:	f7fe bfd9 	b.w	b6384 <hal_adc_read>
}
   b73d2:	2000      	movs	r0, #0
   b73d4:	bd10      	pop	{r4, pc}

000b73d6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b73d6:	4770      	bx	lr

000b73d8 <_Z17acquireWireBufferv>:
{
   b73d8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b73da:	4b0a      	ldr	r3, [pc, #40]	; (b7404 <_Z17acquireWireBufferv+0x2c>)
   b73dc:	6003      	str	r3, [r0, #0]
   b73de:	2301      	movs	r3, #1
{
   b73e0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b73e2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b73e4:	4908      	ldr	r1, [pc, #32]	; (b7408 <_Z17acquireWireBufferv+0x30>)
   b73e6:	2020      	movs	r0, #32
   b73e8:	f000 f874 	bl	b74d4 <_ZnajRKSt9nothrow_t>
	};
   b73ec:	2520      	movs	r5, #32
   b73ee:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b73f0:	4905      	ldr	r1, [pc, #20]	; (b7408 <_Z17acquireWireBufferv+0x30>)
	};
   b73f2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b73f4:	4628      	mov	r0, r5
   b73f6:	f000 f86d 	bl	b74d4 <_ZnajRKSt9nothrow_t>
	};
   b73fa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b73fe:	4620      	mov	r0, r4
   b7400:	bd38      	pop	{r3, r4, r5, pc}
   b7402:	bf00      	nop
   b7404:	00010018 	.word	0x00010018
   b7408:	000b8e8c 	.word	0x000b8e8c

000b740c <_Z19__fetch_global_Wirev>:
{
   b740c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b740e:	4d0e      	ldr	r5, [pc, #56]	; (b7448 <_Z19__fetch_global_Wirev+0x3c>)
   b7410:	7829      	ldrb	r1, [r5, #0]
   b7412:	f3bf 8f5b 	dmb	ish
   b7416:	f011 0401 	ands.w	r4, r1, #1
{
   b741a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b741c:	d111      	bne.n	b7442 <_Z19__fetch_global_Wirev+0x36>
   b741e:	4628      	mov	r0, r5
   b7420:	f7fd fb04 	bl	b4a2c <__cxa_guard_acquire>
   b7424:	b168      	cbz	r0, b7442 <_Z19__fetch_global_Wirev+0x36>
   b7426:	4668      	mov	r0, sp
   b7428:	f7ff ffd6 	bl	b73d8 <_Z17acquireWireBufferv>
   b742c:	466a      	mov	r2, sp
   b742e:	4621      	mov	r1, r4
   b7430:	4806      	ldr	r0, [pc, #24]	; (b744c <_Z19__fetch_global_Wirev+0x40>)
   b7432:	f7ff fa01 	bl	b6838 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7436:	4628      	mov	r0, r5
   b7438:	f7fd fafd 	bl	b4a36 <__cxa_guard_release>
   b743c:	4804      	ldr	r0, [pc, #16]	; (b7450 <_Z19__fetch_global_Wirev+0x44>)
   b743e:	f000 f84b 	bl	b74d8 <atexit>
	return wire;
}
   b7442:	4802      	ldr	r0, [pc, #8]	; (b744c <_Z19__fetch_global_Wirev+0x40>)
   b7444:	b007      	add	sp, #28
   b7446:	bd30      	pop	{r4, r5, pc}
   b7448:	2003e72c 	.word	0x2003e72c
   b744c:	2003e730 	.word	0x2003e730
   b7450:	000b73d7 	.word	0x000b73d7

000b7454 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7454:	4770      	bx	lr
	...

000b7458 <_Z20acquireSerial1Bufferv>:
{
   b7458:	b538      	push	{r3, r4, r5, lr}
   b745a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b745c:	2514      	movs	r5, #20
   b745e:	462a      	mov	r2, r5
   b7460:	2100      	movs	r1, #0
   b7462:	f000 f84d 	bl	b7500 <memset>
   b7466:	8025      	strh	r5, [r4, #0]
   b7468:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b746a:	4907      	ldr	r1, [pc, #28]	; (b7488 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b746c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b746e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7470:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7472:	f000 f82f 	bl	b74d4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7476:	4904      	ldr	r1, [pc, #16]	; (b7488 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7478:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b747a:	4628      	mov	r0, r5
   b747c:	f000 f82a 	bl	b74d4 <_ZnajRKSt9nothrow_t>
    };
   b7480:	60e0      	str	r0, [r4, #12]
}
   b7482:	4620      	mov	r0, r4
   b7484:	bd38      	pop	{r3, r4, r5, pc}
   b7486:	bf00      	nop
   b7488:	000b8e8c 	.word	0x000b8e8c

000b748c <_Z22__fetch_global_Serial1v>:
{
   b748c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b748e:	4d0e      	ldr	r5, [pc, #56]	; (b74c8 <_Z22__fetch_global_Serial1v+0x3c>)
   b7490:	7829      	ldrb	r1, [r5, #0]
   b7492:	f3bf 8f5b 	dmb	ish
   b7496:	f011 0401 	ands.w	r4, r1, #1
{
   b749a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b749c:	d111      	bne.n	b74c2 <_Z22__fetch_global_Serial1v+0x36>
   b749e:	4628      	mov	r0, r5
   b74a0:	f7fd fac4 	bl	b4a2c <__cxa_guard_acquire>
   b74a4:	b168      	cbz	r0, b74c2 <_Z22__fetch_global_Serial1v+0x36>
   b74a6:	a801      	add	r0, sp, #4
   b74a8:	f7ff ffd6 	bl	b7458 <_Z20acquireSerial1Bufferv>
   b74ac:	aa01      	add	r2, sp, #4
   b74ae:	4621      	mov	r1, r4
   b74b0:	4806      	ldr	r0, [pc, #24]	; (b74cc <_Z22__fetch_global_Serial1v+0x40>)
   b74b2:	f7ff fd9f 	bl	b6ff4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b74b6:	4628      	mov	r0, r5
   b74b8:	f7fd fabd 	bl	b4a36 <__cxa_guard_release>
   b74bc:	4804      	ldr	r0, [pc, #16]	; (b74d0 <_Z22__fetch_global_Serial1v+0x44>)
   b74be:	f000 f80b 	bl	b74d8 <atexit>
    return serial1;
}
   b74c2:	4802      	ldr	r0, [pc, #8]	; (b74cc <_Z22__fetch_global_Serial1v+0x40>)
   b74c4:	b007      	add	sp, #28
   b74c6:	bd30      	pop	{r4, r5, pc}
   b74c8:	2003e744 	.word	0x2003e744
   b74cc:	2003e748 	.word	0x2003e748
   b74d0:	000b7455 	.word	0x000b7455

000b74d4 <_ZnajRKSt9nothrow_t>:
   b74d4:	f7fd ba99 	b.w	b4a0a <_Znaj>

000b74d8 <atexit>:
   b74d8:	2300      	movs	r3, #0
   b74da:	4601      	mov	r1, r0
   b74dc:	461a      	mov	r2, r3
   b74de:	4618      	mov	r0, r3
   b74e0:	f000 b844 	b.w	b756c <__register_exitproc>

000b74e4 <memcpy>:
   b74e4:	440a      	add	r2, r1
   b74e6:	4291      	cmp	r1, r2
   b74e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b74ec:	d100      	bne.n	b74f0 <memcpy+0xc>
   b74ee:	4770      	bx	lr
   b74f0:	b510      	push	{r4, lr}
   b74f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b74f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b74fa:	4291      	cmp	r1, r2
   b74fc:	d1f9      	bne.n	b74f2 <memcpy+0xe>
   b74fe:	bd10      	pop	{r4, pc}

000b7500 <memset>:
   b7500:	4402      	add	r2, r0
   b7502:	4603      	mov	r3, r0
   b7504:	4293      	cmp	r3, r2
   b7506:	d100      	bne.n	b750a <memset+0xa>
   b7508:	4770      	bx	lr
   b750a:	f803 1b01 	strb.w	r1, [r3], #1
   b750e:	e7f9      	b.n	b7504 <memset+0x4>

000b7510 <srand>:
   b7510:	b538      	push	{r3, r4, r5, lr}
   b7512:	4b10      	ldr	r3, [pc, #64]	; (b7554 <srand+0x44>)
   b7514:	681d      	ldr	r5, [r3, #0]
   b7516:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7518:	4604      	mov	r4, r0
   b751a:	b9b3      	cbnz	r3, b754a <srand+0x3a>
   b751c:	2018      	movs	r0, #24
   b751e:	f7ff f8f5 	bl	b670c <malloc>
   b7522:	4602      	mov	r2, r0
   b7524:	63a8      	str	r0, [r5, #56]	; 0x38
   b7526:	b920      	cbnz	r0, b7532 <srand+0x22>
   b7528:	4b0b      	ldr	r3, [pc, #44]	; (b7558 <srand+0x48>)
   b752a:	480c      	ldr	r0, [pc, #48]	; (b755c <srand+0x4c>)
   b752c:	2142      	movs	r1, #66	; 0x42
   b752e:	f7ff f8fd 	bl	b672c <__assert_func>
   b7532:	490b      	ldr	r1, [pc, #44]	; (b7560 <srand+0x50>)
   b7534:	4b0b      	ldr	r3, [pc, #44]	; (b7564 <srand+0x54>)
   b7536:	e9c0 1300 	strd	r1, r3, [r0]
   b753a:	4b0b      	ldr	r3, [pc, #44]	; (b7568 <srand+0x58>)
   b753c:	6083      	str	r3, [r0, #8]
   b753e:	230b      	movs	r3, #11
   b7540:	8183      	strh	r3, [r0, #12]
   b7542:	2100      	movs	r1, #0
   b7544:	2001      	movs	r0, #1
   b7546:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b754a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b754c:	2200      	movs	r2, #0
   b754e:	611c      	str	r4, [r3, #16]
   b7550:	615a      	str	r2, [r3, #20]
   b7552:	bd38      	pop	{r3, r4, r5, pc}
   b7554:	2003e5d0 	.word	0x2003e5d0
   b7558:	000b8e8d 	.word	0x000b8e8d
   b755c:	000b8ea4 	.word	0x000b8ea4
   b7560:	abcd330e 	.word	0xabcd330e
   b7564:	e66d1234 	.word	0xe66d1234
   b7568:	0005deec 	.word	0x0005deec

000b756c <__register_exitproc>:
   b756c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7570:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b762c <__register_exitproc+0xc0>
   b7574:	4606      	mov	r6, r0
   b7576:	f8d8 0000 	ldr.w	r0, [r8]
   b757a:	461f      	mov	r7, r3
   b757c:	460d      	mov	r5, r1
   b757e:	4691      	mov	r9, r2
   b7580:	f000 f856 	bl	b7630 <__retarget_lock_acquire_recursive>
   b7584:	4b25      	ldr	r3, [pc, #148]	; (b761c <__register_exitproc+0xb0>)
   b7586:	681c      	ldr	r4, [r3, #0]
   b7588:	b934      	cbnz	r4, b7598 <__register_exitproc+0x2c>
   b758a:	4c25      	ldr	r4, [pc, #148]	; (b7620 <__register_exitproc+0xb4>)
   b758c:	601c      	str	r4, [r3, #0]
   b758e:	4b25      	ldr	r3, [pc, #148]	; (b7624 <__register_exitproc+0xb8>)
   b7590:	b113      	cbz	r3, b7598 <__register_exitproc+0x2c>
   b7592:	681b      	ldr	r3, [r3, #0]
   b7594:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7598:	6863      	ldr	r3, [r4, #4]
   b759a:	2b1f      	cmp	r3, #31
   b759c:	dd07      	ble.n	b75ae <__register_exitproc+0x42>
   b759e:	f8d8 0000 	ldr.w	r0, [r8]
   b75a2:	f000 f847 	bl	b7634 <__retarget_lock_release_recursive>
   b75a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b75aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b75ae:	b34e      	cbz	r6, b7604 <__register_exitproc+0x98>
   b75b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b75b4:	b988      	cbnz	r0, b75da <__register_exitproc+0x6e>
   b75b6:	4b1c      	ldr	r3, [pc, #112]	; (b7628 <__register_exitproc+0xbc>)
   b75b8:	b923      	cbnz	r3, b75c4 <__register_exitproc+0x58>
   b75ba:	f8d8 0000 	ldr.w	r0, [r8]
   b75be:	f000 f838 	bl	b7632 <__retarget_lock_release>
   b75c2:	e7f0      	b.n	b75a6 <__register_exitproc+0x3a>
   b75c4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b75c8:	f7ff f8a0 	bl	b670c <malloc>
   b75cc:	2800      	cmp	r0, #0
   b75ce:	d0f4      	beq.n	b75ba <__register_exitproc+0x4e>
   b75d0:	2300      	movs	r3, #0
   b75d2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b75d6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b75da:	6863      	ldr	r3, [r4, #4]
   b75dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b75e0:	2201      	movs	r2, #1
   b75e2:	409a      	lsls	r2, r3
   b75e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b75e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b75ec:	4313      	orrs	r3, r2
   b75ee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b75f2:	2e02      	cmp	r6, #2
   b75f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b75f8:	bf02      	ittt	eq
   b75fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b75fe:	4313      	orreq	r3, r2
   b7600:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7604:	6863      	ldr	r3, [r4, #4]
   b7606:	f8d8 0000 	ldr.w	r0, [r8]
   b760a:	1c5a      	adds	r2, r3, #1
   b760c:	3302      	adds	r3, #2
   b760e:	6062      	str	r2, [r4, #4]
   b7610:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7614:	f000 f80e 	bl	b7634 <__retarget_lock_release_recursive>
   b7618:	2000      	movs	r0, #0
   b761a:	e7c6      	b.n	b75aa <__register_exitproc+0x3e>
   b761c:	2003e7e8 	.word	0x2003e7e8
   b7620:	2003e75c 	.word	0x2003e75c
   b7624:	00000000 	.word	0x00000000
   b7628:	000b670d 	.word	0x000b670d
   b762c:	2003e634 	.word	0x2003e634

000b7630 <__retarget_lock_acquire_recursive>:
   b7630:	4770      	bx	lr

000b7632 <__retarget_lock_release>:
   b7632:	4770      	bx	lr

000b7634 <__retarget_lock_release_recursive>:
   b7634:	4770      	bx	lr

000b7636 <link_code_end>:
	...

000b7638 <dynalib_user>:
   b7638:	4995 000b 49d1 000b 49f9 000b 49fd 000b     .I...I...I...I..
   b7648:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7658:	7620 7269 7574 6c61 4500 7272 726f 203a      virtual.Error: 
   b7668:	5753 525f 5345 5445 2928 202e 5453 504f     SW_RESET(). STOP
   b7678:	0021 7245 6f72 3a72 7320 7465 635f 6e6f     !.Error: set_con
   b7688:	6974 756e 756f 5f73 6f6d 6564 2928 202e     tinuous_mode(). 
   b7698:	5453 504f 0021 7245 6f72 3a72 7220 6165     STOP!.Error: rea
   b76a8:	5f64 6574 706d 7265 7461 7275 2865 2e29     d_temperature().
   b76b8:	5320 4f54 2150 2000 0043 005a                STOP!. C.Z.

000b76c4 <_ZL12Org_01Glyphs>:
   b76c4:	0000 0000 0006 0001 0000 0501 0002 00fc     ................
   b76d4:	0001 0103 0004 00fc 0002 0505 0006 00fc     ................
   b76e4:	0006 0505 0006 00fc 000a 0505 0006 00fc     ................
   b76f4:	000e 0505 0006 00fc 0012 0101 0002 00fc     ................
   b7704:	0013 0502 0003 00fc 0015 0502 0003 00fc     ................
   b7714:	0017 0303 0004 00fd 0019 0303 0004 00fd     ................
   b7724:	001b 0201 0002 0000 001c 0104 0005 00fe     ................
   b7734:	001d 0101 0002 0000 001e 0505 0006 00fc     ................
   b7744:	0022 0505 0006 00fc 0026 0501 0002 00fc     ".......&.......
   b7754:	0027 0505 0006 00fc 002b 0505 0006 00fc     '.......+.......
   b7764:	002f 0505 0006 00fc 0033 0505 0006 00fc     /.......3.......
   b7774:	0037 0505 0006 00fc 003b 0505 0006 00fc     7.......;.......
   b7784:	003f 0505 0006 00fc 0043 0505 0006 00fc     ?.......C.......
   b7794:	0047 0401 0002 00fd 0048 0401 0002 00fd     G.......H.......
   b77a4:	0049 0503 0004 00fc 004b 0304 0005 00fd     I.......K.......
   b77b4:	004d 0503 0004 00fc 004f 0505 0006 00fc     M.......O.......
   b77c4:	0053 0505 0006 00fc 0057 0505 0006 00fc     S.......W.......
   b77d4:	005b 0505 0006 00fc 005f 0505 0006 00fc     [......._.......
   b77e4:	0063 0505 0006 00fc 0067 0505 0006 00fc     c.......g.......
   b77f4:	006b 0505 0006 00fc 006f 0505 0006 00fc     k.......o.......
   b7804:	0073 0505 0006 00fc 0077 0505 0006 00fc     s.......w.......
   b7814:	007b 0505 0006 00fc 007f 0505 0006 00fc     {...............
   b7824:	0083 0505 0006 00fc 0087 0505 0006 00fc     ................
   b7834:	008b 0505 0006 00fc 008f 0505 0006 00fc     ................
   b7844:	0093 0505 0006 00fc 0097 0505 0006 00fc     ................
   b7854:	009b 0505 0006 00fc 009f 0505 0006 00fc     ................
   b7864:	00a3 0505 0006 00fc 00a7 0505 0006 00fc     ................
   b7874:	00ab 0505 0006 00fc 00af 0505 0006 00fc     ................
   b7884:	00b3 0505 0006 00fc 00b7 0505 0006 00fc     ................
   b7894:	00bb 0505 0006 00fc 00bf 0502 0003 00fc     ................
   b78a4:	00c1 0505 0006 00fc 00c5 0502 0003 00fc     ................
   b78b4:	00c7 0203 0004 00fc 00c8 0105 0006 0001     ................
   b78c4:	00c9 0101 0002 00fc 00ca 0404 0005 00fd     ................
   b78d4:	00cc 0504 0005 00fc 00cf 0404 0005 00fd     ................
   b78e4:	00d1 0504 0005 00fc 00d4 0404 0005 00fd     ................
   b78f4:	00d6 0503 0004 00fc 00d8 0504 0005 00fd     ................
   b7904:	00db 0504 0005 00fc 00de 0401 0002 00fd     ................
   b7914:	00df 0502 0003 00fd 00e1 0504 0005 00fc     ................
   b7924:	00e4 0501 0002 00fc 00e5 0405 0006 00fd     ................
   b7934:	00e8 0404 0005 00fd 00ea 0404 0005 00fd     ................
   b7944:	00ec 0504 0005 00fd 00ef 0504 0005 00fd     ................
   b7954:	00f2 0404 0005 00fd 00f4 0404 0005 00fd     ................
   b7964:	00f6 0505 0006 00fc 00fa 0404 0005 00fd     ................
   b7974:	00fc 0404 0005 00fd 00fe 0405 0006 00fd     ................
   b7984:	0101 0404 0005 00fd 0103 0504 0005 00fd     ................
   b7994:	0106 0404 0005 00fd 0108 0503 0004 00fc     ................
   b79a4:	010a 0501 0002 00fc 010b 0503 0004 00fc     ................
   b79b4:	010d 0305 0006 00fd                         ........

000b79bc <_ZL13Org_01Bitmaps>:
   b79bc:	a0e8 d557 00f5 3efd 805f 8888 8088 bff4     ..W....>_.......
   b79cc:	802e 6a80 9540 aa80 5d80 c000 80f0 8808     ...j@....]......
   b79dc:	0088 63fc 801f f8f8 0f7f f880 1f7e 8c80     ...c........~...
   b79ec:	107e fc80 1f3e fc80 1f3f f880 1042 fc80     ~...>...?...B...
   b79fc:	1f7f fc80 1f7e 9080 2ab0 f022 88f0 f8a8     ....~....*".....
   b7a0c:	024e fd00 0f6f fc80 187f f480 1f7d fc00     N...o.......}...
   b7a1c:	0f21 f480 1f63 fc00 0f3f fc80 083f fc00     !...c...?...?...
   b7a2c:	1f2f 8c80 187f f980 4f08 7880 2f85 8d80     /........O.x./..
   b7a3c:	68b1 8480 0f21 fd80 5a6b fc80 1863 fc80     .h..!...kZ..c...
   b7a4c:	1f63 fc80 087f fc00 3f63 fc80 297f fc00     c.......c?...)..
   b7a5c:	1f3e f980 4208 8c00 1f63 8c80 a262 ad00     >....B..c...b...
   b7a6c:	5f6b 8a80 a888 8c80 4254 f800 0f7f ea80     k_......TB......
   b7a7c:	82c0 2008 d580 54c0 80f8 fff1 998f f8f0     ... ...T........
   b7a8c:	1f8f f099 8fff a46b 9ff9 8f10 9099 55f0     ......k........U
   b7a9c:	8ac0 90f9 fdf8 1063 99f9 9ff9 9ff9 f980     ......c.........
   b7aac:	209f 88f8 1f47 c827 0042 9f99 9799 6b8c     . ..G.'.B......k
   b7abc:	96f0 9969 109f 8f2e 222b 89f8 0fa8 00e0     ..i.....+"......

000b7acc <_ZL18FreeSansBold12pt7b>:
   b7acc:	7dd0 000b 7ad8 000b 7e20 001d               .}...z.. ~..

000b7ad8 <_ZL24FreeSansBold12pt7bGlyphs>:
   b7ad8:	0000 0000 0007 0001 0000 1104 0308 00f0     ................
   b7ae8:	0009 060a 010b 00ef 0011 100d 000d 00f1     ................
   b7af8:	002b 140d 000d 00ef 004c 1113 0115 00f0     +.......L.......
   b7b08:	0075 1110 0111 00f0 0097 0604 0106 00ef     u...............
   b7b18:	009a 1606 0108 00ef 00ab 1606 0108 00ef     ................
   b7b28:	00bc 0807 0109 00ef 00c3 0b0b 020e 00f6     ................
   b7b38:	00d3 0704 0106 00fe 00d7 0306 0108 00f9     ................
   b7b48:	00da 0304 0106 00fe 00dc 1106 0007 00f0     ................
   b7b58:	00e9 110c 010d 00f0 0103 1107 030e 00f0     ................
   b7b68:	0112 110c 010d 00f0 012c 110c 010d 00f0     ........,.......
   b7b78:	0146 110b 010d 00f0 015e 110c 010d 00f0     F.......^.......
   b7b88:	0178 110c 010d 00f0 0192 110b 010d 00f0     x...............
   b7b98:	01aa 110c 010d 00f0 01c4 110c 010d 00f0     ................
   b7ba8:	01de 0c04 0106 00f5 01e4 1004 0106 00f5     ................
   b7bb8:	01ec 0c0c 010e 00f5 01fe 090c 010e 00f7     ................
   b7bc8:	020c 0c0c 010e 00f5 021e 120c 020f 00ef     ................
   b7bd8:	0239 1515 0117 00ef 0271 1210 0011 00ef     9.......q.......
   b7be8:	0295 120e 0211 00ef 02b5 1210 0111 00ef     ................
   b7bf8:	02d9 120f 0211 00ef 02fb 120d 0210 00ef     ................
   b7c08:	0319 120c 020f 00ef 0334 1210 0112 00ef     ........4.......
   b7c18:	0358 120e 0212 00ef 0378 1204 0207 00ef     X.......x.......
   b7c28:	0381 120b 010e 00ef 039a 1210 0211 00ef     ................
   b7c38:	03be 120b 020f 00ef 03d7 1211 0215 00ef     ................
   b7c48:	03fe 120f 0212 00ef 0420 1211 0113 00ef     ........ .......
   b7c58:	0447 120e 0210 00ef 0467 1311 0113 00ef     G.......g.......
   b7c68:	0490 1210 0211 00ef 04b4 120f 0110 00ef     ................
   b7c78:	04d6 120c 020f 00ef 04f1 120e 0212 00ef     ................
   b7c88:	0511 120f 0010 00ef 0533 1217 0017 00ef     ........3.......
   b7c98:	0567 120f 0110 00ef 0589 1210 000f 00ef     g...............
   b7ca8:	05ad 120d 010f 00ef 05cb 1706 0208 00ef     ................
   b7cb8:	05dd 1107 0007 00f0 05ec 1706 0008 00ef     ................
   b7cc8:	05fe 0b0c 010e 00f0 060f 020f ff0d 0004     ................
   b7cd8:	0613 0304 0006 00ef 0615 0d0d 010e 00f4     ................
   b7ce8:	062b 120d 020f 00ef 0649 0d0c 010d 00f4     +.......I.......
   b7cf8:	065d 120d 010f 00ef 067b 0d0d 010e 00f4     ].......{.......
   b7d08:	0691 1207 0108 00ef 06a1 120d 010f 00f4     ................
   b7d18:	06bf 120c 020e 00ef 06da 1204 0207 00ef     ................
   b7d28:	06e3 1706 0007 00ef 06f5 120c 020e 00ef     ................
   b7d38:	0710 1204 0206 00ef 0719 0d13 0215 00f4     ................
   b7d48:	0738 0d0c 020f 00f4 074c 0d0d 010f 00f4     8.......L.......
   b7d58:	0762 120d 020f 00f4 0780 120d 010f 00f4     b...............
   b7d68:	079e 0d08 0209 00f4 07ab 0d0c 010d 00f4     ................
   b7d78:	07bf 0f06 0108 00f2 07cb 0d0c 020f 00f4     ................
   b7d88:	07df 0d0d 000d 00f4 07f5 0d12 0013 00f4     ................
   b7d98:	0813 0d0d 000d 00f4 0829 120d 000d 00f4     ........).......
   b7da8:	0847 0d0a 010c 00f4 0858 1706 0109 00ef     G.......X.......
   b7db8:	086a 1602 0207 00ef 0870 1706 0309 00ef     j.......p.......
   b7dc8:	0882 050c 000c 00f9                         ........

000b7dd0 <_ZL25FreeSansBold12pt7bBitmaps>:
   b7dd0:	ffff ffff 6676 ff60 f3f0 fffc cf3f 9861     ....vf`.....?.a.
   b7de0:	0e60 7370 1883 f7ff bfff 73fc 1883 c718     `.ps.......s....
   b7df0:	bfff fffd 18e3 c139 0ece 0270 7e00 f80f     ......9...p..~..
   b7e00:	e77f b9af c83d 400f 003f 00ff 05fc 27ff     ....=..@?......'
   b7e10:	3ff9 efeb 3ffe 7ce0 8000 0004 063c c10f     .?...?.|....<...
   b7e20:	fc81 7330 0c8c 8131 60ce cc1f f303 3c00     ..0s..1..`.....<
   b7e30:	8067 f819 7f02 ce80 1170 0686 c139 f887     g.......p...9...
   b7e40:	7e30 070c 0780 1f80 3fc0 3ce0 3ce0 3ee0     0~.......?.<.<.>
   b7e50:	0fe0 07c0 3f00 7f8c f1cc f0fc f0f8 f878     .....?........x.
   b7e60:	7ff8 3ffc 1fde ff8e 66ff 730c 718e 38c7     ...?.....f.s.q.8
   b7e70:	8ee3 e338 1c8e c371 188e c370 1c87 e338     ..8...q...p...8.
   b7e80:	1c87 c771 711c 38ce 1ce7 8063 2310 f35f     ..q..q.8..c..#_.
   b7e90:	1b87 0e14 c001 0738 ff0f ffff 70f8 010e     ......8......p..
   b7ea0:	38c0 ff00 36f3 ffc0 c0ff f0ff 300c 1886     .8...6.......0..
   b7eb0:	0c61 c230 6118 3084 1fc0 fc83 e77f f09e     a.0..a.0........
   b7ec0:	0fff fff0 f00f 0fff fff0 f00f 9ef7 e37f     ................
   b7ed0:	0ffc 0600 7f1c e3ff 8fc7 3c1e f178 c7e3     ...........<x...
   b7ee0:	1e8f 831f 7ffc 9fef fff0 000f 0ff0 e001     ................
   b7ef0:	0f3c e081 033c 7f80 fff7 f07f 071f fffc     <...<...........
   b7f00:	1eef e0f1 031e 78c0 c007 001e 0ff0 fff0     .......x........
   b7f10:	7f1f fce7 801f c003 1ff8 e107 27bc f38c     .............'..
   b7f20:	631e 7bd8 ffff feff 8007 1ef0 c003 e73f     .c.{..........?.
   b7f30:	7ffe 00e7 0660 7ff8 fecf f0f1 000f 0ff0     ....`...........
   b7f40:	fe00 ff1e fce7 003f 830f 7ffc 9fe7 0ff0     ......?.........
   b7f50:	ff78 fecf fff9 f00f 0fff f7f0 7f9f fce3     x...............
   b7f60:	800f ffff ffff e080 071c e001 0f38 c001     ............8...
   b7f70:	0f78 e001 0f38 e001 003c 030f 7ffc 9ec7     x...8...<.......
   b7f80:	e770 390e f8c1 c73f f09e 0fff fff0 7f9f     p..9..?.........
   b7f90:	fce3 801f 031f 7ffc 9eef eff0 f00f 0fff     ................
   b7fa0:	f7f9 3fff eff1 ef00 7f1e fce7 001f f0ff     ...?............
   b7fb0:	0000 ff0f f0ff 0000 ff0f 6c11 1000 0307     ...........l....
   b7fc0:	fcf1 0f7e e080 c00f 803f 007f 03f0 ffff     ..~.....?.......
   b7fd0:	ffff 00f0 0000 ff00 ffff f0ff 0e00 fc00     ................
   b7fe0:	f007 e00f 001f 7ff0 8f1f f0e0 0008 071f     ................
   b7ff0:	7ffc 9fef fff0 000f 0ff0 e001 073c f080     ............<...
   b8000:	000e 00e0 f000 000f 00f0 00fe fc1f c003     ................
   b8010:	38f0 c301 0780 3d18 8799 6cec c371 06c3     .8.....=...lq...
   b8020:	181e f130 8781 188c 607c 63c3 3b8e df8f     ..0.....|`.c.;..
   b8030:	3c8c 70f0 0100 00c0 8007 1f80 00fe c01f     .<.p............
   b8040:	0300 03e0 03e0 07e0 07f0 07f0 0f70 0e78     ............p.x.
   b8050:	0e78 1e38 1c3c 3f3c 3ffc 3ffe 78fe 780e     x.8.<.<?.?.?.x.x
   b8060:	700f f00f ff07 ffc3 ffcf 3e3c 7bf0 efc1     .p........<>.{..
   b8070:	bf0f fffc ffe3 07cf 0fbc 3ff0 ffc0 ff07     ...........?....
   b8080:	fffe fffb 0780 1fe0 3ff8 7cfc 783e f81f     .........?.|>x..
   b8090:	f00f f000 f000 f000 f000 f000 f800 780f     ...............x
   b80a0:	7c1f 3f3e 1ffe 07fc fff0 ffe1 ffe3 83e7     .|>?............
   b80b0:	03ef 07de 07fc 0ff8 1ff0 3fe0 7fc0 ff80     ...........?....
   b80c0:	fe03 bc07 7f1f fffc fff1 ff80 fff7 fdbf     ................
   b80d0:	0fe0 7800 c003 fc1f e7ff 3cff e001 000f     ...x.......<....
   b80e0:	0378 1fc0 ffff ffff ffc0 ffff ffff f000     x...............
   b80f0:	000f 0ff0 fffe feef 0ff0 f000 000f 0ff0     ................
   b8100:	f000 000f f003 fc0f fe3f 1f3e 0778 0078     ........?.>.x.x.
   b8110:	00f0 00f0 7ff0 7ff0 7ff0 07f0 0778 0f7c     ............x.|.
   b8120:	1f3e fb3f fb0f e303 3ff0 ffc0 fc03 f00f     >.?......?......
   b8130:	c03f 03ff ffff ffff ffff fc03 f00f c03f     ?.............?.
   b8140:	03ff 0ffc 3ff0 f0c0 ffff ffff ffff ffff     .....?..........
   b8150:	01ff 3ce0 8007 1ef0 c003 0f78 e001 073c     ...<......x...<.
   b8160:	fff8 e31f 7bfc 7ffe e0c3 3ef0 3cf0 78f0     .....{.....>.<.x
   b8170:	f0f0 e0f1 c0f3 80f7 00ff 80ff 80ff c0fb     ................
   b8180:	e0f1 f0f0 f0f0 78f0 3cf0 3ef0 1ef0 1ef0     .......x.<.>....
   b8190:	c003 0f78 e001 073c f080 031e 78c0 010f     ..x...<......x..
   b81a0:	3ce0 ff07 ffff f8fc fe1f ff0f ff0f ff87     .<..............
   b81b0:	ffc3 ffe1 fff9 effc 77fe 3bfb ddfd fcfe     .........w.;....
   b81c0:	7eff 9f7f cf3f e79f f38f f8c7 c0e3 1ff0     .~..?...........
   b81d0:	3ff0 7ff0 ffe0 ffe1 fdc3 fbc7 f38f e79f     .?..............
   b81e0:	c73f 8f7f 0fff 1ffe 1ffc 1ff8 3ff0 3ce0     ?............?.<
   b81f0:	e003 fc0f ff0f c787 80c7 c0f3 c07b e01f     ............{...
   b8200:	f00f f807 fc03 fe01 f700 f380 78c0 f8f0     .............x..
   b8210:	fc7f fc1f f803 ff00 ffe3 ffef 1fbc 3ff0     ...............?
   b8220:	ffc0 fc03 ff1f fffb fecf 003c 03f0 0fc0     ..........<.....
   b8230:	3c00 f000 c003 0300 0fe0 0ffc 87ff c7c7     .<..............
   b8240:	f380 7bc0 1fc0 0fe0 07f0 03f8 01fc 04fe     ...{............
   b8250:	87f7 c3f3 f0f8 7ff8 1ffc 83ff 80f1 0000     ................
   b8260:	f8ff fcff fcff 3ef0 1ef0 1ef0 1ef0 3cf0     .......>.......<
   b8270:	f8ff f0ff f8ff 3cf0 3cf0 3cf0 3cf0 3cf0     .......<.<.<.<.<
   b8280:	3cf0 1ff0 c00f e17f e7ff efc3 de03 3c00     .<.............<
   b8290:	7f00 7f00 3ff0 0ff8 01f8 01f0 03fe 0fde     .....?..........
   b82a0:	febf f83f c01f ffff ffff f0f0 000f 0ff0     ..?.............
   b82b0:	f000 000f 0ff0 f000 000f 0ff0 f000 000f     ................
   b82c0:	f0f0 c03f 03ff 0ffc 3ff0 ffc0 fc03 f00f     ..?......?......
   b82d0:	c03f 03ff 0ffc 3ff0 f7c0 9f87 3ffe 3ff0     ?......?.....?.?
   b82e0:	7000 f00e e03d c079 81e3 87c7 0e87 1c0e     .p..=.y.........
   b82f0:	781e e01c c039 8073 007e 01fc 01f8 03e0     .x..9.s.~.......
   b8300:	07c0 7080 1c38 f0e0 e179 f3f0 e1c3 87e3     ...p8...y.......
   b8310:	87c3 870f 3b0e 1e9e 3877 ee1c 3970 e0cc     .....;..w8..p9..
   b8320:	9973 6ec0 003f 7efc f801 03fc f8f0 e103     s..n?..~........
   b8330:	07e0 c083 070f f080 f03c e1f9 e7e1 cf83     ........<.......
   b8340:	fc03 f003 e007 8007 000f 003f 01ff 07fe     ..........?.....
   b8350:	0f9e 3c1e f83c e03d f078 781e 781e 3c3c     ...<<.=.x..x.x<<
   b8360:	3c3c 1e78 0e78 0f70 07f0 07e0 03e0 03c0     <<x.x.p.........
   b8370:	03c0 03c0 03c0 03c0 03c0 03c0 ffc0 ffff     ................
   b8380:	feff f001 000f 0ff0 f800 8007 0778 7c80     ............x..|
   b8390:	c003 033c 1fc0 ffff ffff ffc0 fcff cff3     ..<.............
   b83a0:	f33c 3ccf cff3 f33c 3ccf ffff c1c0 0381     <..<..<..<......
   b83b0:	0406 180c 3010 4060 81c1 0603 ffff 3ccf     .....0`@.......<
   b83c0:	cff3 f33c 3ccf cff3 f33c ffcf c0ff 000f     ..<..<..<.......
   b83d0:	0ff0 f801 831b 399c 0cc3 e770 e00e ff70     .......9..p...p.
   b83e0:	ffff e6fc 1f30 ff83 fd1f e0e1 030f fff9     ....0...........
   b83f0:	1edf f7f0 bf8f fffc cfe3 f080 8007 013c     ..............<.
   b8400:	0fe0 7b00 ffc3 fe9f f7f8 fc83 e01f 07ff     ...{............
   b8410:	3ff8 dfe3 fffe bee7 0f00 fe83 f77f f08f     .?..............
   b8420:	007f 0ff0 f000 8f77 f37f 0ffe 0080 0378     ......w.......x.
   b8430:	1ec0 f000 8f07 ffbc ffef ff78 fc83 e01f     ..........x.....
   b8440:	07ff 3df8 efe3 3fff fbf8 1fc0 fe81 f91f     ...=...?........
   b8450:	cff1 7f07 fffb 00de 03f0 9fc3 7ffc f8c0     ................
   b8460:	3e00 fbfd 9fc7 3cbf f178 c7e3 1e8f 783c     .>.....<x.....<x
   b8470:	1ef0 fb79 fedf fff1 f807 c13f 0ffe 7ff0     ..y.......?.....
   b8480:	dfc7 7ffe f7f1 3c80 ff01 7f1e fef0 f000     .......<........
   b8490:	000f 0ff0 f000 7c0f efff f9ff 0fff fff0     .......|........
   b84a0:	f00f 0fff fff0 f00f 0fff f0ff ff0f ffff     ................
   b84b0:	ffff 3cff c0f3 f300 3ccf cff3 f33c 3ccf     ...<.....<..<..<
   b84c0:	cff3 ffff f080 000f 0ff0 f000 0f0f eff1     ................
   b84d0:	f73c f08f 0fff fff8 3c8f cff1 f01e 0fef     <........<......
   b84e0:	ffff ffff ffff ffff f7ff 9f8f fbfb ffff     ................
   b84f0:	f8fc 1eff e31f fcc3 7f78 0f8f e1f1 3cfe     ........x......<
   b8500:	c73f f887 fff0 1e1e cff7 fffe 9fff fff0     ?...............
   b8510:	f00f 0fff fff0 f00f 0fff f0f0 810f 1fff     ................
   b8520:	f1fc 07ef 3ff8 fec1 f00f c77b fc9f c07f     .....?....{.....
   b8530:	00f8 c7f7 3fff f1fd 07ef 3ff8 fec1 f00f     .....?.....?....
   b8540:	c77f fdbf cfff 7878 c003 001e 07f0 0080     ......xx........
   b8550:	790f dfff f1fe 07ff 3ff8 fec1 f00f c77b     .y.......?....{.
   b8560:	fedf f17f 80f7 013c 0fe0 7800 c003 f7f3     ......<....x....
   b8570:	f8ff f0f0 f0f0 f0f0 f0f0 1ff0 fc87 efff     ................
   b8580:	f80f f00f e07f 01ff 0fff e7ff 1ffe 7980     ...............y
   b8590:	bfe7 e7fd 799e 9ee7 f37d f0c0 0fff fff0     .....y..}.......
   b85a0:	f00f 0fff fff0 f00f 1fff f7ff 3eff f0f0     .............>..
   b85b0:	837b 1c9e e3f1 1c8e 7770 b883 c01d 037e     {.......pw....~.
   b85c0:	1fe0 7000 f000 dce1 7778 3d1f cfe7 b379     ...p....xw.=..y.
   b85d0:	6c8e bbe3 ee38 1ffc 073f c1c7 f0f1 787c     .l..8...?.....|x
   b85e0:	1e0e 7800 c7f3 788f 813b 07fc 1ec0 f001     ...x...x;.......
   b85f0:	c01f 0fef f178 87e7 f000 837b 1c9e e371     ....x.....{...q.
   b8600:	1e8e 7370 b883 c01f 037e 0fe0 7000 8003     ..ps....~....p..
   b8610:	073c 3ec0 e001 ff00 ffff 0ffc 8307 e0c1     <..>............
   b8620:	78f0 0f3c ffff c0ff f31c 38ce 8ee3 e338     .x<........8..8.
   b8630:	f0bc 8ee3 e338 3c8e c0f1 ffff ffff f0ff     ....8..<........
   b8640:	8fe3 711c 1cc7 c771 3d0f 1cc7 c771 f31c     ...q..q..=..q...
   b8650:	00ce 0f78 cfe0 7f30 e001 0000               ..x...0.....

000b865c <_ZL6Org_01>:
   b865c:	79bc 000b 76c4 000b 7e20 0007               .y...v.. ~..

000b8668 <_ZL4font>:
   b8668:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8678:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8688:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8698:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b86a8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b86b8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b86c8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b86d8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b86e8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b86f8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8708:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8718:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8728:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8738:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8748:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8758:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8768:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8778:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8788:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8798:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b87a8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b87b8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b87c8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b87d8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b87e8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b87f8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8808:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8818:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8828:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8838:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8848:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8858:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8868:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8878:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8888:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8898:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b88a8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b88b8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b88c8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b88d8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b88e8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b88f8:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8908:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8918:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8928:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8938:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8948:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8958:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8968:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8978:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8988:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8998:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b89a8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b89b8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b89c8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b89d8:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b89e8:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b89f8:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8a08:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8a18:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8a28:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8a38:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8a48:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8a58:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8a68:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8a78:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8a88:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8a98:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8aa8:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8ab8:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8ac8:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8ad8:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8ae8:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8af8:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8b08:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8b18:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8b28:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8b38:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8b48:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8b58:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b8b68 <_ZTV12Adafruit_GFX>:
	...
   b8b78:	5715 000b 6b59 000b 4a15 000b 51c3 000b     .W..Yk...J...Q..
   b8b88:	51c5 000b 51f7 000b 51d3 000b 51e5 000b     .Q...Q...Q...Q..
   b8b98:	5105 000b 51c3 000b 53ef 000b 53ed 000b     .Q...Q...S...S..
   b8ba8:	520f 000b 524d 000b 5287 000b 52cd 000b     .R..MR...R...R..
   b8bb8:	52e9 000b 536d 000b                         .R..mS..

000b8bc0 <_ZTV15Adafruit_SPITFT>:
	...
   b8bd0:	5715 000b 6b59 000b 5fbf 000b 5a53 000b     .W..Yk..._..SZ..
   b8be0:	5f81 000b 5b73 000b 5e2d 000b 5dd3 000b     ._..s[..-^...]..
   b8bf0:	5105 000b 5a7f 000b 53ef 000b 5efb 000b     .Q...Z...S...^..
   b8c00:	5d57 000b 5cd7 000b 5c13 000b 52cd 000b     W]...\...\...R..
   b8c10:	52e9 000b 536d 000b 4a15 000b 4a15 000b     .R..mS...J...J..

000b8c20 <_ZL11cmd_240x240>:
   b8c20:	0109 9680 8011 3aff 5581 360a 0801 042a     .......:.U.6..*.
   b8c30:	0000 f000 042b 0000 f000 8021 130a 0a80     ....+.....!.....
   b8c40:	8029 00ff                                   )...

000b8c44 <_ZTV15Adafruit_ST7789>:
	...
   b8c4c:	6085 000b 60ed 000b 5715 000b 6b59 000b     .`...`...W..Yk..
   b8c5c:	5fbf 000b 5a53 000b 5f81 000b 5b73 000b     ._..SZ..._..s[..
   b8c6c:	5e2d 000b 5dd3 000b 5105 000b 5a7f 000b     -^...]...Q...Z..
   b8c7c:	6087 000b 5efb 000b 5d57 000b 5cd7 000b     .`...^..W]...\..
   b8c8c:	5c13 000b 52cd 000b 52e9 000b 536d 000b     .\...R...R..mS..
   b8c9c:	61b9 000b 61d9 000b                         .a...a..

000b8ca4 <_ZTV15Adafruit_ST77xx>:
	...
   b8cac:	6145 000b 622b 000b 5715 000b 6b59 000b     Ea..+b...W..Yk..
   b8cbc:	5fbf 000b 5a53 000b 5f81 000b 5b73 000b     ._..SZ..._..s[..
   b8ccc:	5e2d 000b 5dd3 000b 5105 000b 5a7f 000b     -^...]...Q...Z..
   b8cdc:	6147 000b 5efb 000b 5d57 000b 5cd7 000b     Ga...^..W]...\..
   b8cec:	5c13 000b 52cd 000b 52e9 000b 536d 000b     .\...R...R..mS..
   b8cfc:	61b9 000b 61d9 000b                         .a...a..

000b8d04 <_ZTVN5spark13EthernetClassE>:
	...
   b8d0c:	67c3 000b 67b9 000b 67af 000b 67a5 000b     .g...g...g...g..
   b8d1c:	6799 000b 678d 000b 6a35 000b 6a3d 000b     .g...g..5j..=j..
   b8d2c:	6781 000b 6779 000b 676f 000b 6765 000b     .g..yg..og..eg..
   b8d3c:	6a6d 000b                                   mj..

000b8d40 <_ZTV7TwoWire>:
	...
   b8d48:	67e1 000b 682b 000b 6803 000b 67e3 000b     .g..+h...h...g..
   b8d58:	680b 000b 6813 000b 681b 000b 6823 000b     .h...h...h..#h..

000b8d68 <_ZTV9IPAddress>:
	...
   b8d70:	6905 000b 68f5 000b 68f7 000b 7061 0070     .i...h...h..app.

000b8d80 <_ZTVN5spark12NetworkClassE>:
	...
   b8d88:	69f5 000b 69ff 000b 6a09 000b 6a13 000b     .i...i...j...j..
   b8d98:	6a1d 000b 6a29 000b 6a35 000b 6a3d 000b     .j..)j..5j..=j..
   b8da8:	6a45 000b 6a51 000b 6a59 000b 6a63 000b     Ej..Qj..Yj..cj..
   b8db8:	6a6d 000b 616e 006e 6e69 0066 766f 0066     mj..nan.inf.ovf.
   b8dc8:	002e                                        ..

000b8dca <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8dca:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b8dda:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b8dea:	6d69 0065 0000                              ime...

000b8df0 <_ZTV11USARTSerial>:
	...
   b8df8:	6f79 000b 6fe5 000b 6fbd 000b 6b59 000b     yo...o...o..Yk..
   b8e08:	6f8d 000b 6fa9 000b 6f9b 000b 6fb7 000b     .o...o...o...o..
   b8e18:	6f7b 000b 6f7f 000b                         {o...o..

000b8e20 <_ZTV9USBSerial>:
	...
   b8e28:	7023 000b 708b 000b 7061 000b 6b59 000b     #p...p..ap..Yk..
   b8e38:	7053 000b 7025 000b 7035 000b 7085 000b     Sp..%p..5p...p..
   b8e48:	7045 000b 701d 000b                         Ep...p..

000b8e50 <_ZTVN5spark9WiFiClassE>:
	...
   b8e58:	7183 000b 7179 000b 716f 000b 7125 000b     .q..yq..oq..%q..
   b8e68:	7163 000b 7157 000b 6a35 000b 6a3d 000b     cq..Wq..5j..=j..
   b8e78:	714b 000b 7143 000b 7139 000b 712f 000b     Kq..Cq..9q../q..
   b8e88:	6a6d 000b                                   mj..

000b8e8c <_ZSt7nothrow>:
   b8e8c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8e9c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b8eac:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8ebc:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8ecc:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8edc:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8eec:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8efd <link_const_data_end>:
   b8efd:	00          	.byte	0x00
	...

000b8f00 <link_constructors_location>:
   b8f00:	000b4d95 	.word	0x000b4d95
   b8f04:	000b6755 	.word	0x000b6755
   b8f08:	000b67cd 	.word	0x000b67cd
   b8f0c:	000b69e5 	.word	0x000b69e5
   b8f10:	000b6b45 	.word	0x000b6b45
   b8f14:	000b6dd1 	.word	0x000b6dd1
   b8f18:	000b6f41 	.word	0x000b6f41
   b8f1c:	000b6f65 	.word	0x000b6f65
   b8f20:	000b718d 	.word	0x000b718d
